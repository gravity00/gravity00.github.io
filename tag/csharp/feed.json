{
    "version": "https://jsonfeed.org/version/1",
    "title": "code-corner.dev • All posts by \"csharp\" tag",
    "description": "",
    "home_page_url": "https://code-corner.dev",
    "items": [
        {
            "id": "https://code-corner.dev/2024/06/19/NET-9-ToList-vs-ToArray/",
            "url": "https://code-corner.dev/2024/06/19/NET-9-ToList-vs-ToArray/",
            "title": ".NET 9 — ToList vs ToArray",
            "date_published": "2024-06-18T23:00:00.000Z",
            "content_html": "<p>Last year I made an <a href=\"/2023/11/09/NET-%E2%80%94-ToList-vs-ToArray/\" title=\".NET — ToList vs ToArray\">article comparing the performance of ToList versus ToArray</a> when creating short lived collections that won’t be mutated, usually used to prevent multiple enumerations when iterating over a temporary LINQ transformation or to ensure mapping exceptions will be thrown inside the corresponding application layer.</p>\n<p>The tests were performed with .NET Framework 4.8, .NET 7 and .NET 8, which concluded that <code>ToArray</code> is significantly faster and more memory efficient for almost all collection sizes, with the only exception with very large collections in .NET 8 were <code>ToList</code> was faster - but still uses more memory).</p>\n<p>Assuming everything goes as planed, <a href=\"https://devblogs.microsoft.com/dotnet/our-vision-for-dotnet-9/\">Microsoft should release .NET 9 by the end of 2024</a>. This is the next major version of their most popular development framework that will bring a lot of new features (C# 13 is one of them) and performance improvements.</p>\n<p>Since we already have .NET 9 preview 5 available, which contains an even more optimized <code>SegmentedArrayBuilder</code> that is used internally by <code>ToArray</code>, I think it is a good time to compare the performance of both these methods in .NET 9 while using .NET 8 as the baseline.</p>\n<h1 id=\"Performance-Test\"><a href=\"#Performance-Test\" class=\"headerlink\" title=\"Performance Test\"></a>Performance Test</h1><p>Once again, I’m going to use the well known C# library <code>BenchmarkDotNet</code> to run the tests and the environment will be the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BenchmarkDotNet v0.13.10, Windows 11 (10.0.22631.3737/23H2/2023Update/SunValley3)</span><br><span class=\"line\">AMD Ryzen 7 3700X, 1 CPU, 16 logical and 8 physical cores</span><br><span class=\"line\">.NET SDK 9.0.100-preview.5.24307.3</span><br><span class=\"line\">  [Host]               : .NET 8.0.6 (8.0.624.26715), X64 RyuJIT AVX2</span><br><span class=\"line\">  .NET 8.0             : .NET 8.0.6 (8.0.624.26715), X64 RyuJIT AVX2</span><br><span class=\"line\">  .NET 9.0             : .NET 9.0.0 (9.0.24.30607), X64 RyuJIT AVX2</span><br><span class=\"line\">  .NET Framework 4.8.1 : .NET Framework 4.8.1 (4.8.9241.0), X64 RyuJIT VectorSize=256</span><br></pre></td></tr></table></figure>\n\n<p>The test consists in the creation of a collection that will hold random integers with a size defined by a test parameter. To ensure the collection initialization doesn’t affect performance, it will be created and cached during test setup, but converted to a new <code>IEnumerable</code> before invoking either <code>ToArray</code> or <code>ToList</code>.</p>\n<p>Keep in mind we want to test the performance of iterating over an <code>IEnumerable</code> and create either an array or a list so, to prevent .NET internal optimizations (like using a <code>SelectArrayIterator</code>), the method that converts the cached array to an <code>IEnumerable</code> will use the <code>yield return</code> keyword. This is different than the <a href=\"/2023/11/09/NET-%E2%80%94-ToList-vs-ToArray/\" title=\".NET — ToList vs ToArray\">previous article</a> were I was using the <code>Select</code> method which would return an optimized enumerable for arrays and I want to test the worst case scenario.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">SimpleJob(RuntimeMoniker.Net80, baseline: true)</span>]</span><br><span class=\"line\">[<span class=\"meta\">SimpleJob(RuntimeMoniker.Net90)</span>]</span><br><span class=\"line\">[<span class=\"meta\">MemoryDiagnoser</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ToListVsToArray</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Params(10, 100, 1000, 10000, 100000)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span>[] _items;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">GlobalSetup</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Setup</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> random = <span class=\"keyword\">new</span> Random(<span class=\"number\">123</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        _items = Enumerable.Range(<span class=\"number\">0</span>, Size).Select(_ =&gt; random.Next()).ToArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Benchmark</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span>[] <span class=\"title\">ToArray</span>()</span> =&gt; CreateItemsEnumerable().ToArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Benchmark</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;<span class=\"built_in\">int</span>&gt; <span class=\"title\">ToList</span>()</span> =&gt; CreateItemsEnumerable().ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> IEnumerable&lt;<span class=\"built_in\">int</span>&gt; <span class=\"title\">CreateItemsEnumerable</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> _items)</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Performance-results\"><a href=\"#Performance-results\" class=\"headerlink\" title=\"Performance results\"></a>Performance results</h1><p>Since this article is a continuation of my <a href=\"/2023/11/09/NET-%E2%80%94-ToList-vs-ToArray/\" title=\".NET — ToList vs ToArray\">previous one</a>, were I concluded using <code>ToArray</code> is faster and more memory efficient than <code>ToList</code>, let’s compare if that statement still holds true.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Method  | Size   | Mean          | Error         | StdDev        | Gen0     | Gen1     | Gen2     | Allocated |</span><br><span class=\"line\">|-------- |------- |--------------:|--------------:|--------------:|---------:|---------:|---------:|----------:|</span><br><span class=\"line\">| ToArray | 10     |      70.39 ns |      0.366 ns |      0.342 ns |   0.0134 |        - |        - |     112 B |</span><br><span class=\"line\">| ToList  | 10     |      72.85 ns |      0.744 ns |      0.696 ns |   0.0315 |        - |        - |     264 B |</span><br><span class=\"line\">| ToArray | 100    |     322.65 ns |      1.816 ns |      1.610 ns |   0.0563 |        - |        - |     472 B |</span><br><span class=\"line\">| ToList  | 100    |     368.11 ns |      4.283 ns |      4.006 ns |   0.1469 |        - |        - |    1232 B |</span><br><span class=\"line\">| ToArray | 1000   |   2,451.62 ns |     19.687 ns |     16.439 ns |   0.4845 |        - |        - |    4072 B |</span><br><span class=\"line\">| ToList  | 1000   |   2,854.28 ns |     24.286 ns |     22.717 ns |   1.0109 |   0.0153 |        - |    8472 B |</span><br><span class=\"line\">| ToArray | 10000  |  22,275.27 ns |    163.363 ns |    152.810 ns |   4.7607 |        - |        - |   40072 B |</span><br><span class=\"line\">| ToList  | 10000  |  26,944.65 ns |    293.685 ns |    260.344 ns |  15.6250 |        - |        - |  131448 B |</span><br><span class=\"line\">| ToArray | 100000 | 328,160.90 ns |  1,874.673 ns |  1,753.570 ns | 124.5117 | 124.5117 | 124.5117 |  400156 B |</span><br><span class=\"line\">| ToList  | 100000 | 410,583.73 ns |  2,298.854 ns |  2,037.874 ns | 285.6445 | 285.6445 | 285.6445 | 1049120 B |</span><br></pre></td></tr></table></figure>\n\n<p>Using <code>ToList</code> as the baseline, we can see the <code>ToArray</code> method is, on average, 15% faster and uses 60% less memory.</p>\n<p>Keep in mind that <code>ToArray</code> is a better choice than <code>ToList</code> even on larger collections, something that wasn’t true in .NET 8, were it was 4% slower despite using less memory.</p>\n<p><strong>The winner:</strong> .NET 9.0</p>\n<h1 id=\"NET-performance-evolution\"><a href=\"#NET-performance-evolution\" class=\"headerlink\" title=\".NET performance evolution\"></a>.NET performance evolution</h1><p>Because we also want to compare the performance of .NET 9 over .NET 8, let’s analyze each method individually on each framework and see if anything has changed.</p>\n<h2 id=\"ToArray\"><a href=\"#ToArray\" class=\"headerlink\" title=\"ToArray\"></a>ToArray</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Runtime  | Size   | Mean          | Error         | StdDev        | Ratio | RatioSD | Gen0     | Gen1     | Gen2     | Allocated | Alloc Ratio |</span><br><span class=\"line\">|----------|------- |--------------:|--------------:|--------------:|------:|--------:|---------:|---------:|---------:|----------:|------------:|</span><br><span class=\"line\">| .NET 8.0 | 10     |     107.51 ns |      1.585 ns |      1.238 ns |  1.00 |    0.00 |   0.0315 |        - |        - |     264 B |        1.00 |</span><br><span class=\"line\">| .NET 9.0 | 10     |      70.39 ns |      0.366 ns |      0.342 ns |  0.65 |    0.01 |   0.0134 |        - |        - |     112 B |        0.42 |</span><br><span class=\"line\">| .NET 8.0 | 100    |     442.33 ns |      3.788 ns |      3.543 ns |  1.00 |    0.00 |   0.1431 |        - |        - |    1200 B |        1.00 |</span><br><span class=\"line\">| .NET 9.0 | 100    |     322.65 ns |      1.816 ns |      1.610 ns |  0.73 |    0.01 |   0.0563 |        - |        - |     472 B |        0.39 |</span><br><span class=\"line\">| .NET 8.0 | 1000   |   3,186.13 ns |     31.530 ns |     29.493 ns |  1.00 |    0.00 |   1.0185 |        - |        - |    8544 B |        1.00 |</span><br><span class=\"line\">| .NET 9.0 | 1000   |   2,451.62 ns |     19.687 ns |     16.439 ns |  0.77 |    0.00 |   0.4845 |        - |        - |    4072 B |        0.48 |</span><br><span class=\"line\">| .NET 8.0 | 10000  |  30,659.83 ns |    292.167 ns |    273.293 ns |  1.00 |    0.00 |  12.6343 |        - |        - |  106232 B |        1.00 |</span><br><span class=\"line\">| .NET 9.0 | 10000  |  22,275.27 ns |    163.363 ns |    152.810 ns |  0.73 |    0.00 |   4.7607 |        - |        - |   40072 B |        0.38 |</span><br><span class=\"line\">| .NET 8.0 | 100000 | 482,397.96 ns |  1,499.949 ns |  1,403.053 ns |  1.00 |    0.00 | 249.5117 | 249.5117 | 249.5117 |  925140 B |        1.00 |</span><br><span class=\"line\">| .NET 9.0 | 100000 | 328,160.90 ns |  1,874.673 ns |  1,753.570 ns |  0.68 |    0.00 | 124.5117 | 124.5117 | 124.5117 |  400156 B |        0.43 |</span><br></pre></td></tr></table></figure>\n\n<p>Using .NET 8 as the baseline, we can see the <code>ToArray</code> method is, on average, 30% faster and uses 55% less memory on .NET 9. </p>\n<p><strong>The winner:</strong> .NET 9.0</p>\n<h2 id=\"ToList\"><a href=\"#ToList\" class=\"headerlink\" title=\"ToList\"></a>ToList</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Runtime  | Size   | Mean          | Error         | StdDev        | Ratio | RatioSD | Gen0     | Gen1     | Gen2     | Allocated | Alloc Ratio |</span><br><span class=\"line\">|----------|------- |--------------:|--------------:|--------------:|------:|--------:|---------:|---------:|---------:|----------:|------------:|</span><br><span class=\"line\">| .NET 8.0 | 10     |      87.44 ns |      1.803 ns |      1.929 ns |  1.00 |    0.00 |   0.0315 |        - |        - |     264 B |        1.00 |</span><br><span class=\"line\">| .NET 9.0 | 10     |      72.85 ns |      0.744 ns |      0.696 ns |  0.84 |    0.02 |   0.0315 |        - |        - |     264 B |        1.00 |</span><br><span class=\"line\">| .NET 8.0 | 100    |     420.90 ns |      3.654 ns |      2.853 ns |  1.00 |    0.00 |   0.1469 |        - |        - |    1232 B |        1.00 |</span><br><span class=\"line\">| .NET 9.0 | 100    |     368.11 ns |      4.283 ns |      4.006 ns |  0.87 |    0.01 |   0.1469 |        - |        - |    1232 B |        1.00 |</span><br><span class=\"line\">| .NET 8.0 | 1000   |   3,448.37 ns |     67.905 ns |     78.199 ns |  1.00 |    0.00 |   1.0109 |   0.0153 |        - |    8472 B |        1.00 |</span><br><span class=\"line\">| .NET 9.0 | 1000   |   2,854.28 ns |     24.286 ns |     22.717 ns |  0.82 |    0.01 |   1.0109 |   0.0153 |        - |    8472 B |        1.00 |</span><br><span class=\"line\">| .NET 8.0 | 10000  |  35,650.35 ns |    707.370 ns |  1,537.764 ns |  1.00 |    0.00 |  15.6250 |        - |        - |  131448 B |        1.00 |</span><br><span class=\"line\">| .NET 9.0 | 10000  |  26,944.65 ns |    293.685 ns |    260.344 ns |  0.77 |    0.05 |  15.6250 |        - |        - |  131448 B |        1.00 |</span><br><span class=\"line\">| .NET 8.0 | 100000 | 462,317.72 ns |  1,686.365 ns |  1,577.427 ns |  1.00 |    0.00 | 285.6445 | 285.6445 | 285.6445 | 1049120 B |        1.00 |</span><br><span class=\"line\">| .NET 9.0 | 100000 | 410,583.73 ns |  2,298.854 ns |  2,037.874 ns |  0.89 |    0.01 | 285.6445 | 285.6445 | 285.6445 | 1049120 B |        1.00 |</span><br></pre></td></tr></table></figure>\n\n<p>Using .NET 8 as the baseline, we can see the <code>ToList</code> method is, on average, 15% faster while having exactly the same memory footprint on .NET 9.</p>\n<p><strong>The winner:</strong> .NET 9.0</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article we compared the performance of <code>ToArray</code> versus <code>ToList</code> on .NET 9 and concluded, once again, if you need to create a temporary collection in memory to prevent multiple enumerations of an <code>IEnumerable</code>, using <code>ToArray</code> is more performant in all scenarios independent of collection size, something that wasn’t true in .NET 8.</p>\n<p>This is also a clear statement that Microsoft made a good decision to introduce classes and structures dedicated to performance, like <code>ArrayPool</code> or <code>ReadOnlySpan</code>, making it easier to share or reuse resources without constantly (de)allocating memory. This has been specially important for our performance tests since <code>SegmentedArrayBuilder</code> makes heavy use of these functionalities, now more than ever.</p>\n",
            "tags": [
                "dotnetcore",
                "csharp",
                "dotnet",
                "linq"
            ]
        },
        {
            "id": "https://code-corner.dev/2024/02/29/NET-Hangfire/",
            "url": "https://code-corner.dev/2024/02/29/NET-Hangfire/",
            "title": ".NET — Hangfire",
            "date_published": "2024-02-29T00:00:00.000Z",
            "content_html": "<p>One common scenario when developing applications is the need to perform background processing than can either be run only once (like sending an email) or scheduled to be run multiple times within a given interval (like doing database housekeeping), usually defined by a <a href=\"https://en.wikipedia.org/wiki/Cron\">cron</a> expression.</p>\n<p>When I need to implement such requirements my first choice for the last few years as always been <a href=\"https://www.hangfire.io/\">Hangfire</a>.</p>\n<p>It integrates seamlessly with ASP.NET Core applications, it has a simple but very powerful dashboard to monitor and manually trigger recurring jobs and is open source and completely free for commercial use.</p>\n<p>In this article I’m going to explain how to configure both Hangfire server and dashboard into an ASP.NET Core application and recurrently send requests to HTTP endpoints, which will be configured based on application settings without requiring a service restart to detect changes.</p>\n<hr>\n<h2 id=\"Why-use-Hangfire-to-trigger-HTTP-endpoints\"><a href=\"#Why-use-Hangfire-to-trigger-HTTP-endpoints\" class=\"headerlink\" title=\"Why use Hangfire to trigger HTTP endpoints?\"></a>Why use Hangfire to trigger HTTP endpoints?</h2><p>An extremely common approach I use when implementing schedulers that may run millions of jobs per day is to use Hangfire to trigger HTTP endpoints, offloading work to external APIs instead of in process.</p>\n<img src=\"/2024/02/29/NET-Hangfire/01_http_architecture.png\" class=\"\">\n\n<p>By design, Hangfire is implemented to be easily distributed on different machines by orchestrating the job execution using a persistent data storage shared across all servers.</p>\n<p>The problem comes when some jobs need more processing power than others or millions of executions per day. You’ll have to maintain multiple nodes looking at different queues, code changes must be properly distributed to the relevant nodes, the database will probably become a bottleneck - even if using some message bus or in-memory cache.</p>\n<p>To attenuate this problem I usually prefer to keep Hangfire instances as simple as possible, by recurrently doing simple HTTP requests that can be configured either by settings files or database providers (<a href=\"/2023/12/21/Configuration-providers-in-NET/\" title=\"Configuration providers in .NET\">like exemplified in this article I recently made</a>). This allows to offload the heavy work to external APIs that can be more easily scaled, tested, distributed and monitored and ensuring you’ll need much fewer Hangfire instances to run millions of jobs per day while using the dashboard to keep track of job executions.</p>\n<h2 id=\"Solution-setup\"><a href=\"#Solution-setup\" class=\"headerlink\" title=\"Solution setup\"></a>Solution setup</h2><p>In this example, <a href=\"https://github.com/gravity00/article-hangfire\">which I have available on GitHub</a>, I’m going to setup an ASP.NET Core application with .NET 8 to host both Hangfire server and dashboard. For simplicity, the job storage will be in-memory but feel free to use any other of the supported ones (like SQL Server).</p>\n<p>Start by creating an empty ASP.NET Core project and register the following NuGet packages:</p>\n<ul>\n<li><code>Hangfire.AspNetCore</code> - depends  on <code>Hangfire.NetCore</code>, which is used to run the jobs server on <code>Microsoft.Extensions.Hosting</code> as a hosted service, but also brings a Web dashboard that can be used to manually trigger recurring jobs or check execution status;</li>\n<li><code>Hangfire.InMemory</code> - in-memory job storage but you can swap for any other of your preference, like <code>Hangfire.SqlServer</code>;</li>\n</ul>\n<p>Open the <code>Program.cs</code> file, register both the server and dashboard services into the dependency injection container and configure the dashboard to listen on base address:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddHangfire(config =&gt; config</span><br><span class=\"line\">    .UseInMemoryStorage()</span><br><span class=\"line\">);</span><br><span class=\"line\">builder.Services.AddHangfireServer();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\">app.MapHangfireDashboard(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.Run();</span><br></pre></td></tr></table></figure>\n\n<p>If you run the application, the Hangfire dashboard will be shown with a single server running but without recurring jobs.</p>\n<img src=\"/2024/02/29/NET-Hangfire/02_setup.png\" class=\"\">\n\n<p>As you can see, in just a few minutes you have Hangfire up and ready do run. As stated previously, this is one of the reasons I always use Hangfire for scheduling jobs, the simplicity of it!</p>\n<h2 id=\"HTTP-job-options\"><a href=\"#HTTP-job-options\" class=\"headerlink\" title=\"HTTP job options\"></a>HTTP job options</h2><p>Now that we have both the server and dashboard running, let’s start by defining the recurring HTTP options that we’ll read from the application settings and dynamically configure endpoints to be recurrently triggered.</p>\n<p>Let’s start by defining the options for requesting a single endpoint. To keep things simple, I’ll assume the need for an HTTP address, method, headers and a request timeout. It will also need a <a href=\"https://en.wikipedia.org/wiki/Cron\">cron</a> expression, so we can define the  recurrency interval, and a flag to enable it so you can manage per environment which jobs are enabled.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpJobEndpointOptions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Cron &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> Enabled &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Address &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Method &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IReadOnlyDictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; Headers &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TimeSpan? Timeout &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> IgnoreInvalidStatusCode &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We could now load a collection of <code>HttpJobEndpointOptions</code> from the application settings but let’s try to organize the endpoints into categories and also give a name for each. This will be handy later to have a more readable job name when looking at the Hangfire dashboard.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpJobOptions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TimeSpan DefaultTimeout &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125; = TimeSpan.FromSeconds(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IReadOnlyDictionary&lt;</span><br><span class=\"line\">        <span class=\"built_in\">string</span>, </span><br><span class=\"line\">        IReadOnlyDictionary&lt;<span class=\"built_in\">string</span>, HttpJobEndpointOptions&gt;</span><br><span class=\"line\">    &gt; Endpoints &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>appsettings.json</code> file and configure an <code>IsAlive</code> job inside a <code>Core</code> category that’ll run every 5 minutes. This job will be used later for testing, so assume an HTTP request <code>GET /api/is-alive</code> to itself:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;HttpJobs&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;DefaultTimeout&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;00:00:05&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Endpoints&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;Core&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;IsAlive&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;Cron&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*/5 * * * *&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;Enabled&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;Address&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://localhost:7076/api/is-alive&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;Method&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;GET&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;Headers&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;accept&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application/json&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;Timeout&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;IgnoreInvalidStatusCode&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;Logging&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;LogLevel&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;Default&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Information&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;Microsoft.AspNetCore&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Warning&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;AllowedHosts&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;*&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>Program.cs</code> file and configure the <code>HttpJobOptions</code> from the <code>HttpJobs</code> section. Let’s also add the testing endpoint to be triggered later:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddHangfire(config =&gt; config</span><br><span class=\"line\">    .UseInMemoryStorage()</span><br><span class=\"line\">);</span><br><span class=\"line\">builder.Services.AddHangfireServer();</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.Configure&lt;HttpJobOptions&gt;(</span><br><span class=\"line\">    builder.Configuration.GetSection(<span class=\"string\">&quot;HttpJobs&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\">app.MapGet(<span class=\"string\">&quot;/api/is-alive&quot;</span>, () =&gt; <span class=\"string\">&quot;I&#x27;m alive!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.MapHangfireDashboard(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.Run();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HTTP-job-runner\"><a href=\"#HTTP-job-runner\" class=\"headerlink\" title=\"HTTP job runner\"></a>HTTP job runner</h2><p>Now that we have defined the job options, let’s create the class that will be recurrently executed by the Hangfire server.</p>\n<p>The core idea of this class is to be responsible to do a single HTTP request by receiving both the category and endpoint names as a parameter, looking up for the configuration in the <code>HttpJobOptions</code> instance and doing the expected HTTP request. It will also receive a <code>PerformContext</code> instance which is a special (but optional) class provided by Hangfire to give context to your methods.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpJobRunner</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    ILogger&lt;HttpJobRunner&gt; logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IOptionsMonitor&lt;HttpJobOptions&gt; options,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IHttpClientFactory clientFactory</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpJobOptions Options =&gt; options.CurrentValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">RunAsync</span>(<span class=\"params\"><span class=\"built_in\">string</span> category, <span class=\"built_in\">string</span> name, PerformContext ctx</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> _ = logger.BeginScope(</span><br><span class=\"line\">            <span class=\"string\">&quot;Category:&#123;Category&#125; Name:&#123;Name&#125; JobId:&#123;JobId&#125;&quot;</span>,</span><br><span class=\"line\">            category,</span><br><span class=\"line\">            name,</span><br><span class=\"line\">            ctx.BackgroundJob.Id</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!Options.Endpoints.TryGetValue(category, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> endpoints))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            logger.LogWarning(<span class=\"string\">&quot;Configuration for category not found&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!endpoints.TryGetValue(name, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> endpoint))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            logger.LogWarning(<span class=\"string\">&quot;Configuration for endpoint not found&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!endpoint.Enabled)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            logger.LogWarning(<span class=\"string\">&quot;Endpoint was disabled while still scheduled, nothing will be done&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> client = clientFactory.CreateClient(</span><br><span class=\"line\">            <span class=\"string\">$&quot;<span class=\"subst\">&#123;<span class=\"keyword\">nameof</span>(HttpJobRunner)&#125;</span>.<span class=\"subst\">&#123;category&#125;</span>.<span class=\"subst\">&#123;name&#125;</span>&quot;</span></span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        client.Timeout = endpoint.Timeout ?? Options.DefaultTimeout;</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.LogDebug(</span><br><span class=\"line\">            <span class=\"string\">&quot;Starting HTTP request &#x27;&#123;Method&#125; &#123;Address&#125;&#x27; [Timeout:&#123;Timeout&#125;]&quot;</span>,</span><br><span class=\"line\">            endpoint.Method,</span><br><span class=\"line\">            endpoint.Address,</span><br><span class=\"line\">            client.Timeout</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> request = <span class=\"keyword\">new</span> HttpRequestMessage(</span><br><span class=\"line\">            <span class=\"keyword\">new</span> HttpMethod(endpoint.Method),</span><br><span class=\"line\">            endpoint.Address</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (endpoint.Headers?.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> (key, <span class=\"keyword\">value</span>) <span class=\"keyword\">in</span> endpoint.Headers)</span><br><span class=\"line\">                request.Headers.Add(key, <span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> ct = ctx.CancellationToken.ShutdownToken;</span><br><span class=\"line\"></span><br><span class=\"line\">        HttpResponseMessage response;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            response = <span class=\"keyword\">await</span> client.SendAsync(request, ct);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (TaskCanceledException e) <span class=\"keyword\">when</span> (!ct.IsCancellationRequested)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> TimeoutException(<span class=\"string\">&quot;Request timed out&quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">using</span> (response)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            logger.LogInformation(</span><br><span class=\"line\">                <span class=\"string\">&quot;Completed HTTP request &#x27;&#123;Method&#125; &#123;Address&#125;&#x27; with status code &#123;StatusCode&#125;&quot;</span>,</span><br><span class=\"line\">                endpoint.Method,</span><br><span class=\"line\">                endpoint.Address,</span><br><span class=\"line\">                response.StatusCode</span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!endpoint.IgnoreInvalidStatusCode)</span><br><span class=\"line\">                response.EnsureSuccessStatusCode();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Register into the DI container the HTTP client services (because we are using the <code>IHttpClientFactory</code>) and also this class as transient.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddHangfire(config =&gt; config</span><br><span class=\"line\">    .UseInMemoryStorage()</span><br><span class=\"line\">);</span><br><span class=\"line\">builder.Services.AddHangfireServer();</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.Configure&lt;HttpJobOptions&gt;(</span><br><span class=\"line\">    builder.Configuration.GetSection(<span class=\"string\">&quot;HttpJobs&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddHttpClient();</span><br><span class=\"line\">builder.Services.AddTransient&lt;HttpJobRunner&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\">app.MapGet(<span class=\"string\">&quot;/api/is-alive&quot;</span>, () =&gt; <span class=\"string\">&quot;I&#x27;m alive!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.MapHangfireDashboard(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.Run();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HTTP-hosted-service\"><a href=\"#HTTP-hosted-service\" class=\"headerlink\" title=\"HTTP hosted service\"></a>HTTP hosted service</h2><p>It is time to let Hangfire know that we have endpoints that must be requested on a recurrent basis. </p>\n<p>To configure the class <code>HttpJobRunner</code> as a recurring job, we can use either the static method <code>RecurringJob.AddOrUpdate</code> or the equivalent methods provided by <code>IRecurringJobManager</code>.</p>\n<p>A manual registration of the <code>HTTP:Core:IsAlive</code> job we defined in the application settings would be as follows:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// using static class RecurringJob</span></span><br><span class=\"line\">RecurringJob.AddOrUpdate&lt;HttpJobRunner&gt;(</span><br><span class=\"line\">    <span class=\"string\">&quot;HTTP:Core:IsAlive&quot;</span>,</span><br><span class=\"line\">    runner =&gt; runner.RunAsync(<span class=\"string\">&quot;Core&quot;</span>, <span class=\"string\">&quot;IsAlive&quot;</span>, <span class=\"literal\">null</span>),</span><br><span class=\"line\">    <span class=\"string\">&quot;*/5 * * * *&quot;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> RecurringJobOptions</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        TimeZone = TimeZoneInfo.Utc</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// using IRecurringJobManager instance</span></span><br><span class=\"line\">jobManager.AddOrUpdate&lt;HttpJobRunner&gt;(</span><br><span class=\"line\">    <span class=\"string\">&quot;HTTP:Core:IsAlive&quot;</span>,</span><br><span class=\"line\">    runner =&gt; runner.RunAsync(<span class=\"string\">&quot;Core&quot;</span>, <span class=\"string\">&quot;IsAlive&quot;</span>, <span class=\"literal\">null</span>),</span><br><span class=\"line\">    <span class=\"string\">&quot;*/5 * * * *&quot;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> RecurringJobOptions</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        TimeZone = TimeZoneInfo.Utc</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we pass an expression to the <code>AddOrUpdate</code> method that will be used by Hangfire to build dynamic code to call the <code>RunAsync</code> method of our <code>HttpJobRunner</code> class, including the parameters we specify. As stated before, the <code>PerformContext</code> parameter is special and despite we are passing  null when defining the expression, Hangfire will actually create a context each time the method is run.</p>\n<p>With this simple yet effective approach, Hangfire doesn’t impose any interface or abstract class that must be implemented, making our life much easier.</p>\n<p>This registration could be done at application startup but since we want do detect changes to the application settings without restarting the server, let’s create a hosted service that will be running in the background and either add or remove scheduler jobs. As a note, since Hangfire doesn’t provide a way to get currently registered jobs so we can remove inexistent, we’ll register the hosted service as a singleton and have a collection in-memory to track registered job ids.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpJobHostedService</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    ILogger&lt;HttpJobHostedService&gt; logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IOptionsMonitor&lt;HttpJobOptions&gt; options,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IRecurringJobManager jobManager</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) : IHostedService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> HashSet&lt;<span class=\"built_in\">string</span>&gt; _jobIds = <span class=\"keyword\">new</span>();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> IDisposable _onOptionsChange;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">StartAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _onOptionsChange = options.OnChange(jobOptions =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            logger.LogDebug(<span class=\"string\">&quot;Configuration changed, scheduling jobs&quot;</span>);</span><br><span class=\"line\">            ScheduleJobs(jobOptions);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        logger.LogDebug(<span class=\"string\">&quot;Initial configuration, scheduling jobs&quot;</span>);</span><br><span class=\"line\">        ScheduleJobs(options.CurrentValue);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Task.CompletedTask;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">StopAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _onOptionsChange?.Dispose();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Task.CompletedTask;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ScheduleJobs</span>(<span class=\"params\">HttpJobOptions options</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> currentJobIds = <span class=\"keyword\">new</span> HashSet&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (options.Endpoints <span class=\"keyword\">is</span> &#123; Count: &gt; <span class=\"number\">0</span> &#125;)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> (category, endpoints) <span class=\"keyword\">in</span> options.Endpoints)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (endpoints <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> &#123; Count: &gt; <span class=\"number\">0</span> &#125;)</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> (name, endpoint) <span class=\"keyword\">in</span> endpoints)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!endpoint.Enabled)</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">var</span> jobId = <span class=\"string\">$&quot;HTTP:<span class=\"subst\">&#123;category&#125;</span>:<span class=\"subst\">&#123;name&#125;</span>&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    jobManager.AddOrUpdate&lt;HttpJobRunner&gt;(</span><br><span class=\"line\">                        jobId,</span><br><span class=\"line\">                        runner =&gt; runner.RunAsync(category, name, <span class=\"literal\">null</span>),</span><br><span class=\"line\">                        endpoint.Cron,</span><br><span class=\"line\">                        <span class=\"keyword\">new</span> RecurringJobOptions</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            TimeZone = TimeZoneInfo.Utc</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    );</span><br><span class=\"line\"></span><br><span class=\"line\">                    currentJobIds.Add(jobId);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        _jobIds.RemoveWhere(jobId =&gt; currentJobIds.Contains(jobId));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> jobId <span class=\"keyword\">in</span> _jobIds) </span><br><span class=\"line\">            jobManager.RemoveIfExists(jobId);</span><br><span class=\"line\"></span><br><span class=\"line\">        _jobIds.Clear();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> jobId <span class=\"keyword\">in</span> currentJobIds)</span><br><span class=\"line\">            _jobIds.Add(jobId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Register this class into the Dependency Injection container as a hosted service.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddHangfire(config =&gt; config</span><br><span class=\"line\">    .UseInMemoryStorage()</span><br><span class=\"line\">);</span><br><span class=\"line\">builder.Services.AddHangfireServer();</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.Configure&lt;HttpJobOptions&gt;(</span><br><span class=\"line\">    builder.Configuration.GetSection(<span class=\"string\">&quot;HttpJobs&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddHttpClient();</span><br><span class=\"line\">builder.Services.AddTransient&lt;HttpJobRunner&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddHostedService&lt;HttpJobHostedService&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\">app.MapGet(<span class=\"string\">&quot;/api/is-alive&quot;</span>, () =&gt; <span class=\"string\">&quot;I&#x27;m alive!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.MapHangfireDashboard(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.Run();</span><br></pre></td></tr></table></figure>\n\n<p>If you now run the application, the Hangfire dashboard will show the <code>HTTP:Core:IsAlive</code> recurring job to be run every 5 minutes.</p>\n<img src=\"/2024/02/29/NET-Hangfire/03_recurring_jobs_initial.png\" class=\"\">\n\n<p>Try to change the application settings while the application is running, like changing the <em>cron</em> expression, disabling, removing or creating jobs, so you can see the recurring job list to change accordingly.</p>\n<p>If you wait for the jobs to run (or manually trigger) and go to the <code>Jobs</code> tab, open the <code>Succeeded</code> status and you’ll see the list of all jobs that have run successfully.</p>\n<img src=\"/2024/02/29/NET-Hangfire/04_jobs_initial.png\" class=\"\">\n\n<p>If you open one of the jobs, you’ll see details about it’s execution, like the parameters that were passed, the execution time and, if it was failed, the exception details.</p>\n<img src=\"/2024/02/29/NET-Hangfire/05_jobs_detail_initial.png\" class=\"\">\n\n<h2 id=\"Job-filters\"><a href=\"#Job-filters\" class=\"headerlink\" title=\"Job filters\"></a>Job filters</h2><p>The code is looking nice and simple and seems to work very well but there’s still three problems that I think should be solved: </p>\n<ol>\n<li>If you have multiple HTTP endpoints you can’t tell just looking at the list which one was called without checking execution details. In this case every job is called <code>HttpJobRunner.RunAsync</code>, independently the endpoint;</li>\n<li>Since this is a recurring and stateless job so, when it fails, there’s no point in keeping it in the failed state to be retried, we can move it to the deleted stated that would be automatically housekept by Hangfire;</li>\n<li>If for some reason a job for a given endpoint takes more time to run than its <em>cron</em> interval, multiple executions will overlap and cause requests to happen concurrently, which may not be the expected behavior;</li>\n</ol>\n<p>To solve these problems we are going to use Hangfire filters, which are attributes that can be used to annotate methods (or registered globally) to add custom behavior when running a job, working similarly to ASP.NET Core MVC filters.</p>\n<p>We are going to use the <code>JobDisplayName</code> filter to define the job name in the dashboard, the <code>AutomaticRetry</code> filter to mark the job as deleted when failed, and create a custom filter than will lock job executions per endpoint until the previous one has completed.</p>\n<p>Starting by the custom filter, we must extend the <code>JobFilterAttribute</code> and because it’s changing the behavior of a job execution, it must also implement the <code>IServerFilter</code> interface. We are going to use both the category and endpoint name parameters to create a unique identifier per endpoint execution and use an Hangfire distributed lock feature to ensure a job for the same endpoint only runs after the lock is disposed by a previous execution.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EnableDistributedMutexAttribute</span> : <span class=\"title\">JobFilterAttribute</span>, <span class=\"title\">IServerFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> Key = <span class=\"keyword\">nameof</span>(EnableDistributedMutexAttribute);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> <span class=\"built_in\">string</span> _nameFormat;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> TimeSpan _timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EnableDistributedMutexAttribute</span>(<span class=\"params\"><span class=\"built_in\">string</span> nameFormat, <span class=\"built_in\">int</span> timeoutInSeconds</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ArgumentNullException.ThrowIfNull(nameFormat);</span><br><span class=\"line\">        ArgumentOutOfRangeException.ThrowIfLessThanOrEqual(timeoutInSeconds, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        _nameFormat = nameFormat;</span><br><span class=\"line\">        _timeout = TimeSpan.FromSeconds(timeoutInSeconds);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnPerforming</span>(<span class=\"params\">PerformingContext ctx</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> distributedLockName = <span class=\"built_in\">string</span>.Format(</span><br><span class=\"line\">            _nameFormat,</span><br><span class=\"line\">            ctx.BackgroundJob.Job.Args.ToArray()</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> distributedLock = ctx.Connection.AcquireDistributedLock(</span><br><span class=\"line\">            distributedLockName,</span><br><span class=\"line\">            _timeout</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.Items[Key] = distributedLock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">OnPerformed</span>(<span class=\"params\">PerformedContext ctx</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ctx.Items.TryGetValue(Key, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> distributedLock))</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">&quot;Can not release a distributed lock: it was not acquired.&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ((IDisposable)distributedLock).Dispose();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>HttpJobRunner</code> class and annotate the <code>RunAsync</code> method with a <code>JobDisplayName</code>, <code>EnableDistributedMutex</code> and <code>AutomaticRetry</code> attributes.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpJobRunner</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    ILogger&lt;HttpJobRunner&gt; logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IOptionsMonitor&lt;HttpJobOptions&gt; options,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IHttpClientFactory clientFactory</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HttpJobOptions Options =&gt; options.CurrentValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">JobDisplayName(<span class=\"string\">&quot;HTTP:&#123;0&#125;:&#123;1&#125;&quot;</span>)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">EnableDistributedMutex(<span class=\"string\">&quot;HTTP:&#123;0&#125;:&#123;1&#125;&quot;</span>, 15)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">AutomaticRetry(OnAttemptsExceeded = AttemptsExceededAction.Delete, Attempts = 0)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">RunAsync</span>(<span class=\"params\"><span class=\"built_in\">string</span> category, <span class=\"built_in\">string</span> name, PerformContext ctx</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you now run the application and wait or manually trigger the <code>HTTP:Core:IsAlive</code> job you’ll see the new display name in the dashboard.</p>\n<img src=\"/2024/02/29/NET-Hangfire/06_jobs_final.png\" class=\"\">\n\n<p>Feel free to also force some exceptions to see the job in the deleted state instead of failed, or delaying the job execution for more time than the defined <em>cron</em> interval to see jobs waiting for the previous ones to complete.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article I explained how easy it is to configure the Hangfire server to run recurring jobs in the background of an ASP.NET Core application, and use its dashboard to manage and monitor job executions.</p>\n<p>For simplicity we used the in-memory job storage and created the base architecture for jobs that recurrently trigger HTTP endpoints, everything configured using application settings.</p>\n<p>As a reminder, this example is <a href=\"https://github.com/gravity00/article-hangfire\">available on GitHub</a> so feel free to give it a look.</p>\n",
            "tags": [
                "dotnetcore",
                "aspnetcore",
                "csharp",
                "hangfire"
            ]
        },
        {
            "id": "https://code-corner.dev/2024/02/05/NET-%E2%80%94-LinkedList-vs-ToArray/",
            "url": "https://code-corner.dev/2024/02/05/NET-%E2%80%94-LinkedList-vs-ToArray/",
            "title": ".NET — LinkedList vs ToArray",
            "date_published": "2024-02-05T00:00:00.000Z",
            "content_html": "<p>Some weeks ago I created an <a href=\"/2023/11/09/NET-%E2%80%94-ToList-vs-ToArray/\" title=\".NET — ToList vs ToArray\">article comparing the performance of ToList versus ToArray</a> when creating short lived collections that won’t be mutated, usually used to prevent multiple enumerations when iterating over a temporary LINQ transformation or to ensure mapping exceptions will be thrown inside the corresponding application layer.</p>\n<p>In that article I concluded <code>ToArray</code> is faster and more memory efficient than <code>ToList</code> for almost any collection sizes and in any .NET version — tests were conducted on .NET Framework 4.8, .NET 7 and .NET 8.</p>\n<p><strong>But then I began to wonder:</strong> <em>If I’m creating a temporary collection of unknown size just to force enumeration, wouldn’t <code>LinkedList</code> be a more efficient collection since I’m only appending items to the end, which is O(1), instead of constantly allocating new arrays like <code>ToArray</code> does?</em></p>\n<p>I believe that’s a valid point so I decided to do a performance comparison between the two, assuming <code>ToArray</code> as the baseline and try to give a detailed explanation for the observed results.</p>\n<h1 id=\"Performance-test\"><a href=\"#Performance-test\" class=\"headerlink\" title=\"Performance test\"></a>Performance test</h1><p>The test consists in the creation of a collection that holds random integers, being the size defined by a parameter. To ensure the randomness does not affect the results, the values are cached into an array and, before invoking either <code>ToArray</code> or creating the <code>LinkedList</code>, they are converted into a new <code>IEnumerable</code>, not just a cast that could lead to internal optimizations.</p>\n<p>This time I decided to do the performance comparison only on .NET Framework 4.8 and .NET 8.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">SimpleJob(RuntimeMoniker.Net48)</span>]</span><br><span class=\"line\">[<span class=\"meta\">SimpleJob(RuntimeMoniker.Net80)</span>]</span><br><span class=\"line\">[<span class=\"meta\">MemoryDiagnoser</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LinkedListVsToArray</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Params(10, 100, 1000, 10000, 100000)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span>[] _items;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">GlobalSetup</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Setup</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> random = <span class=\"keyword\">new</span> Random(<span class=\"number\">123</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        _items = Enumerable.Range(<span class=\"number\">0</span>, Size).Select(_ =&gt; random.Next()).ToArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Benchmark(Baseline = true)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span>[] <span class=\"title\">ToArray</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> items = CreateItemsEnumerable();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> items.ToArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Benchmark</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LinkedList&lt;<span class=\"built_in\">int</span>&gt; <span class=\"title\">ToLinkedList</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> items = CreateItemsEnumerable();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LinkedList&lt;<span class=\"built_in\">int</span>&gt;(items);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> IEnumerable&lt;<span class=\"built_in\">int</span>&gt; <span class=\"title\">CreateItemsEnumerable</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> _items)</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Performance-results\"><a href=\"#Performance-results\" class=\"headerlink\" title=\"Performance results\"></a>Performance results</h1><p>Because we want to decide, for a given application, between <code>ToArray</code> or <code>LinkedList</code> based on performance, let’s analyze the results for each framework version.</p>\n<h2 id=\"NET-Framework-4-8\"><a href=\"#NET-Framework-4-8\" class=\"headerlink\" title=\".NET Framework 4.8\"></a>.NET Framework 4.8</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Method       | Size   | Mean           | Error        | StdDev       | Median         | Ratio | RatioSD | Gen0     | Gen1     | Gen2     | Allocated | Alloc Ratio |</span><br><span class=\"line\">|------------- |------- |---------------:|-------------:|-------------:|---------------:|------:|--------:|---------:|---------:|---------:|----------:|------------:|</span><br><span class=\"line\">| ToArray      | 10     |       143.4 ns |      2.82 ns |      2.64 ns |       143.5 ns |  1.00 |    0.00 |   0.0470 |        - |        - |     297 B |        1.00 |</span><br><span class=\"line\">| ToLinkedList | 10     |       175.4 ns |      1.57 ns |      1.39 ns |       175.6 ns |  1.23 |    0.02 |   0.0918 |        - |        - |     578 B |        1.95 |</span><br><span class=\"line\">| ToArray      | 100    |       891.6 ns |     17.68 ns |     27.00 ns |       883.8 ns |  1.00 |    0.00 |   0.2584 |        - |        - |    1629 B |        1.00 |</span><br><span class=\"line\">| ToLinkedList | 100    |     1,464.8 ns |     14.96 ns |     13.26 ns |     1,467.8 ns |  1.63 |    0.04 |   0.7801 |   0.0134 |        - |    4910 B |        3.01 |</span><br><span class=\"line\">| ToArray      | 1000   |     7,867.5 ns |    156.18 ns |    223.99 ns |     7,896.2 ns |  1.00 |    0.00 |   1.9836 |   0.0153 |        - |   12504 B |        1.00 |</span><br><span class=\"line\">| ToLinkedList | 1000   |    14,881.8 ns |    283.19 ns |    290.82 ns |    14,892.3 ns |  1.92 |    0.06 |   7.6599 |   1.0834 |        - |   48238 B |        3.86 |</span><br><span class=\"line\">| ToArray      | 10000  |    78,138.5 ns |  1,547.95 ns |  2,363.88 ns |    78,993.1 ns |  1.00 |    0.00 |  26.9775 |   5.3711 |        - |  171755 B |        1.00 |</span><br><span class=\"line\">| ToLinkedList | 10000  |   158,728.7 ns |  2,151.48 ns |  1,907.23 ns |   158,243.9 ns |  2.03 |    0.07 |  76.4160 |  12.4512 |        - |  481511 B |        2.80 |</span><br><span class=\"line\">| ToArray      | 100000 |   805,445.4 ns |  9,463.82 ns |  8,852.47 ns |   804,730.5 ns |  1.00 |    0.00 | 399.4141 | 399.4141 | 399.4141 | 1452144 B |        1.00 |</span><br><span class=\"line\">| ToLinkedList | 100000 | 3,632,195.6 ns | 49,765.42 ns | 46,550.60 ns | 3,633,088.3 ns |  4.51 |    0.08 | 757.8125 | 375.0000 |        - | 4814292 B |        3.32 |</span><br></pre></td></tr></table></figure>\n\n<p>The <code>ToArray</code> method is significantly faster and more memory efficient than creating a new <code>LinkedList</code>. Still, it does allocate more Gen2 memory for larger collections which may be something to consider.</p>\n<h2 id=\"NET-8\"><a href=\"#NET-8\" class=\"headerlink\" title=\".NET 8\"></a>.NET 8</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Method       | Size   | Mean           | Error        | StdDev       | Median         | Ratio | RatioSD | Gen0     | Gen1     | Gen2     | Allocated | Alloc Ratio |</span><br><span class=\"line\">|------------- |------- |---------------:|-------------:|-------------:|---------------:|------:|--------:|---------:|---------:|---------:|----------:|------------:|</span><br><span class=\"line\">| ToArray      | 10     |       108.8 ns |      2.14 ns |      2.99 ns |       109.0 ns |  1.00 |    0.00 |   0.0315 |        - |        - |     264 B |        1.00 |</span><br><span class=\"line\">| ToLinkedList | 10     |       125.7 ns |      2.57 ns |      7.25 ns |       125.9 ns |  1.13 |    0.06 |   0.0677 |        - |        - |     568 B |        2.15 |</span><br><span class=\"line\">| ToArray      | 100    |       433.3 ns |      7.93 ns |      7.03 ns |       434.0 ns |  1.00 |    0.00 |   0.1431 |        - |        - |    1200 B |        1.00 |</span><br><span class=\"line\">| ToLinkedList | 100    |       979.2 ns |     19.54 ns |     40.79 ns |       977.9 ns |  2.34 |    0.09 |   0.5836 |   0.0095 |        - |    4888 B |        4.07 |</span><br><span class=\"line\">| ToArray      | 1000   |     3,100.4 ns |     34.14 ns |     28.51 ns |     3,090.9 ns |  1.00 |    0.00 |   1.0185 |        - |        - |    8544 B |        1.00 |</span><br><span class=\"line\">| ToLinkedList | 1000   |     9,135.9 ns |    179.58 ns |    345.98 ns |     9,205.1 ns |  3.03 |    0.08 |   5.7373 |   0.8850 |        - |   48088 B |        5.63 |</span><br><span class=\"line\">| ToArray      | 10000  |    31,587.6 ns |    604.95 ns |  1,437.72 ns |    31,129.4 ns |  1.00 |    0.00 |  12.6343 |        - |        - |  106232 B |        1.00 |</span><br><span class=\"line\">| ToLinkedList | 10000  |   109,454.7 ns |  2,152.65 ns |  4,198.57 ns |   107,653.8 ns |  3.43 |    0.11 |  57.3730 |  32.9590 |        - |  480088 B |        4.52 |</span><br><span class=\"line\">| ToArray      | 100000 |   531,028.2 ns |  3,515.73 ns |  3,288.62 ns |   531,061.8 ns |  1.00 |    0.00 | 249.0234 | 249.0234 | 249.0234 |  925140 B |        1.00 |</span><br><span class=\"line\">| ToLinkedList | 100000 | 2,295,939.2 ns | 44,598.15 ns | 62,520.38 ns | 2,288,468.0 ns |  4.33 |    0.13 | 570.3125 | 535.1563 |        - | 4800090 B |        5.19 |</span><br></pre></td></tr></table></figure>\n\n<p>Same behavior as .NET Framework 4.8, being the <code>ToArray</code> method much faster and memory efficient while still allocating more Gen2 memory on larger collections.</p>\n<h1 id=\"NET-performance-evolution\"><a href=\"#NET-performance-evolution\" class=\"headerlink\" title=\".NET performance evolution\"></a>.NET performance evolution</h1><p>Since in my previous article I already covered the <a href=\"/2023/11/09/NET-%E2%80%94-ToList-vs-ToArray/\" title=\".NET — ToList vs ToArray\">performance evolution of ToArray over the years</a>, let’s just compare how initializing a <code>LinkedList</code> from an <code>IEnumerable</code> have changed for different frameworks.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Runtime            | Size   | Mean           | Error        | StdDev       | Median         | RatioSD | Gen0     | Gen1     | Gen2     | Allocated |</span><br><span class=\"line\">|------------------- |------- |---------------:|-------------:|-------------:|---------------:|--------:|---------:|---------:|---------:|----------:|</span><br><span class=\"line\">| .NET 8.0           | 10     |       125.7 ns |      2.57 ns |      7.25 ns |       125.9 ns |    0.06 |   0.0677 |        - |        - |     568 B |</span><br><span class=\"line\">| .NET Framework 4.8 | 10     |       175.4 ns |      1.57 ns |      1.39 ns |       175.6 ns |    0.02 |   0.0918 |        - |        - |     578 B |</span><br><span class=\"line\">| .NET 8.0           | 100    |       979.2 ns |     19.54 ns |     40.79 ns |       977.9 ns |    0.09 |   0.5836 |   0.0095 |        - |    4888 B |</span><br><span class=\"line\">| .NET Framework 4.8 | 100    |     1,464.8 ns |     14.96 ns |     13.26 ns |     1,467.8 ns |    0.04 |   0.7801 |   0.0134 |        - |    4910 B |</span><br><span class=\"line\">| .NET 8.0           | 1000   |     9,135.9 ns |    179.58 ns |    345.98 ns |     9,205.1 ns |    0.08 |   5.7373 |   0.8850 |        - |   48088 B |</span><br><span class=\"line\">| .NET Framework 4.8 | 1000   |    14,881.8 ns |    283.19 ns |    290.82 ns |    14,892.3 ns |    0.06 |   7.6599 |   1.0834 |        - |   48238 B |</span><br><span class=\"line\">| .NET 8.0           | 10000  |   109,454.7 ns |  2,152.65 ns |  4,198.57 ns |   107,653.8 ns |    0.11 |  57.3730 |  32.9590 |        - |  480088 B |</span><br><span class=\"line\">| .NET Framework 4.8 | 10000  |   158,728.7 ns |  2,151.48 ns |  1,907.23 ns |   158,243.9 ns |    0.07 |  76.4160 |  12.4512 |        - |  481511 B |</span><br><span class=\"line\">| .NET 8.0           | 100000 | 2,295,939.2 ns | 44,598.15 ns | 62,520.38 ns | 2,288,468.0 ns |    0.13 | 570.3125 | 535.1563 |        - | 4800090 B |</span><br><span class=\"line\">| .NET Framework 4.8 | 100000 | 3,632,195.6 ns | 49,765.42 ns | 46,550.60 ns | 3,633,088.3 ns |    0.08 | 757.8125 | 375.0000 |        - | 4814292 B |</span><br></pre></td></tr></table></figure>\n\n<p>On average, .NET 8 is 51% faster than .NET Framework 4.8, a clear demonstration how performance has improved over the years.</p>\n<h1 id=\"Analyzing-the-results\"><a href=\"#Analyzing-the-results\" class=\"headerlink\" title=\"Analyzing the results\"></a>Analyzing the results</h1><p>Now that we have the results you are probably questioning why does a <code>LinkedList</code> use more memory and is slower than <code>ToArray</code>? Since we don’t know the collection size, shouldn’t the constant allocation of new arrays and then a final copy to a trimmed one be slower and take more memory?</p>\n<p>Using more memory could actually be expectable since a <code>LinkedList</code>, for each item, creates a class that holds a reference for the previous and next node, but why is it slower since adding an item is always a O(1) operation?</p>\n<p>Based on personal experience, most developers I questioned about the <code>ToArray</code> implementation assume the following code (<a href=\"https://stackoverflow.com/a/16323412/1841558\">I actually believe this Stack Overflow response is to blame</a>):</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> T[] <span class=\"title\">ToArray</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">IEnumerable&lt;T&gt; items</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">int</span> sizeIncrease = <span class=\"number\">8</span>; <span class=\"comment\">// some arbitrary size increase</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> current = <span class=\"keyword\">new</span> T[sizeIncrease];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> items)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == current.Length)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> previous = current;</span><br><span class=\"line\">            current = <span class=\"keyword\">new</span> T[previous.Length + sizeIncrease];</span><br><span class=\"line\">            previous.CopyTo(current, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        current[count++] = item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count <span class=\"keyword\">is</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Array.Empty&lt;T&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    Array.Resize(<span class=\"keyword\">ref</span> current, count);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It assumes the <code>ToArray</code> method behaves similar to a <code>List</code>, creating a bigger one every time the current is full and doing a copy, and in the end it trims the excess.</p>\n<p>In reality, the implementation is more similar to this:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> T[] <span class=\"title\">ToArray</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">IEnumerable&lt;T&gt; items</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">int</span> sizeIncrease = <span class=\"number\">8</span>; <span class=\"comment\">// some arbitrary size increase</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arrayBuffer = <span class=\"keyword\">new</span> Queue&lt;T[]&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> current = <span class=\"keyword\">new</span> T[sizeIncrease];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> idx = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> items)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (idx == sizeIncrease)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            arrayBuffer.Enqueue(current);</span><br><span class=\"line\">            current = <span class=\"keyword\">new</span> T[sizeIncrease];</span><br><span class=\"line\">            idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        current[idx++] = item;</span><br><span class=\"line\">        ++count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count <span class=\"keyword\">is</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Array.Empty&lt;T&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentIdx = idx;</span><br><span class=\"line\"></span><br><span class=\"line\">    idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> final = <span class=\"keyword\">new</span> T[count];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (arrayBuffer.Count &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> previous = arrayBuffer.Dequeue();</span><br><span class=\"line\">        previous.CopyTo(final, idx);</span><br><span class=\"line\">        idx += previous.Length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Array.Copy(current, <span class=\"number\">0</span>, final, idx, currentIdx);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> final;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Instead of creating a bigger array every time it’s full and copying all items, it actually creates a buffer that stores the previously allocated arrays and when the iteration finishes it copies everything in sequence to the final array that has the expected size.</p>\n<p>The actual <code>ToArray</code> method implementation as a lot of optimizations, for example, when an <code>ICollection</code> is received they can initialize a new array with the collection size and just call <code>CopyTo</code>. It also doesn’t use a <code>Queue</code> to keep track of previous initialized arrays but instead a simple version of a <code>LinkedList</code> concept.</p>\n<p>Give a look to the internal classes <a href=\"https://github.com/dotnet/runtime/blob/main/src/libraries/Common/src/System/Collections/Generic/EnumerableHelpers.cs\">EnumerableHelpers</a> and <a href=\"https://github.com/dotnet/runtime/blob/main/src/libraries/Common/src/System/Collections/Generic/ArrayBuilder.cs\">ArrayBuilder</a> for more implementation details.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article we compared the performance of initializing a <code>LinkedList</code> versus using <code>ToArray</code> and concluded that, on theory, <code>LinkedList</code> looked like a good fit when creating short lived collections were enumeration must be forced because of its O(1) nature when appending values, but due to internal optimizations of <code>ToArray</code> and since indexing is just faster while using less memory it significantly compensates having to allocate multiple arrays and copying their content.</p>\n<p>Keep in mind that <code>LinkedList</code> still has its place, specially when storing collections too big to be stored into a single memory section and it’s nice to see that .NET keeps improving its performance.</p>\n",
            "tags": [
                "dotnetcore",
                "csharp",
                "dotnet",
                "linq"
            ]
        },
        {
            "id": "https://code-corner.dev/2024/01/19/NET-%E2%80%94-TaskCompletionSource-and-CancellationTokenSource/",
            "url": "https://code-corner.dev/2024/01/19/NET-%E2%80%94-TaskCompletionSource-and-CancellationTokenSource/",
            "title": ".NET — TaskCompletionSource and CancellationTokenSource",
            "date_published": "2024-01-19T00:00:00.000Z",
            "content_html": "<p>When Microsoft released .NET Framework 4.0 in April 2010, the <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/parallel-programming/task-parallel-library-tpl\">Task Parallel Library (TPL)</a> was introduced to help developers replace the previously used <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm\">Asynchronous Programming Model (APM)</a> pattern for a <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/parallel-programming/task-based-asynchronous-programming\">Task-based asynchronous programming</a>.</p>\n<p>Before the introduction of Tasks, when implementing asynchronous code, developers had to define two variations of the same method: one to begin the operation execution (convention: <code>BeginOperationName</code>), that would receive an optional callback to be invoked when completed, and another to wait for the operation to complete (convention: <code>EndOperationName</code>) and get the result or an exception, usually used inside the callback to prevent the main thread to be blocked.</p>\n<hr>\n<p>As an example, imagine a repository of cars with an asynchronous method for getting one by a given plate number, implemented using the APM pattern:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICarRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">IAsyncResult <span class=\"title\">BeginGetByPlateNumber</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> plateNumber,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        AsyncCallback callback,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">object</span> state</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Car <span class=\"title\">EndGetByPlateNumber</span>(<span class=\"params\">IAsyncResult ar</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// non-blocking usage</span></span><br><span class=\"line\">carRepository.BeginGetByPlateNumber(plateNumber, ar =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> car = carRepository.EndGetByPlateNumber(ar);</span><br><span class=\"line\">&#125;, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// blocking usage</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ar = carRepository.BeginGetByPlateNumber(plateNumber, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> car = carRepository.EndGetByPlateNumber(ar);</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, creating two methods per operation is one of the most obvious and annoying disadvantages of the APM pattern, while the other is the need to implement your own wrapper for <code>IAsyncResult</code> so you can trigger the <code>WaitHandle</code> and invoke the callbacks when the operation completes.</p>\n<p>Another disadvantage was the cancellation of running operations. If it was supported — and that’s a big if — there wasn’t a standardized pattern for developers to follow. Some would create another method for canceling (i.e. <code>CancelOperationName</code>) that receives an <code>IAsyncResult</code>, others would provide a method directly into the <code>IAsyncResult</code> and either return their own interface or require a cast, and others would simply ignore this feature due to sheer complexity.</p>\n<p>Because Microsoft knew asynchronous programming was very important for the future of .NET, it decided to solve these problems by introducing the Task Parallel Library, making it easier for developers to add parallelism and concurrency to applications.</p>\n<p>The Task Parallel Library has two central pieces:</p>\n<ul>\n<li>The <code>CancellationToken</code> is a structure commonly used in asynchronous methods and enables developers to register a callback that will be invoked if a cancellation is requested. This provides a standardized approach for implementing asynchronous operations that can be canceled mid execution by simply receiving a <code>CancellationToken</code> as a method parameter.</li>\n<li>The <code>Task</code> and <code>Task&lt;T&gt;</code> are classes that merge both <code>IAsyncResult</code> and <code>AsyncCallback</code> concepts. Developers can return a Task and the caller would either register a callback with <code>ContinueWith</code>, for a non-blocking approach, or use the method <code>Wait/Result</code> and block the main thread until the <code>Task</code> was completed. This removes the need to have callback parameters and only a single method is needed instead of <code>BeginX/EndX</code> methods.<br>If we change the previous car repository example from APM pattern to use TPL, it would be much simpler:</li>\n</ul>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICarRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">Task&lt;Car&gt; <span class=\"title\">GetByPlateNumberAsync</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> plateNumber,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// non-blocking usage</span></span><br><span class=\"line\">carRepository.GetByPlateNumberAsync(</span><br><span class=\"line\">    plateNumber,</span><br><span class=\"line\">    CancellationToken.None</span><br><span class=\"line\">).ContinueWith(t =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> car = t.Result;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// blocking usage</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> car = carRepository.GetByPlateNumberAsync(</span><br><span class=\"line\">    plateNumber,</span><br><span class=\"line\">    CancellationToken.None</span><br><span class=\"line\">).Result;</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have an idea about <code>Task</code>, <code>Task&lt;T&gt;</code>, <code>CancellationToken</code> and some of the reasons why Microsoft created the Task Parallel Library, let’s analyze two other important classes that aren’t commonly used but make all of this possible — <code>TaskCompletionSource</code> and <code>CancellationTokenSource</code>.</p>\n<h1 id=\"TaskCompletionSource\"><a href=\"#TaskCompletionSource\" class=\"headerlink\" title=\"TaskCompletionSource\"></a>TaskCompletionSource</h1><p>The class <code>TaskCompletionSource</code> is used to create a <code>Task</code> and provides methods to mark it as completed in one from three possible states:</p>\n<ul>\n<li><strong>RanToCompletion</strong> — the methods <code>SetResult</code> or <code>TrySetResult</code> complete the task successfully and, in case of a <code>Task&lt;T&gt;</code>, the result can be retrieved;</li>\n<li><strong>Canceled</strong> — the methods <code>SetCanceled</code> or <code>TrySetCanceled</code> mark the task as cancelled mid-execution. Waiting or retrieving the result will throw a <code>TaskCanceledException</code>;</li>\n<li><strong>Faulted</strong> — the methods <code>SetException</code> or <code>TrySetException</code> mark the task as faulted and waiting or retrieving the result will throw the exception.</li>\n</ul>\n<p>With this class developers can easily implement Task-based asynchronous programming. On later versions of the .NET Framework it was widely used to convert classes implementing the APM pattern and, with an increase adoption of tasks, developers also started to migrate their own libs.</p>\n<p>Let’s imagine the car repository was still implemented using the APM pattern and we wanted to create some extension methods for developers that prefer to use tasks.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICarRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">IAsyncResult <span class=\"title\">BeginGetByPlateNumber</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> plateNumber,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        AsyncCallback callback,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">object</span> state</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Car <span class=\"title\">EndGetByPlateNumber</span>(<span class=\"params\">IAsyncResult ar</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">CarRepositoryExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Task&lt;Car&gt; <span class=\"title\">GetByPlateNumberAsync</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> ICarRepository repository,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> plateNumber</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tcs = <span class=\"keyword\">new</span> TaskCompletionSource&lt;Car&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// use callback for non-blocking approach</span></span><br><span class=\"line\">        repository.BeginGetByPlateNumber(plateNumber, ar =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> car = repository.EndGetByPlateNumber(ar);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// no exception thrown, mark the task as completed successfully</span></span><br><span class=\"line\">                tcs.SetResult(car);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// exception thrown, mark the task as faulted</span></span><br><span class=\"line\">                tcs.SetException(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tcs.Task;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we just converted <code>BeginX/EndX</code> methods to tasks in just a few lines without blocking the caller thread.</p>\n<p>The <code>TaskCompletionSource</code> is also perfect to convert <strong>Event-based Asynchronous Pattern (EAP)</strong>. Imagine you have a class that represents a message queue and it provides two events — <code>OnMessageReceived</code> and <code>OnErrorReceived</code> — and a non-blocking method to send a message.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IMessageQueue</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">event</span> Action&lt;<span class=\"built_in\">object</span>, OnMessageReceivedEventArgs&gt; OnMessageReceived;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">event</span> Action&lt;<span class=\"built_in\">object</span>, OnErrorReceivedEventArgs&gt; OnErrorReceived;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Send</span>(<span class=\"params\">Guid correlationId, JObject content</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnMessageReceivedEventArgs</span> : <span class=\"title\">EventArgs</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid CorrelationId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JObject Content &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnErrorReceivedEventArgs</span> : <span class=\"title\">EventArgs</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid CorrelationId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Exception Exception &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Let’s say we wanted to create an extension method that sends a message and, without blocking the current thread, waits for a correlated response or exception to be received.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">MessageQueueExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;JObject&gt; <span class=\"title\">SendAsync</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> IMessageQueue queue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        Guid correlationId,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        JObject content</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tcs = <span class=\"keyword\">new</span> TaskCompletionSource&lt;JObject&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// register the events before sending the message</span></span><br><span class=\"line\">        queue.OnMessageReceived += OnMessageReceived;</span><br><span class=\"line\">        queue.OnErrorReceived += OnErrorReceived;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            queue.Send(correlationId, content);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> tcs.Task;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ensure events registration is always cleaned up</span></span><br><span class=\"line\">            queue.OnMessageReceived -= OnMessageReceived;</span><br><span class=\"line\">            queue.OnErrorReceived -= OnErrorReceived;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnMessageReceived</span>(<span class=\"params\"><span class=\"built_in\">object</span> _, OnMessageReceivedEventArgs args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (args.CorrelationId == correlationId) </span><br><span class=\"line\">                tcs.TrySetResult(args.Content);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnErrorReceived</span>(<span class=\"params\"><span class=\"built_in\">object</span> _, OnErrorReceivedEventArgs args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (args.CorrelationId == correlationId) </span><br><span class=\"line\">                tcs.TrySetException(args.Exception);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The approach is very similar to the APM pattern. We do a temporary registration into the relevant events, then invoke the action that can trigger those events and change the task state when callbacks are invoked. Just be sure registrations are properly cleaned up or else a memory leak will happen.</p>\n<h1 id=\"CancellationTokenSource\"><a href=\"#CancellationTokenSource\" class=\"headerlink\" title=\"CancellationTokenSource\"></a>CancellationTokenSource</h1><p>The class <code>CancellationTokenSource</code> is used to create a <code>CancellationToken</code> that can be manually marked as canceled using the method <code>Cancel</code> or, to support timeout implementations, the <code>CancelAfter</code> methods that will schedule a cancellation after the specified time as passed.</p>\n<p>Using the previously defined <code>GetByPlateNumberAsync</code> extension method, let’s change it first to support cancellation using a <code>CancellationToken</code>. Please note that some performance improvements could be made when detecting for cancellation, but this implementation is for simplicity:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">CarRepositoryExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;Car&gt; <span class=\"title\">GetByPlateNumberAsync</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> ICarRepository repository,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> plateNumber,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tcs = <span class=\"keyword\">new</span> TaskCompletionSource&lt;Car&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> _ = ct.Register(() =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// if the cancellation is triggered we try to cancel the task</span></span><br><span class=\"line\">            tcs.TrySetCanceled(ct);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// use callback for non-blocking approach</span></span><br><span class=\"line\">        repository.BeginGetByPlateNumber(plateNumber, ar =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> car = repository.EndGetByPlateNumber(ar);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// because the task may have been cancelled first we</span></span><br><span class=\"line\">                <span class=\"comment\">// must try to set a result or an exception will be thrown</span></span><br><span class=\"line\">                tcs.TrySetResult(car);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// same, task may have been cancelled first so we try</span></span><br><span class=\"line\">                <span class=\"comment\">// to set an exception and mark it as faulted</span></span><br><span class=\"line\">                tcs.TrySetException(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> tcs.Task;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now that <code>GetByPlateNumberAsync</code> supports cancellation, if we wanted to limit the waiting for a response to a maximum of 5 seconds, a <code>CancellationTokenSource</code> could be used:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> cts = <span class=\"keyword\">new</span> CancellationTokenSource();</span><br><span class=\"line\">cts.CancelAfter(TimeSpan.FromSeconds(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ct = cts.Token;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// if this operation takes more than 5 seconds to run</span></span><br><span class=\"line\"><span class=\"comment\">// a TaskCanceledException will be thrown</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> carRepository.GetByPlateNumberAsync(plateNumber, ct);</span><br></pre></td></tr></table></figure>\n\n<p>The <code>CancellationTokenSource</code> also supports to be linked to an existing <code>CancellationToken</code> meaning that the underlying token can either be cancelled manually or by the linked token. This is usually useful to implement methods that offer some kind of timeout parameter without the caller having to use a <code>CancellationTokenSource</code> directly.</p>\n<p>Let’s change the previously defined <code>SendAsync</code> extension method to support both cancellation using a token or a timeout parameter that will throw a <code>TimeoutException</code> if the waiting time is exceeded:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">MessageQueueExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;JObject&gt; <span class=\"title\">SendAsync</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> IMessageQueue queue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        Guid correlationId,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        JObject content,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TimeSpan timeout,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tcs = <span class=\"keyword\">new</span> TaskCompletionSource&lt;JObject&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> cts = CancellationTokenSource.CreateLinkedTokenSource(ct);</span><br><span class=\"line\">        cts.CancelAfter(timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> _ = cts.Token.Register(() =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ct.IsCancellationRequested)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// if ct was cancelled we want to throw a TaskCanceledException</span></span><br><span class=\"line\">                tcs.TrySetCanceled(ct);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// if ct wasn&#x27;t cancelled but the cts token was triggered</span></span><br><span class=\"line\">            <span class=\"comment\">// it can only mean the timeout parameter was exceeded</span></span><br><span class=\"line\">            tcs.TrySetException(<span class=\"keyword\">new</span> TimeoutException(</span><br><span class=\"line\">                <span class=\"string\">$&quot;The queue took more than &#x27;<span class=\"subst\">&#123;timeout&#125;</span>&#x27; to return a message&quot;</span></span><br><span class=\"line\">            ));</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        queue.OnMessageReceived += OnMessageReceived;</span><br><span class=\"line\">        queue.OnErrorReceived += OnErrorReceived;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            queue.Send(correlationId, content);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> tcs.Task;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            queue.OnMessageReceived -= OnMessageReceived;</span><br><span class=\"line\">            queue.OnErrorReceived -= OnErrorReceived;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnMessageReceived</span>(<span class=\"params\"><span class=\"built_in\">object</span> _, OnMessageReceivedEventArgs args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (args.CorrelationId == correlationId) </span><br><span class=\"line\">                tcs.TrySetResult(args.Content);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnErrorReceived</span>(<span class=\"params\"><span class=\"built_in\">object</span> _, OnErrorReceivedEventArgs args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (args.CorrelationId == correlationId) </span><br><span class=\"line\">                tcs.TrySetException(args.Exception);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In this case, we now use the method <code>CreateLinkedTokenSource</code> to ensure the <code>CancellationTokenSource</code> token will be cancelled if the <code>ct</code> parameter is cancelled or if a given timeout has passed. Because we are listening for the linked <code>cts</code> token, inside the callback we must check if the <code>ct</code> parameter was the cause of cancellation so we can either mark the task as canceled or faulted with a <code>TimeoutException</code>.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article I explained some of the reasons why Microsoft decided to replace the <strong>Asynchronous Programming Model (APM)</strong> pattern for the <strong>Task-based Asynchronous Programming</strong>, which is possible by using classes from the <strong>Task Parallel Library (TPL)</strong>.</p>\n<p>I also demonstrated how the classes <code>TaskCompletionSource</code> and <code>CancellationTokenSource</code> could be used to convert any asynchronous implementation to tasks, even if based on <strong>Event-based Asynchronous Pattern (EAP)</strong>, ensuring threads won’t be blocked waiting for responses and even supporting the cancellation of running operations.</p>\n",
            "tags": [
                "dotnetcore",
                "csharp",
                "dotnet"
            ]
        },
        {
            "id": "https://code-corner.dev/2024/01/08/Dispose-pattern-in-NET/",
            "url": "https://code-corner.dev/2024/01/08/Dispose-pattern-in-NET/",
            "title": "Dispose pattern in .NET",
            "date_published": "2024-01-08T00:00:00.000Z",
            "content_html": "<p>When working with .NET, you’ll often hear about the <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/\">garbage collector</a> and how it manages the allocation and release the application’s memory from the managed heap, making our life easier.</p>\n<p>This is true for the majority of objects but sometimes we have to work with unmanaged resources — files, network or database connections — that we must explicitly release since the garbage collector doesn’t know how to do the cleanup for us, despite being able to track the object that encapsulates the unmanaged resource.</p>\n<p>To help preventing memory leaks, .NET provides a simple and standard way to cleanup unmanaged resources called <strong>dispose pattern</strong>, which consists in implementing the <code>IDisposable</code> interface and calling Dispose method when resources aren’t needed, which is usually done via the <code>using</code> keyword.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> file = File.OpenText(filePath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fileContent = file.ReadToEnd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// equivalent code</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> file = File.OpenText(filePath)</span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fileContent = file.ReadToEnd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    file.Dispose();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>When .NET Core 3.0 was released, Microsoft introduced the interface <code>IAsyncDisposable</code> to allow for asynchronous cleanup operations by calling the <code>DisposeAsync</code> method, usually done with <code>await using</code> keywords.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> SomeAsyncDisposableClass())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do stuff</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// equivalent code</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> SomeAsyncDisposableClass();</span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do stuff</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> x.DisposeAsync();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If a class implements <code>IAsyncDisposable</code> it’s usually a good practice to also implement <code>IDisposable</code> despite not being a requirement. Not all code runs asynchronously, so this ensures the class is ready for both scenarios.</p>\n<p>In this article I’m going to demonstrate and explain step by step how to properly implement the <strong>dispose pattern</strong> using both <code>IDisposable</code> and <code>IAsyncDisposable</code> interfaces.</p>\n<h1 id=\"Example-scenario\"><a href=\"#Example-scenario\" class=\"headerlink\" title=\"Example scenario\"></a>Example scenario</h1><p>To use as an example, we are going to implement a class that wraps SQL Server connections and uses Dapper to simplify mappings and every time someone queries the database it will write the SQL instruction to the log. This provides a simple example of a class that holds both managed and unmanaged resources that can also be disposed asynchronously — SQL Server network connection.</p>\n<p>The class without any disposable implementations:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerQueryRunner</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ILogger&lt;SqlServerQueryRunner&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlConnection _connection;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SqlServerQueryRunner</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        ILogger&lt;SqlServerQueryRunner&gt; logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> connectionString</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ArgumentNullException.ThrowIfNull(logger);</span><br><span class=\"line\">        ArgumentNullException.ThrowIfNull(connectionString);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">        _connection = <span class=\"keyword\">new</span> SqlConnection(connectionString);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"title\">ValueTask</span>&lt;<span class=\"title\">IEnumerable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"title\">QueryAsync</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">CancellationToken ct, <span class=\"built_in\">string</span> sql, <span class=\"built_in\">object</span> parameters = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Querying database: &#123;Sql&#125;&quot;</span>, sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// using Dapper for simplicity</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _connection.QueryAsync&lt;T&gt;(<span class=\"keyword\">new</span> CommandDefinition(</span><br><span class=\"line\">            sql,</span><br><span class=\"line\">            parameters,</span><br><span class=\"line\">            cancellationToken: ct</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, this class receives a connection string and creates a SQL Server connection. Because this class is the owner of the <code>SqlConnection</code> instance, it must dispose it or else resources won’t be released.</p>\n<h1 id=\"IDisposable-interface\"><a href=\"#IDisposable-interface\" class=\"headerlink\" title=\"IDisposable interface\"></a>IDisposable interface</h1><p>Implement the <code>IDisposable</code> interface by disposing unmanaged resources inside the <code>Dispose</code> method, in this case the SQL Server connection:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerQueryRunner</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ILogger&lt;SqlServerQueryRunner&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlConnection _connection;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _connection.Dispose();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This code looks good and will work as expected, but there are some scenarios to consider:</p>\n<ol>\n<li><strong>Will the class be sealed?</strong> If not, we must provide a way for extenders to cleanup their unmanaged resources, if any;</li>\n<li><strong>Do I want to a safeguard from forgetting to dispose?</strong> If yes, we must implement a class finalizer that will try to cleanup resources when garbage collected;</li>\n</ol>\n<p>Both scenarios are solved by creating a virtual Dispose method, to be overridden by extenders, that receives a flag to indicate if it’s being called from a dispose or finalizer.</p>\n<p>This usually means resources are explicitly disposed only when disposing, otherwise references are cleared and we assume unmanaged resources also have finalizers.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerQueryRunner</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ILogger&lt;SqlServerQueryRunner&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlConnection _connection;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ~SqlServerQueryRunner() =&gt; Dispose(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Dispose(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"><span class=\"built_in\">bool</span> disposing</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (disposing)</span><br><span class=\"line\">            _connection?.Dispose();</span><br><span class=\"line\"></span><br><span class=\"line\">        _connection = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        _logger = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You now may be asking: <em>But if we have finalizers that will be triggered when the class is garbage collected, why implement <code>IDisposable</code>?</em></p>\n<p>That’s a fair question with a simple answer: <strong>You want garbage collection to be as fast as possible because it is a synchronous operation that stops all processes while it’s running.</strong></p>\n<p><strong>This also means unmanaged resources wouldn’t be released until garbage collection happened, which may take some time</strong> — imagine a reference to a file that you didn’t need but the process would still be locking it, now you want to open it again but can’t, because the garbage collector haven’t run yet.</p>\n<p>If you look at the <code>Dispose</code> method, you’ll realize there’s a call to <code>GC.SuppressFinalize</code>, which is a method that actually tells the garbage collector: <em>look, this class has a finalizer but you can ignore it because it is irrelevant, the developer already released resources using the dispose pattern.</em></p>\n<h1 id=\"IAsyncDisposable-interface\"><a href=\"#IAsyncDisposable-interface\" class=\"headerlink\" title=\"IAsyncDisposable interface\"></a>IAsyncDisposable interface</h1><p>Implementing the <code>IAsyncDisposable</code> interface is very similar to <code>IDisposable</code> with a small difference, we call <code>Dispose(false)</code> inside the method <code>DisposeAsync</code> to keep functional equivalence with the synchronous dispose pattern and further ensuring that finalizer code paths are still invoked. There’s no need to dispose resources synchronously if they were already disposed asynchronously.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerQueryRunner</span> : <span class=\"title\">IDisposable</span>, <span class=\"title\">IAsyncDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ILogger&lt;SqlServerQueryRunner&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlConnection _connection;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> ValueTask <span class=\"title\">DisposeAsync</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> DisposeAsyncCore().ConfigureAwait(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Dispose(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">async</span> ValueTask <span class=\"title\">DisposeAsyncCore</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_connection <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _connection.DisposeAsync().ConfigureAwait(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As a small note, if the class was sealed, the method <code>DisposeAsyncCore</code> wouldn’t be needed and all code could be inside the <code>DisposeAsync</code> method.</p>\n<h1 id=\"ObjectDisposedException\"><a href=\"#ObjectDisposedException\" class=\"headerlink\" title=\"ObjectDisposedException\"></a>ObjectDisposedException</h1><p>When implementing a disposable class it’s also a good practice to throw an <code>ObjectDisposedException</code> when it’s been disposed but some code is still trying to use it.</p>\n<p>This usually is as simple as creating a flag to be set by the <code>Dispose(bool)</code> method and checking for it on all methods that may apply.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerQueryRunner</span> : <span class=\"title\">IDisposable</span>, <span class=\"title\">IAsyncDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ILogger&lt;SqlServerQueryRunner&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlConnection _connection;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> _disposed;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"><span class=\"built_in\">bool</span> disposing</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_disposed)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (disposing)</span><br><span class=\"line\">            _connection?.Dispose();</span><br><span class=\"line\"></span><br><span class=\"line\">        _connection = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        _logger = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        _disposed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"title\">ValueTask</span>&lt;<span class=\"title\">IEnumerable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"title\">QueryAsync</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">CancellationToken ct, <span class=\"built_in\">string</span> sql, <span class=\"built_in\">object</span> parameters = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ObjectDisposedException.ThrowIf(_disposed, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Querying database: &#123;Sql&#125;&quot;</span>, sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// using Dapper for simplicity</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _connection.QueryAsync&lt;T&gt;(<span class=\"keyword\">new</span> CommandDefinition(</span><br><span class=\"line\">            sql,</span><br><span class=\"line\">            parameters,</span><br><span class=\"line\">            cancellationToken: ct</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article I explained the <strong>dispose pattern</strong> in .NET, which is used to cleanup and release unmanaged resources from memory, either synchronously by implementing the <code>IDisposable</code> interface, or asynchronously with <code>IAsyncDisposable</code>.</p>\n<p>For the example we used a simple wrapper for <code>SqlConnection</code> that holds references to both unmanaged and managed resources, making sure both were properly cleared and an <code>ObjectDisposedException</code> was thrown if the class was used after being disposed.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerQueryRunner</span> : <span class=\"title\">IDisposable</span>, <span class=\"title\">IAsyncDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ILogger&lt;SqlServerQueryRunner&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlConnection _connection;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> _disposed;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SqlServerQueryRunner</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        ILogger&lt;SqlServerQueryRunner&gt; logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> connectionString</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ArgumentNullException.ThrowIfNull(logger);</span><br><span class=\"line\">        ArgumentNullException.ThrowIfNull(connectionString);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">        _connection = <span class=\"keyword\">new</span> SqlConnection(connectionString);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">region</span> IDisposable</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ~SqlServerQueryRunner() =&gt; Dispose(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Dispose(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"><span class=\"built_in\">bool</span> disposing</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_disposed)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (disposing)</span><br><span class=\"line\">            _connection?.Dispose();</span><br><span class=\"line\"></span><br><span class=\"line\">        _connection = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        _logger = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        _disposed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">region</span> IAsyncDisposable</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> ValueTask <span class=\"title\">DisposeAsync</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> DisposeAsyncCore().ConfigureAwait(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Dispose(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">async</span> ValueTask <span class=\"title\">DisposeAsyncCore</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_disposed)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_connection <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _connection.DisposeAsync().ConfigureAwait(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"title\">ValueTask</span>&lt;<span class=\"title\">IEnumerable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"title\">QueryAsync</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">CancellationToken ct, <span class=\"built_in\">string</span> sql, <span class=\"built_in\">object</span> parameters = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ObjectDisposedException.ThrowIf(_disposed, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Querying database: &#123;Sql&#125;&quot;</span>, sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// using Dapper for simplicity</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _connection.QueryAsync&lt;T&gt;(<span class=\"keyword\">new</span> CommandDefinition(</span><br><span class=\"line\">            sql,</span><br><span class=\"line\">            parameters,</span><br><span class=\"line\">            cancellationToken: ct</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "dotnetcore",
                "csharp",
                "dotnet"
            ]
        },
        {
            "id": "https://code-corner.dev/2023/12/28/Syntax-sugar-we-don%E2%80%99t-even-think-about-in-C/",
            "url": "https://code-corner.dev/2023/12/28/Syntax-sugar-we-don%E2%80%99t-even-think-about-in-C/",
            "title": "Syntax sugar we don’t even think about in C#",
            "date_published": "2023-12-28T00:00:00.000Z",
            "content_html": "<p>When I finished my university degree, back in November 2010 (yes, I’m getting old), Microsoft wasn’t as open as it is today, but because they had a lot of education protocols we had access to a lot of their development tools for free — Visual Studio, SQL Server, Team Foundation Server, just to name a few.</p>\n<p>Because of this, C# was actually the language used to teach Object-Oriented Programming (OOP), design patterns and even deeper runtime concepts like garbage collection (an ode to the amazing book <em>“CLR via C#”</em> from Jeffrey Richter — I learned so much).</p>\n<p>At the time, we also used a lot of Java, C, C++, LISP, and even Assembly, but C# earned a place in my heart.</p>\n<p>Every time I had to create something from scratch that could be run on Windows, C# and .NET Framework was always my first choice. I’m not sure if it was the language or how good Visual Studio was as an IDE compared to Eclipse or NetBeans, but I always found C# to be the most productive programming language I ever used.</p>\n<p>And this was between 2006 and 2010, a period were Microsoft released C# versions 3.0 and 4.0 which, in my opinion, completely overthrown their direct competition — Java.</p>\n<p>We had auto-implemented properties, extension methods, LINQ, implicit typed variables, anonymous types, query and lambda expressions, just to name a few.</p>\n<p>This changes aimed to keep developers focused in implementing business requirements instead of writing boilerplate code. Some may disagree, but for me it was the start of a new era in terms of programming productivity.</p>\n<p>If we look back, C# as come a long way, introducing new features every version and I think we can all agree C# 11.0 is an extremely mature and powerful language, suitable both for enterprise or simple applications.</p>\n<hr>\n<p>Everyone now knows how much I love everything about C# — <em>almost :)</em> — and since we are starting a new year, I’m feeling nostalgic and I think it is a good time to show how far we’ve come and how much syntax sugar we use nowadays without thinking how much time it really saves us.</p>\n<h1 id=\"Auto-Properties-with-initializers\"><a href=\"#Auto-Properties-with-initializers\" class=\"headerlink\" title=\"Auto-Properties (with initializers)\"></a>Auto-Properties (with initializers)</h1><p>Ever since C# 1.0 we have properties, which behave like fields from a class or struct, but they are a special case of methods that can implement custom logic, not just get or set the field value.</p>\n<p>If we were to create a class <code>Car</code> in C# 1.0 to hold some information like brand, model, license plate and even the number of doors, with a default of 4, it would look like this:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _brand;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _model;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _licensePlate;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> _doors = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Brand</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _brand;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _brand = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Model</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _model;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _model = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> LicensePlate</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _licensePlate;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _licensePlate = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Doors</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _doors;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _doors = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>With the introduction of auto-properties in C# 3.0 and initializers in C# 6.0, we can make the code much more compact and readable.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Brand &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Model &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> LicensePlate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Doors &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Using-statement-and-declaration\"><a href=\"#Using-statement-and-declaration\" class=\"headerlink\" title=\"Using statement (and declaration)\"></a>Using statement (and declaration)</h1><p>The using statement ensures that instances implementing <code>IDisposable</code> are properly disposed.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (IDisposable x = CreateSomeDisposable())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do stuff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Without the <code>using</code> statement, developers would need to always write a <code>try-finally</code> block and check for <code>null</code> to prevent exceptions.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IDisposable x = CreateSomeDisposable();</span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do stuff</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ReferenceEquals(x, <span class=\"literal\">null</span>)) </span><br><span class=\"line\">        x.Dispose();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>With the release of C# 8.0 we can now use the <code>using</code> declaration, which simplifies even more the code, removing the need for brackets, disposing the instance at the end of the current scope.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> IDisposable x = CreateSomeDisposable();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// do stuff</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Foreach-loop\"><a href=\"#Foreach-loop\" class=\"headerlink\" title=\"Foreach loop\"></a>Foreach loop</h1><p>The <code>foreach</code> keyword makes it easier to iterate over an <code>IEnumerable</code> but did you know that, before C# 1.2, developers had to iterate over the enumerator and explicitly call the dispose method?</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IEnumerable cars = GetAllCars();</span><br><span class=\"line\">IEnumerator carsEnumerator = cars.GetEnumerator();</span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (carsEnumerator.MoveNext())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Car car = (Car)carsEnumerator.Current;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// do stuff</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    IDisposable disposable = carsEnumerator <span class=\"keyword\">as</span> IDisposable;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ReferenceEquals(disposable, <span class=\"literal\">null</span>))</span><br><span class=\"line\">        disposable.Dispose();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>With the release of C# 2.0, Microsoft introduced generics and iterators as a first-class part of the language which nowadays means that iterating over any collection is just a simple use of the <code>foreach</code> keyword:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IEnumerable&lt;Car&gt; cars = GetAllCars();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (Car car <span class=\"keyword\">in</span> cars)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do stuff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Object-and-collection-initializers\"><a href=\"#Object-and-collection-initializers\" class=\"headerlink\" title=\"Object and collection initializers\"></a>Object and collection initializers</h1><p>Before C# 3.0, when initializing a new object you had to invoke the constructor followed by lines of assignment statements. Same with collections, were method <code>Add</code> or indexers were used.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Car car = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">car.Brand = <span class=\"string\">&quot;Audi&quot;</span>;</span><br><span class=\"line\">car.Model = <span class=\"string\">&quot;A8&quot;</span>;</span><br><span class=\"line\">car.LicensePlate = <span class=\"string\">&quot;ABCD-1234&quot;</span>;</span><br><span class=\"line\">car.Doors = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Car[] cars = <span class=\"keyword\">new</span> Car[<span class=\"number\">1</span>];</span><br><span class=\"line\">cars[<span class=\"number\">0</span>] = car;</span><br></pre></td></tr></table></figure>\n\n<p>With object and collection initializers the code is more compact and scoped using brackets.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Car car = <span class=\"keyword\">new</span> Car</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Brand = <span class=\"string\">&quot;Audi&quot;</span>,</span><br><span class=\"line\">    Model = <span class=\"string\">&quot;A8&quot;</span>,</span><br><span class=\"line\">    LicensePlate = <span class=\"string\">&quot;ABCD-1234&quot;</span>,</span><br><span class=\"line\">    Doors = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Car[] cars = <span class=\"keyword\">new</span> Car[]</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    car</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Implicitly-typed-variables-and-anonymous-types\"><a href=\"#Implicitly-typed-variables-and-anonymous-types\" class=\"headerlink\" title=\"Implicitly typed variables (and anonymous types)\"></a>Implicitly typed variables (and anonymous types)</h1><p>The release of C# 3.0 introduced some features, being one the possibility of creating anonymous types which are usually used to store read-only data into a temporary instance, being the class generated internally by the compiler.</p>\n<p>Because developers don’t know the class name since it will be generated at compile time, Microsoft had to provide a way to define the variable type, so they created the <code>var</code> keyword that will tell the compiler it should infer the type.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    GivenName = <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">    Surname = <span class=\"string\">&quot;Doe&quot;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Because <code>var</code> can be used with anything, not just anonymous classes, some developers disagree it improves code legibility despite reducing the code that must be written, specially when defining generic variables.</p>\n<p>I personally believe that <code>var</code> is an improvement to code legibility as long as the surrounding code is properly implemented, like giving proper names to variables and methods.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Brand = <span class=\"string\">&quot;Audi&quot;</span>,</span><br><span class=\"line\">    Model = <span class=\"string\">&quot;A8&quot;</span>,</span><br><span class=\"line\">    LicensePlate = <span class=\"string\">&quot;ABCD-1234&quot;</span>,</span><br><span class=\"line\">    Doors = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cars = <span class=\"keyword\">new</span>[]</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    car</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Lambda-expressions-and-Action-Func\"><a href=\"#Lambda-expressions-and-Action-Func\" class=\"headerlink\" title=\"Lambda expressions (and Action&#x2F;Func)\"></a>Lambda expressions (and Action&#x2F;Func<T>)</h1><p>To create anonymous functions that can be implicitly converted to delegates as long as the signature matches, Microsoft added the lambda declaration operator <code>=&gt;</code> and provided into the framework pre-existing delegate types like <code>Action</code> for void results, or <code>Func&lt;T&gt;</code> if a result was returned, with multiple overloads for variable input parameters.</p>\n<p>Before C# 3.0 developers had to define their own delegate classes and invokers had to be explicit by using the delegate keyword.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">Filter</span>(<span class=\"params\">IEnumerable&lt;<span class=\"built_in\">string</span>&gt; values, FilterString filter</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> <span class=\"keyword\">value</span> <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(filter(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">            result.Add(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"built_in\">bool</span> <span class=\"title\">FilterString</span>(<span class=\"params\"><span class=\"built_in\">string</span> <span class=\"keyword\">value</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// usage</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> filterValues = Filter(values, <span class=\"built_in\">delegate</span>(<span class=\"built_in\">string</span> s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.Contains(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Using lambda expressions and pre-defined delegates, we don’t need to define our own and the code invoking <code>Filter</code> is much compacter.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">Filter</span>(<span class=\"params\">IEnumerable&lt;<span class=\"built_in\">string</span>&gt; values, Func&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">bool</span>&gt; filter</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> <span class=\"keyword\">value</span> <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(filter(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">            result.Add(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// usage</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> filterValues = Filter(values, s =&gt; s.Contains(<span class=\"string\">&#x27;1&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Extension-methods\"><a href=\"#Extension-methods\" class=\"headerlink\" title=\"Extension methods\"></a>Extension methods</h1><p>The release of C# 3.0 also introduced extension methods, an extremely powerful feature that allows to “add” methods to existing classes without modifying, extending or recompiling the class. They look like instance methods but are actually static methods that receive the instance as the first parameter and the compiler does the magic for us.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">StringExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span>? ToNullableInt(<span class=\"keyword\">this</span> <span class=\"built_in\">string</span> <span class=\"keyword\">value</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>.ToInt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> <span class=\"title\">ToInt</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"built_in\">string</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>.Parse(<span class=\"keyword\">value</span>, NumberStyles.None);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// usage</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> convertedValue = <span class=\"string\">&quot;12345&quot;</span>.ToNullableInt();</span><br><span class=\"line\">Without extension methods the code would be more verbose:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">StringExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span>? ToNullableInt(<span class=\"built_in\">string</span> <span class=\"keyword\">value</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ToInt(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> <span class=\"title\">ToInt</span>(<span class=\"params\"><span class=\"built_in\">string</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>.Parse(<span class=\"keyword\">value</span>, NumberStyles.None);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// usage</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> convertedValue = StringExtensions.ToNullableInt(<span class=\"string\">&quot;12345&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LINQ-—-Language-Integrated-Query\"><a href=\"#LINQ-—-Language-Integrated-Query\" class=\"headerlink\" title=\"LINQ — Language Integrated Query\"></a>LINQ — Language Integrated Query</h2><p>I want to give a special note about LINQ, despite not being an integral part of the C# language but a framework library, it is a powerful demonstration of what can be done when using a lot of C# syntactic sugar features — the usage of generics, iterators, extension methods over <code>IEnumerable</code>, lambda expressions, anonymous types and implicit typed local variables.</p>\n<p>Before C# 3.0, if we wanted to filter a collection cars with two doors and store a distinct collection of brands and models, we had to implement a class with an equality overload and use a HashSet to prevent duplicates.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CarBrandModelGroup</span> : <span class=\"title\">IEquatable</span>&lt;<span class=\"title\">CarBrandModelGroup</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CarBrandModelGroup</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> brand,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> model</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Brand = brand;</span><br><span class=\"line\">        Model = model;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Brand &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Model &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">CarBrandModelGroup other</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ReferenceEquals(<span class=\"literal\">null</span>, other)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ReferenceEquals(<span class=\"keyword\">this</span>, other)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Brand == other.Brand &amp;&amp; Model == other.Model;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\"><span class=\"built_in\">object</span> obj</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ReferenceEquals(<span class=\"literal\">null</span>, obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ReferenceEquals(<span class=\"keyword\">this</span>, obj)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.GetType() == GetType() &amp;&amp; Equals((CarBrandModelGroup)obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">int</span> <span class=\"title\">GetHashCode</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">uint</span> hc1;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ReferenceEquals(Brand, <span class=\"literal\">null</span>))</span><br><span class=\"line\">            hc1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            hc1 = (<span class=\"built_in\">uint</span>)Brand.GetHashCode();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">uint</span> hc2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ReferenceEquals(Model, <span class=\"literal\">null</span>))</span><br><span class=\"line\">            hc2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            hc2 = (<span class=\"built_in\">uint</span>)Model.GetHashCode();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"built_in\">int</span>)(hc1 ^ hc2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the group by brand and model cars with doors == 2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> carBrandModelsWithTwoDoors = <span class=\"keyword\">new</span> HashSet&lt;CarBrandModelGroup&gt;();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> car <span class=\"keyword\">in</span> cars)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (car.Doors == <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        carBrandModelsWithTwoDoors.Add(<span class=\"keyword\">new</span> CarBrandModelGroup(</span><br><span class=\"line\">            car.Brand,</span><br><span class=\"line\">            car.Model</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>With the introduction of LINQ, the code will be a simple use of the available methods while keeping in mind anonymous classes implement the default comparer, so no need for a custom class for grouping.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> carBrandModelsWithTwoDoors = cars.Where(c =&gt; c.Doors == <span class=\"number\">2</span>).DistinctBy(c =&gt; <span class=\"keyword\">new</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    c.Brand,</span><br><span class=\"line\">    c.Model</span><br><span class=\"line\">&#125;).ToArray();</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article I’ve shown how C# have evolved over the years to be a more productive and developer friendly language.</p>\n<p>Funny enough, when I started to write this article I wanted to cover major features that have been added over the years but then I realized just how big this language is and a single article would be too much, so I ended focusing more on C# 3.0.</p>\n<p>This clearly calls for more!</p>\n",
            "tags": [
                "dotnetcore",
                "csharp",
                "dotnet"
            ]
        },
        {
            "id": "https://code-corner.dev/2023/12/21/Configuration-providers-in-NET/",
            "url": "https://code-corner.dev/2023/12/21/Configuration-providers-in-NET/",
            "title": "Configuration providers in .NET",
            "date_published": "2023-12-21T00:00:00.000Z",
            "content_html": "<p>One interesting feature of the .NET ecosystem is the ability to configure the application using <code>Microsoft.Extensions.Options</code> library. It allows developers to easily manage and inject application settings from different sources, such as <code>appsettings.json</code> files, environment variables, command-line arguments, or even custom sources.</p>\n<p>Using a SQL database as an example, in this article I’m going to explain how to create a custom provider for <code>Microsoft.Extensions.Options</code> that reads key-valued configurations from a table that also ensure values are refreshed in-memory if the table content changes.</p>\n<p>If you want to use an approach for which you don’t have a provider available, like getting configurations from some custom API inside your company, you can easily use this example as a template to implement whatever requirements you may have.</p>\n<h1 id=\"Solution-setup\"><a href=\"#Solution-setup\" class=\"headerlink\" title=\"Solution setup\"></a>Solution setup</h1><p>For starters, we’ll need a SQL database with a table to store the application settings. In this example, <a href=\"https://github.com/gravity00/article-dotnet-configuration\">which I have available on GitHub</a>, I’m going to use SQL Server (feel free to use your favorite database) and create an <code>ApplicationSettings</code> table with two columns to store the keys and corresponding values.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> ApplicationSettings(</span><br><span class=\"line\">  [Key] nvarchar(<span class=\"number\">256</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span> <span class=\"keyword\">primary</span> key,</span><br><span class=\"line\">  [<span class=\"keyword\">Value</span>] nvarchar(<span class=\"number\">256</span>) <span class=\"keyword\">not</span> <span class=\"keyword\">null</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>To keep things simple, we are going to create a console application and use the NuGet <code>Microsoft.Extensions.Hosting</code> to setup the host (dependency injection, logging and configurations) but this code is fully compatible with any application using ASP.NET Core 2 or later.</p>\n<p>Create a new console application and register the following NuGets:</p>\n<ul>\n<li><code>Microsoft.Extensions.Hosting</code> — for hosting setup;</li>\n<li><code>Microsoft.data.SqlClient</code> — to access our SQL Server database (or another provider if a different database);</li>\n<li><code>Dapper</code> — optional, just to make it easier to map SQL results to C# entities;</li>\n</ul>\n<p>You can also configure the <code>*.csproj</code> file to include the application settings files when publishing.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Project</span> <span class=\"attr\">Sdk</span>=<span class=\"string\">&quot;Microsoft.NET.Sdk&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">OutputType</span>&gt;</span>Exe<span class=\"tag\">&lt;/<span class=\"name\">OutputType</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TargetFramework</span>&gt;</span>net8.0<span class=\"tag\">&lt;/<span class=\"name\">TargetFramework</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImplicitUsings</span>&gt;</span>enable<span class=\"tag\">&lt;/<span class=\"name\">ImplicitUsings</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">PropertyGroup</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">None</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;*.config;*.json&quot;</span> <span class=\"attr\">CopyToOutputDirectory</span>=<span class=\"string\">&quot;PreserveNewest&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;Dapper&quot;</span> <span class=\"attr\">Version</span>=<span class=\"string\">&quot;2.1.24&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;Microsoft.Data.SqlClient&quot;</span> <span class=\"attr\">Version</span>=<span class=\"string\">&quot;5.1.2&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">PackageReference</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;Microsoft.Extensions.Hosting&quot;</span> <span class=\"attr\">Version</span>=<span class=\"string\">&quot;8.0.0&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Add a new <code>appsettings.json</code> file to the project and include some options, like the connection string to the SQL Server database and some custom settings — in this example we are going to output a simple message to the console.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ConnectionStrings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;ArticleDotNetConfiguration&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Data Source=localhost;Database=ArticleDotNetConfiguration;User Id=sa;Password=abcd1234;Encrypt=false;&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;Example&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Message&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Hello world, from appsettings.json!&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Create a class representing the example options.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title\">ExampleOptions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Message &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>Program.cs</code> file, create a host with pre-configured defaults, configure the <code>ExampleOptions</code> and output the message that was loaded from the <code>appsettings.json</code> file.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder = Host.CreateApplicationBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.Configure&lt;ExampleOptions&gt;(</span><br><span class=\"line\">    builder.Configuration.GetSection(<span class=\"string\">&quot;Example&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> host = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = host.Services.GetRequiredService&lt;IOptions&lt;ExampleOptions&gt;&gt;().Value;</span><br><span class=\"line\">Console.WriteLine(options.Message);</span><br></pre></td></tr></table></figure>\n\n<p>Running the application, the message stored in the <code>appsettings.json</code> file should be displayed.</p>\n<img src=\"/2023/12/21/Configuration-providers-in-NET/01_hello_world_appsettings_json.png\" class=\"\">\n\n<h1 id=\"Configuration-provider\"><a href=\"#Configuration-provider\" class=\"headerlink\" title=\"Configuration provider\"></a>Configuration provider</h1><p>To create a custom configuration provider you need to implement two interfaces:</p>\n<ul>\n<li><code>IConfigurationSource</code> — will be added to the configuration manager and is used to store options (like a connection string) and build provider instances.</li>\n<li><code>IConfigurationProvider</code> — knows how to load the application settings and has methods to get or set configuration values by a given key. Providers usually extend the class <code>ConfigurationProvider</code> which makes it easier to store settings in-memory.</li>\n</ul>\n<p>Create a new class <code>SqlServerConfigurationSource</code>, add a property for the connection string and implement the interface <code>IConfigurationSource</code> without any logic, for now.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerConfigurationSource</span> : <span class=\"title\">IConfigurationSource</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ConnectionString &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IConfigurationProvider <span class=\"title\">Build</span>(<span class=\"params\">IConfigurationBuilder builder</span>)</span> =&gt; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotImplementedException();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Create a new class <code>SqlServerConfigurationProvider</code>, passing the configuration source as a constructor parameter and extending the class <code>ConfigurationProvider</code>.</p>\n<p>Override the <code>Load</code> method, reading application settings from the SQL table and store the results into the <code>Data</code> dictionary.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerConfigurationProvider</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    SqlServerConfigurationSource source</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) : ConfigurationProvider</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Load</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> connection = <span class=\"keyword\">new</span> SqlConnection(source.ConnectionString);</span><br><span class=\"line\">        connection.Open();</span><br><span class=\"line\"></span><br><span class=\"line\">        Data = connection.Query&lt;(<span class=\"built_in\">string</span> Key, <span class=\"built_in\">string</span> Value)&gt;(<span class=\"string\">@&quot;</span></span><br><span class=\"line\"><span class=\"string\">select </span></span><br><span class=\"line\"><span class=\"string\">    [Key],</span></span><br><span class=\"line\"><span class=\"string\">    [Value]</span></span><br><span class=\"line\"><span class=\"string\">from ApplicationSettings&quot;</span>).ToDictionary(e =&gt; e.Key, e =&gt; e.Value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Reopen the <code>SqlServerConfigurationSource.cs</code> file and implement the <code>Build</code> method, returning a new instance of the provider.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerConfigurationSource</span> : <span class=\"title\">IConfigurationSource</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> ConnectionString &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IConfigurationProvider <span class=\"title\">Build</span>(<span class=\"params\">IConfigurationBuilder builder</span>)</span> =&gt; <span class=\"keyword\">new</span> SqlServerConfigurationProvider(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>Program.cs</code> file and add the SQL Server configuration source to the host builder. Don’t forget to read the connection string from the existing sources.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder = Host.CreateApplicationBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> connectionString = builder.Configuration.GetConnectionString(<span class=\"string\">&quot;ArticleDotNetConfiguration&quot;</span>);</span><br><span class=\"line\">builder.Configuration.Add&lt;SqlServerConfigurationSource&gt;(source =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    source.ConnectionString = connectionString;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.Configure&lt;ExampleOptions&gt;(</span><br><span class=\"line\">    builder.Configuration.GetSection(<span class=\"string\">&quot;Example&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<p>Since the SQL Server provider was the last source added to the configuration manager, it will have priority over the existing ones. Let’s try to override the message by adding the key <code>Example:Message</code> with a value like <code>Hello world, from database!</code>.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> ApplicationSettings <span class=\"keyword\">values</span> (</span><br><span class=\"line\">  <span class=\"string\">&#x27;Example:Message&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;Hello world, from database!&#x27;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>Running the application, the message stored in the <code>ApplicationSettings</code> table should be displayed.</p>\n<img src=\"/2023/12/21/Configuration-providers-in-NET/02_hello_world_database.png\" class=\"\">\n\n<h1 id=\"Reloading-data\"><a href=\"#Reloading-data\" class=\"headerlink\" title=\"Reloading data\"></a>Reloading data</h1><p>In our previous code, we were getting an <code>IOptions</code> from the container to get the application settings. This is fine but what if the developer is using an <code>IOptionsMonitor</code> to always get the latest configurations?</p>\n<p>The current provider implementation never updates the <code>Data</code> property after the initial load, so we let’s change that.</p>\n<p>There are multiple ways to detect data changes from a SQL Server database, but for simplicity we are going to implement a simple worker that will be constantly loading application settings, compare what’s in memory and if changes are detected, invoke the base method <code>OnReload</code> that will trigger a refresh in all listeners.</p>\n<p>Let’s start by changing the <code>Program.cs</code> file and create a task that will be writing the message at intervals so we’ll see a different message when we update the table. Don’t forget to use an <code>IOptionsMonitor</code> instead of an <code>IOptions</code>.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder = Host.CreateApplicationBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> connectionString = builder.Configuration.GetConnectionString(<span class=\"string\">&quot;ArticleDotNetConfiguration&quot;</span>);</span><br><span class=\"line\">builder.Configuration.Add&lt;SqlServerConfigurationSource&gt;(source =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    source.ConnectionString = connectionString;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.Configure&lt;ExampleOptions&gt;(</span><br><span class=\"line\">    builder.Configuration.GetSection(<span class=\"string\">&quot;Example&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> host = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> appOptions = host.Services.GetRequiredService&lt;IOptionsMonitor&lt;ExampleOptions&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> Task.Run(<span class=\"keyword\">async</span> () =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> options = appOptions.CurrentValue;</span><br><span class=\"line\"></span><br><span class=\"line\">        Console.WriteLine(options.Message);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Task.Delay(<span class=\"number\">5</span>_000);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Open the provider class and do the following changes:</p>\n<ul>\n<li>Add a private <code>CancellationTokenSource</code> variable that will be used to cancel the worker execution;</li>\n<li>Add a private <code>Task</code> variable that will be the responsible to refresh the application settings when they change;</li>\n<li>Extract the logic that loads the data into a private method, so both Load method and worker can use that logic — change it to asynchronous code and do a comparison with previous loaded data, so method <code>OnReload</code> can be triggered;</li>\n<li>Change the <code>Load</code> method to use the extracted logic and create a worker that will refresh data at intervals — don’t forget to add some exception handling code;</li>\n<li>Implement the disposable pattern to release unmanaged resources;</li>\n</ul>\n<p>The <code>SqlServerConfigurationProvider</code> should now be as follows:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerConfigurationProvider</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    SqlServerConfigurationSource source</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) : ConfigurationProvider, IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> CancellationTokenSource _cts;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Task _refreshWorker;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">region</span> IDisposable</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ~SqlServerConfigurationProvider() =&gt; Dispose(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Dispose(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"><span class=\"built_in\">bool</span> disposing</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (disposing)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _cts?.Cancel();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_refreshWorker <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    _refreshWorker.ConfigureAwait(<span class=\"literal\">false</span>)</span><br><span class=\"line\">                        .GetAwaiter().GetResult();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (OperationCanceledException)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// expected exception due to cancellation</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Debug.WriteLine(<span class=\"string\">$&quot;Unhandled exception when waiting for the worker to stop: <span class=\"subst\">&#123;e&#125;</span>&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            _cts?.Dispose();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        _refreshWorker = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        _cts = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Load</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LoadAsync(CancellationToken.None).ConfigureAwait(<span class=\"literal\">false</span>)</span><br><span class=\"line\">            .GetAwaiter().GetResult();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_cts <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>) </span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        _cts = <span class=\"keyword\">new</span> CancellationTokenSource();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> ct = _cts.Token;</span><br><span class=\"line\">        _refreshWorker ??= Task.Run(<span class=\"keyword\">async</span> () =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">do</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">await</span> Task.Delay(<span class=\"number\">15</span>_000, ct);</span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">await</span> LoadAsync(ct);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Debug.WriteLine(<span class=\"string\">$&quot;Unhandled exception when refreshing database settings: <span class=\"subst\">&#123;e&#125;</span>&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (!ct.IsCancellationRequested);</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> Task <span class=\"title\">LoadAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; currentData;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = <span class=\"keyword\">new</span> SqlConnection(source.ConnectionString))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> connection.OpenAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">            currentData = (<span class=\"keyword\">await</span> connection.QueryAsync&lt;(<span class=\"built_in\">string</span> Key, <span class=\"built_in\">string</span> Value)&gt;(<span class=\"keyword\">new</span> CommandDefinition(<span class=\"string\">@&quot;</span></span><br><span class=\"line\"><span class=\"string\">select </span></span><br><span class=\"line\"><span class=\"string\">    [Key],</span></span><br><span class=\"line\"><span class=\"string\">    [Value]</span></span><br><span class=\"line\"><span class=\"string\">from ApplicationSettings&quot;</span>, cancellationToken: ct))).ToDictionary(e =&gt; e.Key, e =&gt; e.Value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (HasSameData(currentData))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Data = currentData;</span><br><span class=\"line\"></span><br><span class=\"line\">        OnReload();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> <span class=\"title\">HasSameData</span>(<span class=\"params\">Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; currentData</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Data.Count != currentData.Count)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> (key, <span class=\"keyword\">value</span>) <span class=\"keyword\">in</span> currentData)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Data.TryGetValue(key, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> previousValue) || previousValue != <span class=\"keyword\">value</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you now start the application and update or delete the value while running, you should see the task writing different messages.</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- update the settings</span></span><br><span class=\"line\"><span class=\"keyword\">update</span> ApplicationSettings</span><br><span class=\"line\"><span class=\"keyword\">set</span></span><br><span class=\"line\">  [<span class=\"keyword\">Value</span>] <span class=\"operator\">=</span> <span class=\"string\">&#x27;Hello world, from DB!&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">  [Key] <span class=\"operator\">=</span> <span class=\"string\">&#x27;Example:Message&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- or delete them</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> ApplicationSettings</span><br><span class=\"line\"><span class=\"keyword\">where</span></span><br><span class=\"line\">  [Key] <span class=\"operator\">=</span> <span class=\"string\">&#x27;Example:Message&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2023/12/21/Configuration-providers-in-NET/03_hell_world_final.png\" class=\"\">\n\n<h1 id=\"Reusing-the-provider\"><a href=\"#Reusing-the-provider\" class=\"headerlink\" title=\"Reusing the provider\"></a>Reusing the provider</h1><p>We now have a provider ready to read application settings from a SQL Server database, but I’m sure you are thinking it clearly could be more generic and just work with any SQL database.</p>\n<p>Your line of thought is correct, we can easily do that just by changing the options from a connection string to having a connection factory, adding a property for the SQL code and even a <code>TimeSpan</code> for refresh interval. We should also add an exception handling callback (instead of writing into the debugger) and create extension methods to make registration into the configuration manager more readable.</p>\n<p>The final code, <a href=\"https://github.com/gravity00/article-dotnet-configuration\">which is available on GitHub</a>, could be the as follows:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlExceptionContext</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Exception Exception &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SqlConfigurationProvider Provider &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlConfigurationBuilderExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> SqlExceptionHandlerKey = <span class=\"string\">&quot;SqlExceptionHandler&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IConfigurationBuilder <span class=\"title\">AddSql</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> IConfigurationBuilder builder,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        Func&lt;DbConnection&gt; connectionFactory,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> sql = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TimeSpan? refreshInterval = <span class=\"literal\">null</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ArgumentNullException.ThrowIfNull(builder);</span><br><span class=\"line\">        ArgumentNullException.ThrowIfNull(connectionFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.Add&lt;SqlConfigurationSource&gt;(source =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            source.ConnectionFactory = connectionFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sql <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">                source.Sql = sql;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (refreshInterval <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">                source.RefreshInterval = refreshInterval.Value;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IConfigurationBuilder <span class=\"title\">SetSqlExceptionHandler</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> IConfigurationBuilder builder,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        Action&lt;SqlExceptionContext&gt; handler</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ArgumentNullException.ThrowIfNull(builder);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.Properties[SqlExceptionHandlerKey] = handler;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Action&lt;SqlExceptionContext&gt; <span class=\"title\">GetSqlExceptionHandler</span>(<span class=\"params\"><span class=\"keyword\">this</span> IConfigurationBuilder builder</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ArgumentNullException.ThrowIfNull(builder);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.Properties.TryGetValue(SqlExceptionHandlerKey, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> <span class=\"keyword\">value</span>)</span><br><span class=\"line\">            ? <span class=\"keyword\">value</span> <span class=\"keyword\">as</span> Action&lt;SqlExceptionContext&gt;</span><br><span class=\"line\">            : <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlConfigurationSource</span> : <span class=\"title\">IConfigurationSource</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Func&lt;DbConnection&gt; ConnectionFactory &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Sql &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"string\">@&quot;</span></span><br><span class=\"line\"><span class=\"string\">select </span></span><br><span class=\"line\"><span class=\"string\">    [Key],</span></span><br><span class=\"line\"><span class=\"string\">    [Value]</span></span><br><span class=\"line\"><span class=\"string\">from ApplicationSettings&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TimeSpan RefreshInterval &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = TimeSpan.FromSeconds(<span class=\"number\">15</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IConfigurationProvider <span class=\"title\">Build</span>(<span class=\"params\">IConfigurationBuilder builder</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> exceptionHandler = builder.GetSqlExceptionHandler() ?? (ctx =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Debug.WriteLine(<span class=\"string\">$&quot;Unhandled SQL exception: <span class=\"subst\">&#123;ctx.Exception&#125;</span>&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SqlConfigurationProvider(<span class=\"keyword\">this</span>, exceptionHandler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlConfigurationProvider</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    SqlConfigurationSource source,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    Action&lt;SqlExceptionContext&gt; exceptionHandler</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) : ConfigurationProvider, IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> CancellationTokenSource _cts;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Task _refreshWorker;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">region</span> IDisposable</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ~SqlConfigurationProvider() =&gt; Dispose(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Dispose(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"><span class=\"built_in\">bool</span> disposing</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (disposing)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _cts?.Cancel();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_refreshWorker <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    _refreshWorker.ConfigureAwait(<span class=\"literal\">false</span>)</span><br><span class=\"line\">                        .GetAwaiter().GetResult();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (OperationCanceledException)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// expected exception due to cancellation</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    exceptionHandler(<span class=\"keyword\">new</span> SqlExceptionContext</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Exception = e,</span><br><span class=\"line\">                        Provider = <span class=\"keyword\">this</span></span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            _cts?.Dispose();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        _refreshWorker = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        _cts = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Load</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LoadAsync(CancellationToken.None).ConfigureAwait(<span class=\"literal\">false</span>)</span><br><span class=\"line\">            .GetAwaiter().GetResult();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_cts <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        _cts = <span class=\"keyword\">new</span> CancellationTokenSource();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> ct = _cts.Token;</span><br><span class=\"line\">        _refreshWorker ??= Task.Run(<span class=\"keyword\">async</span> () =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">do</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">await</span> Task.Delay(source.RefreshInterval, ct);</span><br><span class=\"line\">                <span class=\"keyword\">try</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">await</span> LoadAsync(ct);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    exceptionHandler(<span class=\"keyword\">new</span> SqlExceptionContext</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Exception = e,</span><br><span class=\"line\">                        Provider = <span class=\"keyword\">this</span></span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (!ct.IsCancellationRequested);</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> Task <span class=\"title\">LoadAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; currentData;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> connection = source.ConnectionFactory())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> connection.OpenAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">            currentData = (<span class=\"keyword\">await</span> connection.QueryAsync&lt;(<span class=\"built_in\">string</span> Key, <span class=\"built_in\">string</span> Value)&gt;(</span><br><span class=\"line\">                <span class=\"keyword\">new</span> CommandDefinition(source.Sql, cancellationToken: ct)</span><br><span class=\"line\">            )).ToDictionary(e =&gt; e.Key, e =&gt; e.Value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (HasSameData(currentData))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Data = currentData;</span><br><span class=\"line\"></span><br><span class=\"line\">        OnReload();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> <span class=\"title\">HasSameData</span>(<span class=\"params\">Dictionary&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">string</span>&gt; currentData</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Data.Count != currentData.Count)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> (key, <span class=\"keyword\">value</span>) <span class=\"keyword\">in</span> currentData)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Data.TryGetValue(key, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> previousValue) || previousValue != <span class=\"keyword\">value</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article I explained how to create a custom configuration provider for the <code>Microsoft.Extensions.Options</code> library, that could be used in any .NET application that uses <code>Microsoft.Extensions.Hosting</code>, including ASP.NET Core applications.</p>\n<p>I used a SQL Server database as an example, but could be easily anything, like getting settings from an internal API and even Windows registry.</p>\n",
            "tags": [
                "dotnetcore",
                "aspnetcore",
                "csharp"
            ]
        },
        {
            "id": "https://code-corner.dev/2023/12/14/C-%E2%80%98is-null%E2%80%99-vs-%E2%80%98-null%E2%80%99/",
            "url": "https://code-corner.dev/2023/12/14/C-%E2%80%98is-null%E2%80%99-vs-%E2%80%98-null%E2%80%99/",
            "title": "C# ‘is null’ vs ‘== null’",
            "date_published": "2023-12-14T00:00:00.000Z",
            "content_html": "<p>When C# 7.0 was officially released in March 2017 it introduced <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-70\">several new features</a> to make the life of developers easier, like tuples and deconstruction, local functions, expression body definitions and, the focus of this article, <strong>pattern matching</strong>.</p>\n<p>One of the advantages of pattern matching is a more concise syntax for testing expressions and taking actions when there’s a match, increasing the readability and correctness of your code.</p>\n<p>Checking for nulls is one of the most common usages. Before C# 7.0, if a developer wanted to check if a given value was null, usually the equality comparison would be used.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">PersonExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">FullName</span>(<span class=\"params\"><span class=\"keyword\">this</span> Person person</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (person == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(person));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;person.GivenName&#125;</span> <span class=\"subst\">&#123;person.Surname&#125;</span>&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>With pattern matching, the extension method would be using the <code>is</code> operator and the <code>null</code> constant to check if the person variable is null.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">PersonExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">FullName</span>(<span class=\"params\"><span class=\"keyword\">this</span> Person person</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (person <span class=\"keyword\">is</span> <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(person));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;person.GivenName&#125;</span> <span class=\"subst\">&#123;person.Surname&#125;</span>&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The change is so small that you are probably questioning if changing the way you code is really worthy for such a small readability improvement, to have the same results?</p>\n<p>And you are right in thinking that way since that’s probably true for 99% of use cases (if not 99.999%) but what if you really want to be sure it works every time?</p>\n<p>You see, reference types can overload the <code>==</code> operator and, if the developer decides to always return false when comparing to null, the first example would throw a <code>NullReferenceException</code>.</p>\n<p>Let’s test that by overloading the <code>==</code> operator to always return false, whatever the parameters received:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> GivenName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Surname &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"keyword\">operator</span> ==(Person left, Person right) =&gt; <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"keyword\">operator</span> !=(Person left, Person right) =&gt; !(left == right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">PersonExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">FullName</span>(<span class=\"params\"><span class=\"keyword\">this</span> Person person</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (person == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(person));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;person.GivenName&#125;</span> <span class=\"subst\">&#123;person.Surname&#125;</span>&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If we now call the extension method <code>FullName</code> with a null argument a <code>NullReferenceException</code> will be thrown instead of the expected <code>ArgumentNullException</code>. This happens because the compiler knows there’s an equality overload, calls it and gets false, so if won’t enter the if statement.</p>\n<img src=\"/2023/12/14/C-%E2%80%98is-null%E2%80%99-vs-%E2%80%98-null%E2%80%99/01_null_reference_exception.png\" class=\"\">\n\n<p>If you look at the generated IL Code, you’ll see the Person equality operator being called.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// [36 5 - 36 6]</span><br><span class=\"line\">IL_0000: nop</span><br><span class=\"line\"></span><br><span class=\"line\">// [37 9 - 37 28]</span><br><span class=\"line\">IL_0001: ldarg.0      // person</span><br><span class=\"line\">IL_0002: ldnull</span><br><span class=\"line\">IL_0003: call         bool Person::op_Equality(class Person, class Person)</span><br><span class=\"line\">IL_0008: stloc.0      // V_0</span><br><span class=\"line\"></span><br><span class=\"line\">// [37 29 - 37 77]</span><br><span class=\"line\">IL_0009: ldloc.0      // V_0</span><br><span class=\"line\">IL_000a: brfalse.s    IL_0017</span><br><span class=\"line\">IL_000c: ldstr        &quot;person&quot;</span><br><span class=\"line\">IL_0011: newobj       instance void [System.Runtime]System.ArgumentNullException::.ctor(string)</span><br><span class=\"line\">IL_0016: throw</span><br><span class=\"line\">IL_0017: ldarg.0      // person</span><br><span class=\"line\">IL_0018: callvirt     instance string Person::get_GivenName()</span><br><span class=\"line\">IL_001d: ldstr        &quot; &quot;</span><br><span class=\"line\">IL_0022: ldarg.0      // person</span><br><span class=\"line\">IL_0023: callvirt     instance string Person::get_Surname()</span><br><span class=\"line\">IL_0028: call         string [System.Runtime]System.String::Concat(string, string, string)</span><br><span class=\"line\"></span><br><span class=\"line\">// [40 5 - 40 6]</span><br><span class=\"line\">IL_002d: stloc.1      // V_1</span><br><span class=\"line\">IL_002e: br.s         IL_0030</span><br><span class=\"line\">IL_0030: ldloc.1      // V_1</span><br><span class=\"line\">IL_0031: ret</span><br></pre></td></tr></table></figure>\n\n<p>Before C# 7.0 if you wanted to be sure the <code>==</code> operator overload was ignored, you had to use <code>object.ReferenceEquals</code> to compare the object reference to null.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">PersonExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">FullName</span>(<span class=\"params\"><span class=\"keyword\">this</span> Person person</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ReferenceEquals(person, <span class=\"literal\">null</span>)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(person));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;person.GivenName&#125;</span> <span class=\"subst\">&#123;person.Surname&#125;</span>&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>But when using pattern matching the compiler always generates code that compares to null, ignoring any <code>==</code> operator overload. This means you have the same behavior as using the <code>object.ReferenceEquals</code> method without writing so much code.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> GivenName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Surname &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"keyword\">operator</span> ==(Person left, Person right) =&gt; <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"keyword\">operator</span> !=(Person left, Person right) =&gt; !(left == right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">PersonExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">FullName</span>(<span class=\"params\"><span class=\"keyword\">this</span> Person person</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (person <span class=\"keyword\">is</span> <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(person));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;person.GivenName&#125;</span> <span class=\"subst\">&#123;person.Surname&#125;</span>&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This ensures the method <code>FullName</code> always throws <code>ArgumentNullException</code> when a null reference is received.</p>\n<img src=\"/2023/12/14/C-%E2%80%98is-null%E2%80%99-vs-%E2%80%98-null%E2%80%99/02_argument_null_exception.png\" class=\"\">\n\n<p>Looking at the generated IL Code, we can see the <code>person</code> reference is being compared to null using the <code>ceq</code> instruction (this is exactly the same code if <code>object.ReferenceEquals</code> was being used — it would be inlined).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// [36 5 - 36 6]</span><br><span class=\"line\">IL_0000: nop</span><br><span class=\"line\"></span><br><span class=\"line\">// [37 9 - 37 43]</span><br><span class=\"line\">IL_0001: ldarg.0      // person</span><br><span class=\"line\">IL_0002: ldnull</span><br><span class=\"line\">IL_0003: ceq</span><br><span class=\"line\">IL_0005: stloc.0      // V_0</span><br><span class=\"line\"></span><br><span class=\"line\">IL_0006: ldloc.0      // V_0</span><br><span class=\"line\">IL_0007: brfalse.s    IL_0014</span><br><span class=\"line\"></span><br><span class=\"line\">// [37 44 - 37 92]</span><br><span class=\"line\">IL_0009: ldstr        &quot;person&quot;</span><br><span class=\"line\">IL_000e: newobj       instance void [System.Runtime]System.ArgumentNullException::.ctor(string)</span><br><span class=\"line\">IL_0013: throw</span><br><span class=\"line\"></span><br><span class=\"line\">// [39 9 - 39 55]</span><br><span class=\"line\">IL_0014: ldarg.0      // person</span><br><span class=\"line\">IL_0015: callvirt     instance string Person::get_GivenName()</span><br><span class=\"line\">IL_001a: ldstr        &quot; &quot;</span><br><span class=\"line\">IL_001f: ldarg.0      // person</span><br><span class=\"line\">IL_0020: callvirt     instance string Person::get_Surname()</span><br><span class=\"line\">IL_0025: call         string [System.Runtime]System.String::Concat(string, string, string)</span><br><span class=\"line\">IL_002a: stloc.1      // V_1</span><br><span class=\"line\">IL_002b: br.s         IL_002d</span><br><span class=\"line\"></span><br><span class=\"line\">// [40 5 - 40 6]</span><br><span class=\"line\">IL_002d: ldloc.1      // V_1</span><br><span class=\"line\">IL_002e: ret</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article I explained why using pattern matching for null checks is preferred to using the equality operator.</p>\n<p>Not only it’s a small readability improvement but it also ensures the object reference is always compared to null even if the class has overloaded the <code>==</code> operator (same behavior as using the <code>object.ReferenceEquals</code> method but without writing so much code).</p>\n<p>Even if the equality operator overload is properly implemented, we can also consider this a small performance increase because executing the ceq operation is faster that a call to the class equality operator.</p>\n<p>As stated before, this may not affect 99% of your use cases, but for such small a small change in the way you code, why not?</p>\n",
            "tags": [
                "dotnetcore",
                "csharp",
                "dotnet"
            ]
        },
        {
            "id": "https://code-corner.dev/2023/12/04/NET-%E2%80%94-DevOps-and-Entity-Framework-Core/",
            "url": "https://code-corner.dev/2023/12/04/NET-%E2%80%94-DevOps-and-Entity-Framework-Core/",
            "title": ".NET — DevOps and Entity Framework Core",
            "date_published": "2023-12-04T00:00:00.000Z",
            "content_html": "<p>Most .NET developers either have used Entity Framework Core or eventually will, because it is one of the most known and flexible ORM frameworks to access databases in the .NET ecosystem, directly supported by Microsoft and the Open Source community.</p>\n<p>In this article I’m going to explain how you can create a console application that will check if migrations are missing from the database and apply them accordingly. This is an approach I’ve been using ever since Microsoft released .NET Core 1 RC 1 (<a href=\"https://medium.com/@joaoprsimoes/net-creating-advanced-console-applications-c99d58216d36\">at the time I even created an open-source library to facilitate console hosting</a>, now deprecated because we can use <code>Microsoft.Extensions.Hosting</code>).</p>\n<hr>\n<p>Ever since its inception, one of the main features supported by Entity Framework is the concept of <strong>database migrations</strong> in code-first scenarios which, in a simplified way, work as follows:</p>\n<ul>\n<li>Model entities representing tables are mapped into the <code>DbContext</code>, were table and column names, data sizes, foreign keys, indexes, and so on, are defined;</li>\n<li>Entity Framework tools are <a href=\"https://learn.microsoft.com/en-us/ef/core/managing-schemas/migrations/?tabs=dotnet-core-cli#install-the-tools\">installed into the project</a> (either the .NET Core CLI tools for cross platform or Package Manager Console tools for Visual Studio integration);</li>\n<li>A class implementing <code>IDesignTimeDbContextFactory</code> is created and will configure the <code>DbContext</code> when Entity Framework tools are run — provider to use, connection string, etc. This reduces the number of parameters that need to be passed when using the CLI&#x2F;PMC tools.</li>\n<li>When adding a new migration, the tools are going to use the factory to create the <code>DbContext</code>, compare the mappings to the current database schema, see what’s different and create a migration class with a bunch of C# operations that will change the schema accordingly (like creating a new index, adding a new column, dropping a table). The migration will also have a method for the inverse operations (drop the index, remove the column, recreate the table) that can be used to revert changes;</li>\n<li>The tools can also be run to update the database schema, either to the most recent or revert to an older version, ensuring missing migrations are run sequentially in the required order.</li>\n</ul>\n<p>This is a very powerful feature offered by EF Core because it speeds up the development and evolution of the database schemas while ensuring a historic change log is kept and version controlled near the C# entity models. The application may have been developed for 10 years but any new team member can setup a local version of the database in just a few steps.</p>\n<p>But you are probably thinking: <em>this seems nice and all, but he’s talking about DevOps and I’m not sure how I can use this to evolve my production schemas? The company I work for does not allow any developer to connect to production databases and even if it did, certainly the user wouldn’t have permissions to change the database schema! I can’t run EF Core tools from my computer to do this!</em></p>\n<h1 id=\"Why-an-installer-for-EF-Core-migrations\"><a href=\"#Why-an-installer-for-EF-Core-migrations\" class=\"headerlink\" title=\"Why an installer for EF Core migrations?\"></a>Why an installer for EF Core migrations?</h1><p>Having a console application that applies migrations to a database has some advantages that will probably benefit the DevOps process your company currently implements:</p>\n<ul>\n<li>For <strong>cloud solutions</strong>, you can add steps into the Continuous Delivery pipeline that run the console before distributing the APIs or Websites, which may even require the approval of specific DevOps team members. Because the pipeline is tightly controlled, the production connection strings that can execute DDL instructions are properly secured. Even if you don’t have a DevOps team but the access to production is secured by the Infrastructure team, the console can be provided as a standalone executable and they decide how and where it should be run, manually or not.</li>\n<li>For <strong>on-prem solutions</strong>, the console can be packed with the application installer to be run every time a new version is released. If it fails, the installation process can either be halted or database changes reverted to a previous state by restoring a backup made at the start of the installation.</li>\n</ul>\n<p>In both scenarios this process is more reliable than, lets say, executing SQL scripts which are harder to read, maintain and debug in case of problems. If the console application has been configured with a good logging library (either to a file or command line output) there’s no reason someone can’t analyze what is happening.</p>\n<p>The use case scenario<br>To keep things simple and focusing in the migrations executable, let’s assume we are maintaining an API that manages a warehouse. This API is responsible for storing product information and stock movements and is implemented using a typical three-layer architecture, using Entity Framework Core to store and retrieve data from a SQL Server database.</p>\n<p>In this hypothetical scenario, we decided to improve our DevOps process by creating a console application to apply migrations into the database. This tool will be called migrator, which is a new console project inside the database layer.</p>\n<p>It will have a direct dependency from the database implementation, which holds the Entity Framework Core mappings for the database entities, defined in the database contracts layer.</p>\n<p>The diagram for projects and their dependencies inside the solution, after creating the migrator executable project, could look like this:</p>\n<img src=\"/2023/12/04/NET-%E2%80%94-DevOps-and-Entity-Framework-Core/01_solution_diagram.png\" class=\"\">\n\n<p>Since this API only manages products and stock movements, the database model could be represented by the following entity contracts (navigation properties won’t be used for simplicity):</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">StockMovementEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> ProductId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Quantity &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTimeOffset OccurredOn &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The Entity Framework Core database context could be mapped as follows:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        .HasMaxLength(<span class=\"number\">8</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Name)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">128</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        modelBuilder.Entity&lt;StockMovementEntity&gt;(cfg =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cfg.ToTable(<span class=\"string\">&quot;StockMovements&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            cfg.HasKey(e =&gt; e.Id);</span><br><span class=\"line\"></span><br><span class=\"line\">            cfg.Property(e =&gt; e.Id)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .ValueGeneratedOnAdd();</span><br><span class=\"line\">            cfg.HasOne&lt;ProductEntity&gt;()</span><br><span class=\"line\">                .WithMany()</span><br><span class=\"line\">                .HasForeignKey(e =&gt; e.ProductId)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Quantity)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.OccurredOn)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As I said before, nothing fancy here, just a simple use-case with a database model we will use for creating our migrations and apply them using our console application.</p>\n<p><a href=\"https://github.com/gravity00/article-devops-efcore\">I have a working example showcasing this scenario on GitHub (only the database layer), so feel free to give it a good look</a>. I’m using .NET 8, but any previous .NET version will work without any code changes. If for some reason you need to support older framework versions like .NET Core App 2+ or .NET Framework 4.6.2+, just downgrade the nuggets to a previous versions that supports .NET Standard 2.0, like versions 2.x or 3.x, and do some small tweaks into the hosting setup.</p>\n<h1 id=\"Console-application-setup\"><a href=\"#Console-application-setup\" class=\"headerlink\" title=\"Console application setup\"></a>Console application setup</h1><p>Now that we have defined both models and mappings, let’s setup the console application, which is going to use <code>Microsoft.Extensions.Hosting</code> for an easier setup of logging, dependency injection and application settings configuration.</p>\n<p>Start by creating a console application project and create a <code>Program.cs</code> file with a simple “hello world!” output.</p>\n<p>Add a project reference to the database implementation and add both <code>Microsoft.Extensions.Hosting</code> and <code>Microsoft.EntityFrameworkCore.Tools</code> packages (we are going to use Visual Studio Package Manager Console for creating the migrations, but feel free to use .NET Core CLI tools).</p>\n<p>Inside the database layer, the projects should be similar to this:</p>\n<img src=\"/2023/12/04/NET-%E2%80%94-DevOps-and-Entity-Framework-Core/02_project_structure.png\" class=\"\">\n\n<h2 id=\"Migrations-setup\"><a href=\"#Migrations-setup\" class=\"headerlink\" title=\"Migrations setup\"></a>Migrations setup</h2><p>To prepare the project for creating EF Core migrations, start by adding an <code>appsettings.json</code> file with a connection string to an empty SQL Server database and, to be used in the future by the host, you can already make some logging configurations.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ConnectionStrings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;ArticleDevOpsEfCore&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Data Source=localhost;Database=ArticleDevOpsEfCore;User Id=sa;Password=abcd1234;Encrypt=false;&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;Logging&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;LogLevel&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;Default&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Trace&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;Microsoft&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Information&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Console&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;IncludeScopes&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Debug&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;IncludeScopes&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;EventSource&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;IncludeScopes&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Remember to tell the application that, when publishing, the configuration files must be copied to the output folder. This is done by adding an include property to the <em>csproj</em> file.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">None</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;*.config;*.json&quot;</span> <span class=\"attr\">CopyToOutputDirectory</span>=<span class=\"string\">&quot;PreserveNewest&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Create a new class implementing <code>IDesignTimeDbContextFactory</code>. This class will be responsible for creating and configuring the database contexts when managing migrations via .NET Core CLI tools or Visual Studio Package Manager Console.</p>\n<p>To know which connection string must be used, we are going to use a <code>ConfigurationBuilder</code> to read the settings file and then register a SQL Server provider with a small detail — <strong>we must specify that the migrations are stored in the console application executable, not where the context is defined</strong>.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DesignTimeDbContextFactory</span> : <span class=\"title\">IDesignTimeDbContextFactory</span>&lt;<span class=\"title\">DatabaseContext</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DatabaseContext <span class=\"title\">CreateDbContext</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> configuration = <span class=\"keyword\">new</span> ConfigurationBuilder()</span><br><span class=\"line\">            .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class=\"line\">            .AddJsonFile(<span class=\"string\">&quot;appsettings.json&quot;</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">            .Build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> options = <span class=\"keyword\">new</span> DbContextOptionsBuilder&lt;DatabaseContext&gt;().UseSqlServer(</span><br><span class=\"line\">            configuration.GetConnectionString(<span class=\"string\">&quot;ArticleDevOpsEfCore&quot;</span>),</span><br><span class=\"line\">            o =&gt; o.MigrationsAssembly(<span class=\"keyword\">typeof</span>(Program).Assembly.FullName)</span><br><span class=\"line\">        ).Options;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DatabaseContext(options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Let’s test the setup and see if we can create some migrations. Open the Package Manager Console and run the following command:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add-migration InitialModelSetup</span><br></pre></td></tr></table></figure>\n\n<p>If everything went as expected, a new <code>Migrations</code> folder was created with a <code>InitialModelSetup</code> migration class that will setup the database model. If your database schema is empty, it should look like this:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;inheritdoc /&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">InitialModelSetup</span> : <span class=\"title\">Migration</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;inheritdoc /&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Up</span>(<span class=\"params\">MigrationBuilder migrationBuilder</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        migrationBuilder.CreateTable(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;Products&quot;</span>,</span><br><span class=\"line\">            columns: table =&gt; <span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Id = table.Column&lt;<span class=\"built_in\">long</span>&gt;(type: <span class=\"string\">&quot;bigint&quot;</span>, nullable: <span class=\"literal\">false</span>)</span><br><span class=\"line\">                    .Annotation(<span class=\"string\">&quot;SqlServer:Identity&quot;</span>, <span class=\"string\">&quot;1, 1&quot;</span>),</span><br><span class=\"line\">                Code = table.Column&lt;<span class=\"built_in\">string</span>&gt;(type: <span class=\"string\">&quot;nvarchar(8)&quot;</span>, maxLength: <span class=\"number\">8</span>, nullable: <span class=\"literal\">false</span>),</span><br><span class=\"line\">                Name = table.Column&lt;<span class=\"built_in\">string</span>&gt;(type: <span class=\"string\">&quot;nvarchar(128)&quot;</span>, maxLength: <span class=\"number\">128</span>, nullable: <span class=\"literal\">false</span>)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            constraints: table =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                table.PrimaryKey(<span class=\"string\">&quot;PK_Products&quot;</span>, x =&gt; x.Id);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        migrationBuilder.CreateTable(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;StockMovements&quot;</span>,</span><br><span class=\"line\">            columns: table =&gt; <span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Id = table.Column&lt;<span class=\"built_in\">long</span>&gt;(type: <span class=\"string\">&quot;bigint&quot;</span>, nullable: <span class=\"literal\">false</span>)</span><br><span class=\"line\">                    .Annotation(<span class=\"string\">&quot;SqlServer:Identity&quot;</span>, <span class=\"string\">&quot;1, 1&quot;</span>),</span><br><span class=\"line\">                ProductId = table.Column&lt;<span class=\"built_in\">long</span>&gt;(type: <span class=\"string\">&quot;bigint&quot;</span>, nullable: <span class=\"literal\">false</span>),</span><br><span class=\"line\">                Quantity = table.Column&lt;<span class=\"built_in\">int</span>&gt;(type: <span class=\"string\">&quot;int&quot;</span>, nullable: <span class=\"literal\">false</span>),</span><br><span class=\"line\">                OccurredOn = table.Column&lt;DateTimeOffset&gt;(type: <span class=\"string\">&quot;datetimeoffset&quot;</span>, nullable: <span class=\"literal\">false</span>)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            constraints: table =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                table.PrimaryKey(<span class=\"string\">&quot;PK_StockMovements&quot;</span>, x =&gt; x.Id);</span><br><span class=\"line\">                table.ForeignKey(</span><br><span class=\"line\">                    name: <span class=\"string\">&quot;FK_StockMovements_Products_ProductId&quot;</span>,</span><br><span class=\"line\">                    column: x =&gt; x.ProductId,</span><br><span class=\"line\">                    principalTable: <span class=\"string\">&quot;Products&quot;</span>,</span><br><span class=\"line\">                    principalColumn: <span class=\"string\">&quot;Id&quot;</span>,</span><br><span class=\"line\">                    onDelete: ReferentialAction.Cascade);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        migrationBuilder.CreateIndex(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;IX_Products_Code&quot;</span>,</span><br><span class=\"line\">            table: <span class=\"string\">&quot;Products&quot;</span>,</span><br><span class=\"line\">            column: <span class=\"string\">&quot;Code&quot;</span>,</span><br><span class=\"line\">            unique: <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        migrationBuilder.CreateIndex(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;IX_StockMovements_ProductId&quot;</span>,</span><br><span class=\"line\">            table: <span class=\"string\">&quot;StockMovements&quot;</span>,</span><br><span class=\"line\">            column: <span class=\"string\">&quot;ProductId&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;inheritdoc /&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Down</span>(<span class=\"params\">MigrationBuilder migrationBuilder</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        migrationBuilder.DropTable(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;StockMovements&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        migrationBuilder.DropTable(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;Products&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hosting-setup\"><a href=\"#Hosting-setup\" class=\"headerlink\" title=\"Hosting setup\"></a>Hosting setup</h2><p>Now that we know the project is ready to add or remove migrations based on our development database, let’s create all the required code to apply migrations when running the console.</p>\n<p>Open the launch profile, and in the environment variables, add a new <code>DOTNET_ENVIRONMENT</code> with the value <code>development</code>. This will be used by the host to know your current environment — development, stagging or production (default) — when running the application which is useful for loading different settings or executing code based on the environment, like creating test data.</p>\n<img src=\"/2023/12/04/NET-%E2%80%94-DevOps-and-Entity-Framework-Core/03_environment_setup.png\" class=\"\">\n\n<p>Open the <code>Program.cs</code> file and use <code>Host.CreateApplicationBuilder</code> to create a builder for setting up a new host. It will use pre-configured defaults, like loading settings from the <code>appsettings.json</code> file or from environment variables and output logging to console and debug windows, while supporting dependency injection.</p>\n<p>You can use the builder to register other logging providers, like NLog or Serilog, and register the Entity Framework Core context into the dependency injection container using a SQL Server provider. Because the migrations are going to be run by a console application, the context can be shared as a singleton (by default it is scoped, useful for ASP.NET Core apps), otherwise you must create a scope explicitly. Once again, don’t forget to specify the assembly were migrations are stored.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder = Host.CreateApplicationBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">ConfigureLogging(</span><br><span class=\"line\">    builder.Logging</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">ConfigureServices(</span><br><span class=\"line\">    builder.Services,</span><br><span class=\"line\">    builder.Configuration</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> host = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureLogging</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    ILoggingBuilder logging</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// configure other logging providers, like NLog, Serilog or even Application Insights</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IServiceCollection services,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IConfiguration configuration</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> connectionString = configuration.GetConnectionString(<span class=\"string\">&quot;ArticleDevOpsEfCore&quot;</span>);</span><br><span class=\"line\">    services.AddDbContext&lt;DatabaseContext&gt;(options =&gt; options.UseSqlServer(</span><br><span class=\"line\">        connectionString,</span><br><span class=\"line\">        o =&gt; o.MigrationsAssembly(<span class=\"keyword\">typeof</span>(Program).Assembly.FullName)</span><br><span class=\"line\">    ), ServiceLifetime.Singleton);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Create a new class named <code>Migrator</code> with a <code>RunAsync</code> method (that will have the migrator implementation), register it as a singleton into the DI container and, after creating the host, resolve and run it. Because migrations can fail, it is also a good idea to implement some exception handling logic (because even host setup can fail, I also prefer to wrap it). Also, we should support the cancellation of this process when CTRL+C or exit is requested, so let’s use a <code>CancellationTokenSource</code> for that.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> cts = <span class=\"keyword\">new</span> CancellationTokenSource();</span><br><span class=\"line\">Console.CancelKeyPress += (_, eventArgs) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cts.Cancel();</span><br><span class=\"line\">    eventArgs.Cancel = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ILogger&lt;Program&gt; logger = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> builder = Host.CreateApplicationBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">    ConfigureLogging(</span><br><span class=\"line\">        builder.Logging</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    ConfigureServices(</span><br><span class=\"line\">        builder.Services,</span><br><span class=\"line\">        builder.Configuration</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> host = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\">    logger = host.Services.GetRequiredService&lt;ILogger&lt;Program&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> migrator = host.Services.GetRequiredService&lt;Migrator&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    logger.LogDebug(<span class=\"string\">&quot;Running migrator&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> migrator.RunAsync(cts.Token);</span><br><span class=\"line\">    logger.LogInformation(<span class=\"string\">&quot;Migrator run successfully&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger <span class=\"keyword\">is</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Console.Error.WriteLineAsync(<span class=\"string\">&quot;Application failed with a fatal error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Console.Error.WriteLineAsync(e.ToString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        logger.LogCritical(e, <span class=\"string\">&quot;Application failed with a fatal error&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureLogging</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    ILoggingBuilder logging</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// configure other logging providers, like NLog, Serilog or even Application Insights</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IServiceCollection services,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IConfiguration configuration</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> connectionString = configuration.GetConnectionString(<span class=\"string\">&quot;ArticleDevOpsEfCore&quot;</span>);</span><br><span class=\"line\">    services.AddDbContext&lt;DatabaseContext&gt;(options =&gt; options.UseSqlServer(</span><br><span class=\"line\">        connectionString,</span><br><span class=\"line\">        o =&gt; o.MigrationsAssembly(<span class=\"keyword\">typeof</span>(Program).Assembly.FullName)</span><br><span class=\"line\">    ), ServiceLifetime.Singleton);</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddSingleton&lt;Migrator&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Applying-migrations\"><a href=\"#Applying-migrations\" class=\"headerlink\" title=\"Applying migrations\"></a>Applying migrations</h2><p>With the host fully configured and ready to run the migrator, let’s implement the migrations logic.</p>\n<p>Open the <code>Migrator.cs</code> file and create a constructor receiving both a logger and a database context. Inside the <code>RunAsync</code> method add some helpful logging and use the <code>ctx.Database.MigrateAsync</code> to update the database schema to the latest available. Keep in mind this method will apply the missing migrations and it’s not the same as <code>EnsureCreatedAsync</code>, which just checks if the database exists and if it doesn’t, creates the database and schema without using any migration.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Migrator</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    ILogger&lt;Migrator&gt; _logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    DatabaseContext _context</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> ValueTask <span class=\"title\">RunAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Migrating database to the latest version&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.MigrateAsync(ct);</span><br><span class=\"line\">        _logger.LogInformation(<span class=\"string\">&quot;Database migrated to latest version&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you now run the console, you’ll see some output showing the DDL instructions that are being run and if everything went as expected the database should now list both the EF Core migration history (used to track which migrations are applied) and business tables.</p>\n<img src=\"/2023/12/04/NET-%E2%80%94-DevOps-and-Entity-Framework-Core/04_db_tables.png\" class=\"\">\n\n<h2 id=\"Seeding-data\"><a href=\"#Seeding-data\" class=\"headerlink\" title=\"Seeding data\"></a>Seeding data</h2><p>Despite Entity Framework Core supporting data seeds when applying migrations, I think it is limited for production scenarios, like seeding different data based on environment or need to run some business logic, you will face limitations if using what EF Core offers.</p>\n<p>To solve this problem I usually create a specialized interface for seeding data into the migrator project, so developers may implement how many seed logic they need and even decide the order by which they are run.</p>\n<p>In the migrator project, create a new <code>IDataSeed</code> interface, inside a <code>DataSeeds</code> folder, with a <code>SeedAsync</code> method. As a small note, I like to pass arguments that can be used for auditing so I can use them on metadata columns, but they aren’t a requirement — just pass what makes sense to you.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IDataSeed</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">ValueTask <span class=\"title\">SeedAsync</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> seededBy,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        DateTimeOffset seededOn,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Let’s change the migrator to run all registered seeds after applying the migrations. Open the <code>Migrator.cs</code>, pass a collection of data seeds to the constructor and then, inside a transaction, execute each seed one by one. I recommend to flush changes after each seed to be sure they all see the data created by each other, even if some have to execute native SQL code for performance reasons.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Migrator</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    ILogger&lt;Migrator&gt; _logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    DatabaseContext _context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IEnumerable&lt;IDataSeed&gt; _dataSeeds</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> ValueTask <span class=\"title\">RunAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Migrating database to the latest version&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.MigrateAsync(ct);</span><br><span class=\"line\">        _logger.LogInformation(<span class=\"string\">&quot;Database migrated to latest version&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> seededOn = DateTimeOffset.UtcNow;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> tx = <span class=\"keyword\">await</span> _context.Database.BeginTransactionAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> dataSeed <span class=\"keyword\">in</span> _dataSeeds)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> _ = _logger.BeginScope(<span class=\"string\">&quot;DataSeed:&#123;DataSeed&#125;&quot;</span>, dataSeed.GetType().Name);</span><br><span class=\"line\"></span><br><span class=\"line\">            _logger.LogDebug(<span class=\"string\">&quot;Seeding data&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">await</span> dataSeed.SeedAsync(</span><br><span class=\"line\">                <span class=\"string\">&quot;Migrator&quot;</span>,</span><br><span class=\"line\">                seededOn,</span><br><span class=\"line\">                ct</span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">            _logger.LogInformation(<span class=\"string\">&quot;Data was seeded&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> tx.CommitAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>To test the implemented data seed logic, let’s assume we wanted to create test products for development and staging environments, but not in production. Create a new <code>TestProductsDataSeed</code> inside the <code>DataSeeds</code> folder and implement the <code>SeedAsync</code> method creating a bunch of products if they don’t exist and the migrator isn’t running in production.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TestProductsDataSeed</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    ILogger&lt;TestProductsDataSeed&gt; _logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IHostEnvironment _env,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    DatabaseContext _context</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) : IDataSeed</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> ValueTask <span class=\"title\">SeedAsync</span>(<span class=\"params\"><span class=\"built_in\">string</span> seededBy, DateTimeOffset seededOn, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_env.IsProduction())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _logger.LogInformation(<span class=\"string\">&quot;Running in production, no test data will be seeded&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> productsSet = _context.Set&lt;ProductEntity&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> testCodes = Enumerable.Range(<span class=\"number\">0</span>, <span class=\"number\">150</span>).Select(i =&gt; i.ToString(<span class=\"string\">&quot;D8&quot;</span>, NumberFormatInfo.InvariantInfo)).ToArray();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> existingCodes = <span class=\"keyword\">await</span> (</span><br><span class=\"line\">            <span class=\"keyword\">from</span> p <span class=\"keyword\">in</span> productsSet</span><br><span class=\"line\">            <span class=\"keyword\">where</span></span><br><span class=\"line\">                testCodes.Contains(p.Code)</span><br><span class=\"line\">            <span class=\"keyword\">select</span></span><br><span class=\"line\">                p.Code</span><br><span class=\"line\">        ).ToArrayAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> nonExistingProducts = testCodes.Where(c =&gt; !existingCodes.Contains(c)).Select(c =&gt; <span class=\"keyword\">new</span> ProductEntity</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Code = c,</span><br><span class=\"line\">            Name = <span class=\"string\">$&quot;Test product &#x27;<span class=\"subst\">&#123;c&#125;</span>&#x27;&quot;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> productsSet.AddRangeAsync(nonExistingProducts, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now open the <code>Program.cs</code> file and register the <code>TestProductsDataSeed</code> as a singleton. As a note, you can scan the assembly for classes implementing <code>IDataSeed</code> (with <a href=\"https://github.com/khellang/Scrutor\">Scrutor</a>, for example) but the order or registration will define the order by which they are run, and I’m assuming that will matter, but feel free to use an approach that works for your scenario.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IServiceCollection services,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IConfiguration configuration</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> connectionString = configuration.GetConnectionString(<span class=\"string\">&quot;ArticleDevOpsEfCore&quot;</span>);</span><br><span class=\"line\">    services.AddDbContext&lt;DatabaseContext&gt;(options =&gt; options.UseSqlServer(</span><br><span class=\"line\">        connectionString,</span><br><span class=\"line\">        o =&gt; o.MigrationsAssembly(<span class=\"keyword\">typeof</span>(Program).Assembly.FullName)</span><br><span class=\"line\">    ), ServiceLifetime.Singleton);</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddSingleton&lt;Migrator&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddSingleton&lt;IDataSeed, TestProductsDataSeed&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If we now run the migrator the products table should have test data.</p>\n<img src=\"/2023/12/04/NET-%E2%80%94-DevOps-and-Entity-Framework-Core/05_db_seeded.png\" class=\"\">\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article I explained how DevOps processes can be simplified by implementing a console application that knows how to apply Entity Framework Core migrations and seed initial data to a database, to be introduced into de Continuous Delivery pipeline.</p>\n<p>The implementation using <code>Microsoft.Extensions.Hosting</code> is very straightforward and simple while providing a more tight integration against the model definitions and with improved logging, so it certainly is an approach to consider.</p>\n<p>Even with small tweaks, in can be improved to whatever scenarios you may face, like forcing a backup before applying the migrations and reverting to it if something fails, perfect for on-prem solutions.</p>\n<p><a href=\"https://github.com/gravity00/article-devops-efcore\">Once again, I have a working example on GitHub, so feel free to give it a good look.</a></p>\n",
            "tags": [
                "dotnetcore",
                "csharp",
                "efcore"
            ]
        },
        {
            "id": "https://code-corner.dev/2023/11/09/NET-%E2%80%94-ToList-vs-ToArray/",
            "url": "https://code-corner.dev/2023/11/09/NET-%E2%80%94-ToList-vs-ToArray/",
            "title": ".NET — ToList vs ToArray",
            "date_published": "2023-11-09T00:00:00.000Z",
            "content_html": "<p>Ever since Microsoft introduced Language Integrated Query to the .NET framework (also known as LINQ) developers have been using it extensively to work with collections.</p>\n<p>From a simple filter, to an aggregation, to a transformation, LINQ is the technology of choice to keep code clean and readable. We even have providers that convert LINQ instructions into SQL commands that will be run in some database.</p>\n<p>In this article I’m going to compare the performance of <code>ToList</code> versus <code>ToArray</code> when creating short lived collections. I’m also going to execute the test in different versions of the framework (.NET Framework 4.8, .NET 7 and .NET 8) so we can also see how much the performance have improved over the years.</p>\n<hr>\n<p>One of the coding guidelines for the applications I manage dictates the following:</p>\n<p><strong>Always use <code>IReadOnlyCollection</code> instead of <code>IEnumerable</code> when passing collections between application layers and <code>ToArray</code> should be used to force the enumeration.</strong></p>\n<p>Because we developers are curious by default and need to understand why things are implemented in a given way, every time we have a new team member, that coding guideline usually leads to the following conversation:</p>\n<p><strong>Q:</strong> <em>Why do we use <code>IReadOnlyCollection</code> in POCOs instead of <code>IEnumerable</code>?</em><br><strong>A:</strong> <em>Well, because we want the contracts to clearly state the collection is in memory, hence no multiple enumerations will occur, and any mapping problems will happen in the corresponding layer.</em><br><strong>Q:</strong> <em>Fair enough, but why <code>ToArray</code>? That interface is implemented by arrays and lists, I could be using <code>ToList</code> and have the same result.</em><br><strong>A:</strong> <em>The result is the same, that’s a fact, but <code>ToArray</code> is usually faster and more memory efficient than <code>ToList</code>, and since it’s a short lived collection that won’t be mutated, the former is preferred.</em></p>\n<p>I’m going to use the well known C# library <code>BenchmarkDotNet</code> to run the tests and the environment will be the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BenchmarkDotNet v0.13.10, Windows 11 (10.0.22621.2428/22H2/2022Update/SunValley2)</span><br><span class=\"line\">AMD Ryzen 7 3700X, 1 CPU, 16 logical and 8 physical cores</span><br><span class=\"line\">.NET SDK 8.0.100-rc.2.23502.2</span><br><span class=\"line\">  [Host]             : .NET 8.0.0 (8.0.23.47906), X64 RyuJIT AVX2</span><br><span class=\"line\">  .NET 5.0           : .NET 5.0.17 (5.0.1722.21314), X64 RyuJIT AVX2</span><br><span class=\"line\">  .NET 7.0           : .NET 7.0.11 (7.0.1123.42427), X64 RyuJIT AVX2</span><br><span class=\"line\">  .NET 8.0           : .NET 8.0.0 (8.0.23.47906), X64 RyuJIT AVX2</span><br><span class=\"line\">  .NET Framework 4.8 : .NET Framework 4.8.1 (4.8.9181.0), X64 RyuJIT VectorSize=256</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Performance-test\"><a href=\"#Performance-test\" class=\"headerlink\" title=\"Performance test\"></a>Performance test</h1><p>The test consists in the creation of a collection that holds random integers, being the size defined by a parameter. To ensure the randomness does not affect the results, the values are cached into an array and before invoking either <code>ToArray</code> or <code>ToList</code> it is converted into a new <code>IEnumerable</code>, not just a cast that could lead to internal optimizations.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">SimpleJob(RuntimeMoniker.Net48)</span>]</span><br><span class=\"line\">[<span class=\"meta\">SimpleJob(RuntimeMoniker.Net70)</span>]</span><br><span class=\"line\">[<span class=\"meta\">SimpleJob(RuntimeMoniker.Net80)</span>]</span><br><span class=\"line\">[<span class=\"meta\">MemoryDiagnoser</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ToListVsToArray</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Params(10, 100, 1000, 10000, 100000)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span>[] _items;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">GlobalSetup</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Setup</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> random = <span class=\"keyword\">new</span> Random(<span class=\"number\">123</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        _items = Enumerable.Range(<span class=\"number\">0</span>, Size).Select(_ =&gt; random.Next()).ToArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Benchmark</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span>[] <span class=\"title\">ToArray</span>()</span> =&gt; CreateItemsEnumerable().ToArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Benchmark</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;<span class=\"built_in\">int</span>&gt; <span class=\"title\">ToList</span>()</span> =&gt; CreateItemsEnumerable().ToList();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> IEnumerable&lt;<span class=\"built_in\">int</span>&gt; <span class=\"title\">CreateItemsEnumerable</span>()</span> =&gt; _items.Select(e =&gt; e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Performance-results\"><a href=\"#Performance-results\" class=\"headerlink\" title=\"Performance results\"></a>Performance results</h1><p>Because we want to decide, for a given application, between ToArray or ToList based on performance, let’s first analyze the results for each framework version.</p>\n<h2 id=\"NET-Framework-4-8\"><a href=\"#NET-Framework-4-8\" class=\"headerlink\" title=\".NET Framework 4.8\"></a>.NET Framework 4.8</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Method  | Size   | Mean          | Error        | StdDev       | Gen0     | Gen1     | Gen2     | Allocated |</span><br><span class=\"line\">|-------- |------- |--------------:|-------------:|-------------:|---------:|---------:|---------:|----------:|</span><br><span class=\"line\">| ToArray | 10     |     166.31 ns |     1.013 ns |     0.947 ns |   0.0484 |        - |        - |     305 B |</span><br><span class=\"line\">| ToList  | 10     |     193.17 ns |     1.248 ns |     1.168 ns |   0.0446 |        - |        - |     281 B |</span><br><span class=\"line\">| ToArray | 100    |     965.26 ns |     8.436 ns |     7.479 ns |   0.2594 |        - |        - |    1637 B |</span><br><span class=\"line\">| ToList  | 100    |   1,032.99 ns |     4.144 ns |     3.876 ns |   0.1984 |        - |        - |    1252 B |</span><br><span class=\"line\">| ToArray | 1000   |   8,377.61 ns |    39.382 ns |    36.838 ns |   1.9836 |        - |        - |   12509 B |</span><br><span class=\"line\">| ToList  | 1000   |   8,665.62 ns |    57.777 ns |    54.045 ns |   1.3428 |   0.0153 |        - |    8514 B |</span><br><span class=\"line\">| ToArray | 10000  |  81,576.33 ns |   923.478 ns |   863.822 ns |  26.9775 |   5.3711 |        - |  171755 B |</span><br><span class=\"line\">| ToList  | 10000  |  83,476.64 ns |   410.694 ns |   342.948 ns |  20.7520 |   4.0283 |        - |  131606 B |</span><br><span class=\"line\">| ToArray | 100000 | 830,624.20 ns | 4,536.991 ns | 4,021.924 ns | 399.4141 | 399.4141 | 399.4141 | 1452144 B |</span><br><span class=\"line\">| ToList  | 100000 | 945,017.84 ns | 7,921.731 ns | 6,615.004 ns | 285.1563 | 285.1563 | 285.1563 | 1051184 B |</span><br></pre></td></tr></table></figure>\n\n<p>The <code>ToArray</code> method is, on average, 10% faster than <code>ToList</code> in .NET Framework 4.8.</p>\n<h2 id=\"NET-7\"><a href=\"#NET-7\" class=\"headerlink\" title=\".NET 7\"></a>.NET 7</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Method  | Size   | Mean          | Error        | StdDev       | Gen0     | Gen1     | Gen2     | Allocated |</span><br><span class=\"line\">|-------- |------- |--------------:|-------------:|-------------:|---------:|---------:|---------:|----------:|</span><br><span class=\"line\">| ToArray | 10     |      50.06 ns |     0.916 ns |     1.254 ns |   0.0134 |        - |        - |     112 B |</span><br><span class=\"line\">| ToList  | 10     |      56.20 ns |     1.022 ns |     0.906 ns |   0.0172 |        - |        - |     144 B |</span><br><span class=\"line\">| ToArray | 100    |     231.18 ns |     1.597 ns |     1.494 ns |   0.0563 |        - |        - |     472 B |</span><br><span class=\"line\">| ToList  | 100    |     261.38 ns |     2.523 ns |     2.236 ns |   0.0601 |        - |        - |     504 B |</span><br><span class=\"line\">| ToArray | 1000   |   2,029.47 ns |    28.534 ns |    25.295 ns |   0.4845 |        - |        - |    4072 B |</span><br><span class=\"line\">| ToList  | 1000   |   2,291.63 ns |    13.328 ns |    11.815 ns |   0.4883 |        - |        - |    4104 B |</span><br><span class=\"line\">| ToArray | 10000  |  17,322.99 ns |   176.548 ns |   165.143 ns |   4.7607 |        - |        - |   40072 B |</span><br><span class=\"line\">| ToList  | 10000  |  22,781.69 ns |   200.720 ns |   177.933 ns |   4.7607 |        - |        - |   40104 B |</span><br><span class=\"line\">| ToArray | 100000 | 306,976.29 ns | 2,525.016 ns | 2,361.901 ns | 124.5117 | 124.5117 | 124.5117 |  400114 B |</span><br><span class=\"line\">| ToList  | 100000 | 337,437.79 ns | 2,441.397 ns | 2,283.684 ns | 124.5117 | 124.5117 | 124.5117 |  400146 B |</span><br></pre></td></tr></table></figure>\n\n<p>The <code>ToArray</code> method is, on average, 13% faster than <code>ToList</code> in .NET 7.</p>\n<h2 id=\"NET-8\"><a href=\"#NET-8\" class=\"headerlink\" title=\".NET 8\"></a>.NET 8</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Method  | Size   | Mean          | Error        | StdDev       | Gen0     | Gen1     | Gen2     | Allocated |</span><br><span class=\"line\">|-------- |------- |--------------:|-------------:|-------------:|---------:|---------:|---------:|----------:|</span><br><span class=\"line\">| ToArray | 10     |      33.89 ns |     0.727 ns |     0.778 ns |   0.0134 |        - |        - |     112 B |</span><br><span class=\"line\">| ToList  | 10     |      40.17 ns |     0.668 ns |     0.625 ns |   0.0172 |        - |        - |     144 B |</span><br><span class=\"line\">| ToArray | 100    |      90.30 ns |     1.104 ns |     0.922 ns |   0.0564 |        - |        - |     472 B |</span><br><span class=\"line\">| ToList  | 100    |      97.87 ns |     1.257 ns |     1.176 ns |   0.0602 |        - |        - |     504 B |</span><br><span class=\"line\">| ToArray | 1000   |     615.97 ns |     6.819 ns |     5.695 ns |   0.4864 |        - |        - |    4072 B |</span><br><span class=\"line\">| ToList  | 1000   |     615.44 ns |     5.195 ns |     4.056 ns |   0.4902 |        - |        - |    4104 B |</span><br><span class=\"line\">| ToArray | 10000  |   5,335.01 ns |    86.179 ns |    76.395 ns |   4.7607 |        - |        - |   40072 B |</span><br><span class=\"line\">| ToList  | 10000  |   5,427.51 ns |    86.063 ns |    80.503 ns |   4.7836 |        - |        - |   40104 B |</span><br><span class=\"line\">| ToArray | 100000 | 169,711.96 ns | 2,405.080 ns | 2,249.713 ns | 124.7559 | 124.7559 | 124.7559 |  400114 B |</span><br><span class=\"line\">| ToList  | 100000 | 162,577.72 ns | 1,634.437 ns | 1,364.829 ns | 124.7559 | 124.7559 | 124.7559 |  400146 B |</span><br></pre></td></tr></table></figure>\n\n<p>The <code>ToArray</code> method is, by a small margin, faster than <code>ToList</code> in .NET 8, being 4% slower on larger collections.</p>\n<h1 id=\"NET-performance-evolution\"><a href=\"#NET-performance-evolution\" class=\"headerlink\" title=\".NET performance evolution\"></a>.NET performance evolution</h1><p>Because we have results for each framework version, let’s compare and see how .NET performance has evolved over the years.</p>\n<h2 id=\"ToArray\"><a href=\"#ToArray\" class=\"headerlink\" title=\"ToArray\"></a>ToArray</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Runtime            | Size   | Mean          | Error        | StdDev       | Gen0     | Gen1     | Gen2     | Allocated |</span><br><span class=\"line\">|------------------- |------- |--------------:|-------------:|-------------:|---------:|---------:|---------:|----------:|</span><br><span class=\"line\">| .NET Framework 4.8 | 10     |     166.31 ns |     1.013 ns |     0.947 ns |   0.0484 |        - |        - |     305 B |</span><br><span class=\"line\">| .NET 7.0           | 10     |      50.06 ns |     0.916 ns |     1.254 ns |   0.0134 |        - |        - |     112 B |</span><br><span class=\"line\">| .NET 8.0           | 10     |      33.89 ns |     0.727 ns |     0.778 ns |   0.0134 |        - |        - |     112 B |</span><br><span class=\"line\">| .NET Framework 4.8 | 100    |     965.26 ns |     8.436 ns |     7.479 ns |   0.2594 |        - |        - |    1637 B |</span><br><span class=\"line\">| .NET 7.0           | 100    |     231.18 ns |     1.597 ns |     1.494 ns |   0.0563 |        - |        - |     472 B |</span><br><span class=\"line\">| .NET 8.0           | 100    |      90.30 ns |     1.104 ns |     0.922 ns |   0.0564 |        - |        - |     472 B |</span><br><span class=\"line\">| .NET Framework 4.8 | 1000   |   8,377.61 ns |    39.382 ns |    36.838 ns |   1.9836 |        - |        - |   12509 B |</span><br><span class=\"line\">| .NET 7.0           | 1000   |   2,029.47 ns |    28.534 ns |    25.295 ns |   0.4845 |        - |        - |    4072 B |</span><br><span class=\"line\">| .NET 8.0           | 1000   |     615.97 ns |     6.819 ns |     5.695 ns |   0.4864 |        - |        - |    4072 B |</span><br><span class=\"line\">| .NET Framework 4.8 | 10000  |  81,576.33 ns |   923.478 ns |   863.822 ns |  26.9775 |   5.3711 |        - |  171755 B |</span><br><span class=\"line\">| .NET 7.0           | 10000  |  17,322.99 ns |   176.548 ns |   165.143 ns |   4.7607 |        - |        - |   40072 B |</span><br><span class=\"line\">| .NET 8.0           | 10000  |   5,335.01 ns |    86.179 ns |    76.395 ns |   4.7607 |        - |        - |   40072 B |</span><br><span class=\"line\">| .NET Framework 4.8 | 100000 | 830,624.20 ns | 4,536.991 ns | 4,021.924 ns | 399.4141 | 399.4141 | 399.4141 | 1452144 B |</span><br><span class=\"line\">| .NET 7.0           | 100000 | 306,976.29 ns | 2,525.016 ns | 2,361.901 ns | 124.5117 | 124.5117 | 124.5117 |  400114 B |</span><br><span class=\"line\">| .NET 8.0           | 100000 | 169,711.96 ns | 2,405.080 ns | 2,249.713 ns | 124.7559 | 124.7559 | 124.7559 |  400114 B |</span><br></pre></td></tr></table></figure>\n\n<p>In some cases being 90% faster than .NET Framework 4.8 and more than 50% faster than .NET 7 while allocating less memory, .NET 8 is a clear winner.</p>\n<h2 id=\"ToList\"><a href=\"#ToList\" class=\"headerlink\" title=\"ToList\"></a>ToList</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Runtime            | Size   | Mean          | Error        | StdDev       | Gen0     | Gen1     | Gen2     | Allocated |</span><br><span class=\"line\">|------------------- |------- |--------------:|-------------:|-------------:|---------:|---------:|---------:|----------:|</span><br><span class=\"line\">| .NET Framework 4.8 | 10     |     193.17 ns |     1.248 ns |     1.168 ns |   0.0446 |        - |        - |     281 B |</span><br><span class=\"line\">| .NET 7.0           | 10     |      56.20 ns |     1.022 ns |     0.906 ns |   0.0172 |        - |        - |     144 B |</span><br><span class=\"line\">| .NET 8.0           | 10     |      40.17 ns |     0.668 ns |     0.625 ns |   0.0172 |        - |        - |     144 B |</span><br><span class=\"line\">| .NET Framework 4.8 | 100    |   1,032.99 ns |     4.144 ns |     3.876 ns |   0.1984 |        - |        - |    1252 B |</span><br><span class=\"line\">| .NET 7.0           | 100    |     261.38 ns |     2.523 ns |     2.236 ns |   0.0601 |        - |        - |     504 B |</span><br><span class=\"line\">| .NET 8.0           | 100    |      97.87 ns |     1.257 ns |     1.176 ns |   0.0602 |        - |        - |     504 B |</span><br><span class=\"line\">| .NET Framework 4.8 | 1000   |   8,665.62 ns |    57.777 ns |    54.045 ns |   1.3428 |   0.0153 |        - |    8514 B |</span><br><span class=\"line\">| .NET 7.0           | 1000   |   2,291.63 ns |    13.328 ns |    11.815 ns |   0.4883 |        - |        - |    4104 B |</span><br><span class=\"line\">| .NET 8.0           | 1000   |     615.44 ns |     5.195 ns |     4.056 ns |   0.4902 |        - |        - |    4104 B |</span><br><span class=\"line\">| .NET Framework 4.8 | 10000  |  83,476.64 ns |   410.694 ns |   342.948 ns |  20.7520 |   4.0283 |        - |  131606 B |</span><br><span class=\"line\">| .NET 7.0           | 10000  |  22,781.69 ns |   200.720 ns |   177.933 ns |   4.7607 |        - |        - |   40104 B |</span><br><span class=\"line\">| .NET 8.0           | 10000  |   5,427.51 ns |    86.063 ns |    80.503 ns |   4.7836 |        - |        - |   40104 B |</span><br><span class=\"line\">| .NET Framework 4.8 | 100000 | 945,017.84 ns | 7,921.731 ns | 6,615.004 ns | 285.1563 | 285.1563 | 285.1563 | 1051184 B |</span><br><span class=\"line\">| .NET 7.0           | 100000 | 337,437.79 ns | 2,441.397 ns | 2,283.684 ns | 124.5117 | 124.5117 | 124.5117 |  400146 B |</span><br><span class=\"line\">| .NET 8.0           | 100000 | 162,577.72 ns | 1,634.437 ns | 1,364.829 ns | 124.7559 | 124.7559 | 124.7559 |  400146 B |</span><br></pre></td></tr></table></figure>\n\n<p>Once again, .NET 8 takes the gold!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article we compared the performance of <code>ToArray</code> versus <code>ToList</code> and concluded the former performs better most of the time by being faster and more memory efficient, so consider using it when creating short lived collections were enumeration must be forced.</p>\n<p>We also concluded that .NET 8, the version still to be released, will bring fantastic performance upgrades in this regards. Not only it is significantly faster than the older versions, it also brings <code>ToArray</code> and <code>ToList</code> so close that it’s almost indifferent which method should be used.</p>\n",
            "tags": [
                "dotnetcore",
                "csharp",
                "dotnet",
                "linq"
            ]
        },
        {
            "id": "https://code-corner.dev/2023/11/08/NET-8-%E2%80%94-FrozenDictionary-performance/",
            "url": "https://code-corner.dev/2023/11/08/NET-8-%E2%80%94-FrozenDictionary-performance/",
            "title": ".NET 8 — FrozenDictionary performance",
            "date_published": "2023-11-08T00:00:00.000Z",
            "content_html": "<p>Microsoft’s upcoming release of .NET 8 will introduce a lot of <a href=\"https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-8\">new features</a> that will certainly be welcomed by the developer community, making it an even stronger framework for application development.</p>\n<p>One of those features is the namespace <code>System.Collections.Frozen</code> that introduces two new collections: <code>FrozenDictionary</code> and <code>FrozenSet</code>. These new types, <a href=\"https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-8#performance-focused-types\">as stated by Microsoft</a>, are focused in reducing the time of read operations at the expense of increasing initialization time of immutable collections. This makes them perfect for shared data that only needs to be populated a single time, like application configurations or cached data in-memory.</p>\n<p>In this article I’m going to benchmark the performance gains that can be achieved by using a <code>FrozenDictionary</code> instead of a <code>Dictionary</code> or an <code>ImmutableDictionary</code> to store shared data.</p>\n<p>I’m going to use the well known C# library <code>BenchmarkDotNet</code> to run the tests and the environment will be the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BenchmarkDotNet v0.13.10, Windows 11 (10.0.22621.2428/22H2/2022Update/SunValley2)</span><br><span class=\"line\">AMD Ryzen 7 3700X, 1 CPU, 16 logical and 8 physical cores</span><br><span class=\"line\">.NET SDK 8.0.100-rc.2.23502.2</span><br><span class=\"line\">  [Host]   : .NET 8.0.0 (8.0.23.47906), X64 RyuJIT AVX2</span><br><span class=\"line\">  .NET 8.0 : .NET 8.0.0 (8.0.23.47906), X64 RyuJIT AVX2</span><br></pre></td></tr></table></figure>\n\n<p>For the tests, I’m going to benchmark the method <code>TryGetValue</code>, with one for 100% key hits and another for 100% key misses, which should give the performance for both perfect and worse scenarios. The collections <code>FrozenDictionary</code>, <code>ImmutableDictionary</code> and <code>Dictionary</code> will be used with a parameter setting the size.</p>\n<hr>\n<h1 id=\"Scenario-1-—-all-keys-are-found\"><a href=\"#Scenario-1-—-all-keys-are-found\" class=\"headerlink\" title=\"Scenario 1 — all keys are found\"></a>Scenario 1 — all keys are found</h1><p>For this scenario I’m going to initialize a collection of unique keys, populate all three dictionaries accordingly and then run the <code>TryGetValue</code> for all keys returning the latest found using the <code>Dictionary</code> test as the baseline.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">SimpleJob(RuntimeMoniker.Net80)</span>]</span><br><span class=\"line\">[<span class=\"meta\">MemoryDiagnoser</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TryGetValueAllKeysFound</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Params(10, 100, 1000, 10000, 100000)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span>[] _keys;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dictionary&lt;<span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>&gt; _dictionary;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImmutableDictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>&gt; _immutableDictionary;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FrozenDictionary&lt;<span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>&gt; _frozenDictionary;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">GlobalSetup</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Setup</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> random = <span class=\"keyword\">new</span> Random(<span class=\"number\">123</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> uniqueKeys = <span class=\"keyword\">new</span> HashSet&lt;<span class=\"built_in\">int</span>&gt;(Size);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; Size; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> key;</span><br><span class=\"line\">            <span class=\"keyword\">do</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                key = random.Next();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (uniqueKeys.Contains(key));</span><br><span class=\"line\"></span><br><span class=\"line\">            uniqueKeys.Add(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        _dictionary = uniqueKeys.Select((key, idx) =&gt; (key, idx)).ToDictionary(e =&gt; e.key, e =&gt; e.idx);</span><br><span class=\"line\">        _immutableDictionary = uniqueKeys.Select((key, idx) =&gt; (key, idx)).ToImmutableDictionary(e =&gt; e.key, e =&gt; e.idx);</span><br><span class=\"line\">        _frozenDictionary = uniqueKeys.Select((key, idx) =&gt; (key, idx)).ToFrozenDictionary(e =&gt; e.key, e =&gt; e.idx);</span><br><span class=\"line\"></span><br><span class=\"line\">        _keys = uniqueKeys.ToArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Benchmark(Baseline = true)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">Dictionary</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> latestValue = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> _keys)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_dictionary.TryGetValue(key, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> <span class=\"keyword\">value</span>))</span><br><span class=\"line\">                latestValue = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> latestValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Benchmark</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">ImmutableDictionary</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> latestValue = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> _keys)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_immutableDictionary.TryGetValue(key, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> <span class=\"keyword\">value</span>))</span><br><span class=\"line\">                latestValue = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> latestValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Benchmark</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">FrozenDictionary</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> latestValue = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> _keys)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_frozenDictionary.TryGetValue(key, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> <span class=\"keyword\">value</span>))</span><br><span class=\"line\">                latestValue = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> latestValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The benchmark results are the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Method              | Size   | Mean             | Error          | StdDev        | Ratio | RatioSD | Allocated | Alloc Ratio |</span><br><span class=\"line\">|-------------------- |------- |-----------------:|---------------:|--------------:|------:|--------:|----------:|------------:|</span><br><span class=\"line\">| Dictionary          | 10     |         46.29 ns |       0.300 ns |      0.251 ns |  1.00 |    0.00 |         - |          NA |</span><br><span class=\"line\">| ImmutableDictionary | 10     |         35.53 ns |       0.320 ns |      0.283 ns |  0.77 |    0.01 |         - |          NA |</span><br><span class=\"line\">| FrozenDictionary    | 10     |         85.47 ns |       1.779 ns |      5.244 ns |  1.86 |    0.13 |         - |          NA |</span><br><span class=\"line\">|                     |        |                  |                |               |       |         |           |             |</span><br><span class=\"line\">| Dictionary          | 100    |        470.00 ns |       2.253 ns |      2.108 ns |  1.00 |    0.00 |         - |          NA |</span><br><span class=\"line\">| ImmutableDictionary | 100    |        736.28 ns |      14.637 ns |     31.820 ns |  1.57 |    0.07 |         - |          NA |</span><br><span class=\"line\">| FrozenDictionary    | 100    |        263.18 ns |       2.898 ns |      2.569 ns |  0.56 |    0.01 |         - |          NA |</span><br><span class=\"line\">|                     |        |                  |                |               |       |         |           |             |</span><br><span class=\"line\">| Dictionary          | 1000   |      4,993.04 ns |      27.440 ns |     22.913 ns |  1.00 |    0.00 |         - |          NA |</span><br><span class=\"line\">| ImmutableDictionary | 1000   |     29,174.27 ns |     493.738 ns |    461.843 ns |  5.85 |    0.10 |         - |          NA |</span><br><span class=\"line\">| FrozenDictionary    | 1000   |      2,841.24 ns |      30.283 ns |     28.326 ns |  0.57 |    0.01 |         - |          NA |</span><br><span class=\"line\">|                     |        |                  |                |               |       |         |           |             |</span><br><span class=\"line\">| Dictionary          | 10000  |     77,394.04 ns |     295.972 ns |    247.150 ns |  1.00 |    0.00 |         - |          NA |</span><br><span class=\"line\">| ImmutableDictionary | 10000  |    630,488.18 ns |   3,040.379 ns |  2,695.216 ns |  8.15 |    0.05 |       1 B |          NA |</span><br><span class=\"line\">| FrozenDictionary    | 10000  |     43,957.48 ns |     274.398 ns |    256.672 ns |  0.57 |    0.00 |         - |          NA |</span><br><span class=\"line\">|                     |        |                  |                |               |       |         |           |             |</span><br><span class=\"line\">| Dictionary          | 100000 |  1,126,207.11 ns |   5,941.069 ns |  5,266.603 ns |  1.00 |    0.00 |       1 B |        1.00 |</span><br><span class=\"line\">| ImmutableDictionary | 100000 | 11,194,516.67 ns | 106,626.230 ns | 99,738.242 ns |  9.94 |    0.12 |      12 B |       12.00 |</span><br><span class=\"line\">| FrozenDictionary    | 100000 |    806,004.77 ns |   5,670.946 ns |  5,304.606 ns |  0.72 |    0.01 |       1 B |        1.00 |</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, except for very small collections, the <code>FrozenDictionary</code> is about 43% faster than using a <code>Dictionary</code>, much faster than an <code>ImmutableDictionary</code>, without allocating more memory.</p>\n<h1 id=\"Scenario-2-—-no-keys-are-found\"><a href=\"#Scenario-2-—-no-keys-are-found\" class=\"headerlink\" title=\"Scenario 2 — no keys are found\"></a>Scenario 2 — no keys are found</h1><p>For this scenario I’m going to initialize a collection of unique keys, populate all three dictionaries accordingly, convert all keys to negative numbers to ensure the lookups are all different but will never match, and then run the <code>TryGetValue</code> for all returning the latest found using the <code>Dictionary</code> test as the baseline.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">SimpleJob(RuntimeMoniker.Net80)</span>]</span><br><span class=\"line\">[<span class=\"meta\">MemoryDiagnoser</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TryGetValueNoKeysFound</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Params(10, 100, 1000, 10000, 100000)</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Size;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span>[] _keys;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dictionary&lt;<span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>&gt; _dictionary;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImmutableDictionary&lt;<span class=\"built_in\">int</span>,<span class=\"built_in\">int</span>&gt; _immutableDictionary;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FrozenDictionary&lt;<span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>&gt; _frozenDictionary;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">GlobalSetup</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Setup</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> random = <span class=\"keyword\">new</span> Random(<span class=\"number\">123</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> uniqueKeys = <span class=\"keyword\">new</span> HashSet&lt;<span class=\"built_in\">int</span>&gt;(Size);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; Size; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span> key;</span><br><span class=\"line\">            <span class=\"keyword\">do</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                key = random.Next();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">while</span> (uniqueKeys.Contains(key));</span><br><span class=\"line\"></span><br><span class=\"line\">            uniqueKeys.Add(key);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        _dictionary = uniqueKeys.Select((key, idx) =&gt; (key, idx)).ToDictionary(e =&gt; e.key, e =&gt; e.idx);</span><br><span class=\"line\">        _immutableDictionary = uniqueKeys.Select((key, idx) =&gt; (key, idx)).ToImmutableDictionary(e =&gt; e.key, e =&gt; e.idx);</span><br><span class=\"line\">        _frozenDictionary = uniqueKeys.Select((key, idx) =&gt; (key, idx)).ToFrozenDictionary(e =&gt; e.key, e =&gt; e.idx);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// convert all keys to negative numbers to ensure no matches</span></span><br><span class=\"line\">        _keys = uniqueKeys.Select(key =&gt; -key).ToArray();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Benchmark(Baseline = true)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">Dictionary</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> latestValue = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> _keys)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_dictionary.TryGetValue(key, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> <span class=\"keyword\">value</span>))</span><br><span class=\"line\">                latestValue = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> latestValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Benchmark</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">ImmutableDictionary</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> latestValue = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> _keys)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_immutableDictionary.TryGetValue(key, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> <span class=\"keyword\">value</span>))</span><br><span class=\"line\">                latestValue = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> latestValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">Benchmark</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">FrozenDictionary</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> latestValue = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> _keys)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (_frozenDictionary.TryGetValue(key, <span class=\"keyword\">out</span> <span class=\"keyword\">var</span> <span class=\"keyword\">value</span>))</span><br><span class=\"line\">                latestValue = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> latestValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The benchmark results are the following:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Method              | Size   | Mean            | Error        | StdDev       | Ratio | RatioSD | Allocated | Alloc Ratio |</span><br><span class=\"line\">|-------------------- |------- |----------------:|-------------:|-------------:|------:|--------:|----------:|------------:|</span><br><span class=\"line\">| Dictionary          | 10     |        37.13 ns |     0.740 ns |     0.823 ns |  1.00 |    0.00 |         - |          NA |</span><br><span class=\"line\">| ImmutableDictionary | 10     |        33.81 ns |     0.629 ns |     0.588 ns |  0.91 |    0.03 |         - |          NA |</span><br><span class=\"line\">| FrozenDictionary    | 10     |        19.16 ns |     0.129 ns |     0.114 ns |  0.51 |    0.01 |         - |          NA |</span><br><span class=\"line\">|                     |        |                 |              |              |       |         |           |             |</span><br><span class=\"line\">| Dictionary          | 100    |       396.11 ns |     2.697 ns |     2.522 ns |  1.00 |    0.00 |         - |          NA |</span><br><span class=\"line\">| ImmutableDictionary | 100    |       488.48 ns |     2.480 ns |     2.198 ns |  1.23 |    0.01 |         - |          NA |</span><br><span class=\"line\">| FrozenDictionary    | 100    |       218.70 ns |     1.530 ns |     1.431 ns |  0.55 |    0.00 |         - |          NA |</span><br><span class=\"line\">|                     |        |                 |              |              |       |         |           |             |</span><br><span class=\"line\">| Dictionary          | 1000   |     4,019.84 ns |    38.187 ns |    35.720 ns |  1.00 |    0.00 |         - |          NA |</span><br><span class=\"line\">| ImmutableDictionary | 1000   |     6,708.41 ns |    14.893 ns |    13.931 ns |  1.67 |    0.02 |         - |          NA |</span><br><span class=\"line\">| FrozenDictionary    | 1000   |     2,372.01 ns |    15.113 ns |    13.398 ns |  0.59 |    0.00 |         - |          NA |</span><br><span class=\"line\">|                     |        |                 |              |              |       |         |           |             |</span><br><span class=\"line\">| Dictionary          | 10000  |    83,803.51 ns |   232.996 ns |   206.545 ns |  1.00 |    0.00 |         - |          NA |</span><br><span class=\"line\">| ImmutableDictionary | 10000  |    88,593.46 ns |   763.681 ns |   714.347 ns |  1.06 |    0.01 |         - |          NA |</span><br><span class=\"line\">| FrozenDictionary    | 10000  |    29,071.40 ns |    85.885 ns |    76.135 ns |  0.35 |    0.00 |         - |          NA |</span><br><span class=\"line\">|                     |        |                 |              |              |       |         |           |             |</span><br><span class=\"line\">| Dictionary          | 100000 | 1,293,765.26 ns | 3,587.916 ns | 3,356.139 ns |  1.00 |    0.00 |       1 B |        1.00 |</span><br><span class=\"line\">| ImmutableDictionary | 100000 | 1,145,366.16 ns | 4,726.433 ns | 4,421.108 ns |  0.89 |    0.00 |       1 B |        1.00 |</span><br><span class=\"line\">| FrozenDictionary    | 100000 |   475,573.09 ns | 2,445.081 ns | 2,167.501 ns |  0.37 |    0.00 |         - |        0.00 |</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the <code>FrozenDictionary</code> is on average 47% faster than a <code>Dictionary</code> for all sizes and even uses less memory for bigger collections. The <code>ImmutableDictionary</code>, once again, is the worse performer.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Microsoft with the release of .NET 8 is, once again, providing a lot of performance improvements that developers can use in their applications.</p>\n<p>For this article in particular, if you are storing key-value reference data that is immutable, populated a single time and can be shared across your application, the <code>FrozenDictionary</code> may be a good option if performance is of concern.</p>\n<p>Soon I’ll also do a benchmark for <code>FrozenSet</code> which I expect should demonstrate similar results.</p>\n",
            "tags": [
                "dotnetcore",
                "csharp"
            ]
        },
        {
            "id": "https://code-corner.dev/2023/11/04/Understanding-Flag-Enums-in-C/",
            "url": "https://code-corner.dev/2023/11/04/Understanding-Flag-Enums-in-C/",
            "title": "Understanding Flag Enums in C#",
            "date_published": "2023-11-04T00:00:00.000Z",
            "content_html": "<p>Enumeration types, also known as enum types, are widely used by C# developers to improve code readability and maintainability, by offering a standardized way to represent a set of related numeric constants. Good examples are days of the week, seasons, or a predefined range of colors.</p>\n<p>In this article I’m going to talk about flag enums, which are a special case, that can be used to represent a combination of binary choices into a single value using bitwise operations.</p>\n<hr>\n<p>Imagine you were creating a simple alarm application were you could set alarms for a given time and weekdays. If you were using a simple enum, the <code>Alarm</code> class would need a collection to store the selected days, ideally an hash set to prevent duplicates and faster lookups. It would look similar to this:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">enum</span> Weekday</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    None = <span class=\"number\">0</span>,</span><br><span class=\"line\">    Sunday,</span><br><span class=\"line\">    Monday,</span><br><span class=\"line\">    Tuesday,</span><br><span class=\"line\">    Wednesday,</span><br><span class=\"line\">    Thursday,</span><br><span class=\"line\">    Friday,</span><br><span class=\"line\">    Saturday,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Alarm</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ICollection&lt;Weekday&gt; Weekdays &#123; <span class=\"keyword\">get</span>; &#125; = <span class=\"keyword\">new</span> HashSet&lt;Weekday&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TimeOnly Time &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>An an example, if you needed to create an alarm to set off at 7 a.m. only during workdays and needed to execute some conditional logic depending your selection, the code could be as follows:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> alarm = <span class=\"keyword\">new</span> Alarm</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Time = <span class=\"keyword\">new</span> TimeOnly(<span class=\"number\">07</span>, <span class=\"number\">00</span>, <span class=\"number\">00</span>),</span><br><span class=\"line\">    Weekdays =</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Weekday.Monday,</span><br><span class=\"line\">        Weekday.Tuesday,</span><br><span class=\"line\">        Weekday.Wednesday,</span><br><span class=\"line\">        Weekday.Thursday,</span><br><span class=\"line\">        Weekday.Friday,</span><br><span class=\"line\">        Weekday.Saturday,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// disable a flag</span></span><br><span class=\"line\">alarm.Weekdays.Remove(Weekday.Saturday);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check if a flag is enabled</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (alarm.Weekdays.Contains(Weekday.Monday))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check if some flags are enabled</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (alarm.Weekdays.Any(e =&gt; e <span class=\"keyword\">is</span> Weekday.Saturday <span class=\"keyword\">or</span> Weekday.Sunday))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check if a flag is disabled</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!alarm.Weekdays.Contains(Weekday.Friday))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The code is relatively simple and easy to understand but it has two drawbacks — memory allocations of new collections and constant iterations to check for flags. How can we solve this?</p>\n<h1 id=\"Introducing-flag-enums\"><a href=\"#Introducing-flag-enums\" class=\"headerlink\" title=\"Introducing flag enums\"></a>Introducing flag enums</h1><p>Flag enums were created to optimize both memory and CPU usage by providing a way to store multiple options into a single variable.</p>\n<p>The core concept is the following: every variable is stored in memory as binary data and CPUs are very efficient at making bitwise operations so, if you ensure each enum value is represented by a single bit that doesn’t overlap another value, you can use binary operators (AND, OR, NOT and XOR) to store multiple options into a single primitive variable.</p>\n<p>By default, enums are represented in memory as an integer, but can also be a short or a long value. If each bit represents a different enum value, this means you can have up to 64 possible values that must not overlap each other.</p>\n<p>Lets change the previous example to use a flag enum instead:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Flags</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">enum</span> Weekday</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    None        = <span class=\"number\">0</span>,</span><br><span class=\"line\">    Sunday      = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">0</span>, <span class=\"comment\">// 0b_00000001 // 1</span></span><br><span class=\"line\">    Monday      = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">1</span>, <span class=\"comment\">// 0b_00000010 // 2</span></span><br><span class=\"line\">    Tuesday     = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">2</span>, <span class=\"comment\">// 0b_00000100 // 4</span></span><br><span class=\"line\">    Wednesday   = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">3</span>, <span class=\"comment\">// 0b_00001000 // 8</span></span><br><span class=\"line\">    Thursday    = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">4</span>, <span class=\"comment\">// 0b_00010000 // 16</span></span><br><span class=\"line\">    Friday      = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">5</span>, <span class=\"comment\">// 0b_00100000 // 32</span></span><br><span class=\"line\">    Saturday    = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">6</span>, <span class=\"comment\">// 0b_01000000 // 64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Alarm</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Weekday Weekdays &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TimeOnly Time &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, some small changes were made:</p>\n<ol>\n<li>Added the <code>Flags</code> attribute to the enum — not a requirement, but I’ll explain later why it should be used;</li>\n<li>Defined the value of each option ensuring no bit was overlapped — in this case I used the <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#left-shift-operator-\">shift left</a> operator to make it easier and more readable;</li>\n<li>Removed the collection and changed the property <code>Weekdays</code> to a simple <code>Weekday</code> enum;</li>\n</ol>\n<p>You may now be asking: you removed the collection and changed it to a single <code>Weekday</code> value, how am I supposed to represent multiple options then?</p>\n<h1 id=\"Introducing-bitwise-operators\"><a href=\"#Introducing-bitwise-operators\" class=\"headerlink\" title=\"Introducing bitwise operators\"></a>Introducing bitwise operators</h1><p>As I stated before, bitwise operators (<a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#logical-and-operator-\">AND</a>, <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#logical-or-operator-\">OR</a>, <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#logical-exclusive-or-operator-\">XOR</a>, <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#bitwise-complement-operator-\">NOT</a>) allow us to execute logical computation between the bits of two integral operands.</p>\n<p>This is relevant because if we use a bitwise OR (|) operator we can store the result as an aggregation of multiple active flags. Imagine you wanted a variable representing the weekend (setting Saturday and Sunday flags):</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> weekend = Weekday.Saturday | Weekday.Sunday;</span><br><span class=\"line\"><span class=\"comment\">//          = 0b_01000000 | 0b_00000001</span></span><br><span class=\"line\"><span class=\"comment\">//          = 0b_01000001</span></span><br></pre></td></tr></table></figure>\n\n<p>As you can see in the comment showing the binary representation, both flags will be set.</p>\n<p>On the other hand, if you want to check if a given flag is active you can simply use the bitwise AND (&amp;) operator and compare the result to zero (or <code>Weekday.None</code>).</p>\n<p>Lets check if Sunday is part of the weekend by checking a non zero result:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hasSunday = (weekend &amp; Weekday.Sunday) != Weekday.None;</span><br><span class=\"line\"><span class=\"comment\">//            = (0b_01000001 &amp; 0b_00000001) != 0</span></span><br><span class=\"line\"><span class=\"comment\">//            = 0b_00000001 != 0</span></span><br><span class=\"line\"><span class=\"comment\">//            = true</span></span><br></pre></td></tr></table></figure>\n\n<p>If you want to check if a flag is disabled the operation result must be zero:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> noMonday = (weekend &amp; Weekday.Monday) == Weekday.None;</span><br><span class=\"line\"><span class=\"comment\">//           = (0b_01000001 &amp; 0b_00000010) == 0</span></span><br><span class=\"line\"><span class=\"comment\">//           = 0b_00000000 == 0</span></span><br><span class=\"line\"><span class=\"comment\">//           = true</span></span><br></pre></td></tr></table></figure>\n\n<p>And finally, if you want to disable a given flag just do a bitwise AND against a negated flag value:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sunday = weekend &amp; ~Weekday.Saturday;</span><br><span class=\"line\"><span class=\"comment\">//         = 0b_01000001 &amp; ~0b_01000000</span></span><br><span class=\"line\"><span class=\"comment\">//         = 0b_01000001 &amp; 0b_10111111</span></span><br><span class=\"line\"><span class=\"comment\">//         = 0b_00000001</span></span><br></pre></td></tr></table></figure>\n\n<p>Lets update the original example and use the bitwise operators we just learned (AND, OR, NOT):</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> alarm = <span class=\"keyword\">new</span> Alarm</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Time = <span class=\"keyword\">new</span> TimeOnly(<span class=\"number\">07</span>, <span class=\"number\">00</span>, <span class=\"number\">00</span>),</span><br><span class=\"line\">    Weekdays = Weekday.Monday |</span><br><span class=\"line\">               Weekday.Tuesday |</span><br><span class=\"line\">               Weekday.Wednesday |</span><br><span class=\"line\">               Weekday.Thursday |</span><br><span class=\"line\">               Weekday.Friday |</span><br><span class=\"line\">               Weekday.Saturday,</span><br><span class=\"line\">    <span class=\"comment\">// Weekdays = (Weekday) 0b_01111110</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// disable a flag</span></span><br><span class=\"line\">alarm.Weekdays &amp;= ~Weekday.Saturday; <span class=\"comment\">// (Weekday) 0b_00111110</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check if a flag is enabled</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((alarm.Weekdays &amp; Weekday.Monday) != <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check if some flags are enabled</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((alarm.Weekdays &amp; (Weekday.Saturday | Weekday.Sunday)) != Weekday.None)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check if a flag is disabled</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((alarm.Weekdays &amp; Weekday.Friday) == Weekday.None)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Right now you must be thinking: sure, this code is more resource efficient and performant but it certainly is harder to read… not sure if I gained something… how can I improve this?</p>\n<p>Well, because checking if a flag is active is a very common scenario, all enums have a method called <code>HasFlag</code> that can be used just for that. Lets rewrite the example in a much simpler and readable way:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> alarm = <span class=\"keyword\">new</span> Alarm</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Time = <span class=\"keyword\">new</span> TimeOnly(<span class=\"number\">07</span>, <span class=\"number\">00</span>, <span class=\"number\">00</span>),</span><br><span class=\"line\">    Weekdays = Weekday.Monday |</span><br><span class=\"line\">               Weekday.Tuesday |</span><br><span class=\"line\">               Weekday.Wednesday |</span><br><span class=\"line\">               Weekday.Thursday |</span><br><span class=\"line\">               Weekday.Friday |</span><br><span class=\"line\">               Weekday.Saturday,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">alarm.Weekdays &amp;= ~Weekday.Saturday;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (alarm.Weekdays.HasFlag(Weekday.Monday))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (alarm.Weekdays.HasFlag(Weekday.Saturday) || alarm.Weekdays.HasFlag(Weekday.Sunday))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!alarm.Weekdays.HasFlag(Weekday.Friday))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It would be nice to also have a method to disable a flag but none is provided by the framework, so you’ll have to stick with bitwise operators for that scenario.</p>\n<h1 id=\"Why-the-Flags-attribute\"><a href=\"#Why-the-Flags-attribute\" class=\"headerlink\" title=\"Why the [Flags] attribute?\"></a>Why the [Flags] attribute?</h1><p>Earlier I said marking the enum with a <code>Flags</code> attribute is opcional (everything we talked about will still work) but still recommended because it helps the IDE to give you more detailed warnings or suggestions, but it’s specially important for debugging, parsing or converting to a string representation.</p>\n<p>Imagine the <code>weekend</code> scenario were both Saturday and Sunday flags are set. If the enum doesn’t have the <code>Flags</code> attribute and you go inspect the variable, the IDE will show the value 65 (<code>0b_01000001</code>) because it isn’t defined in the enum. Same behavior for the <code>ToString</code> method, that will return <code>&quot;65&quot;</code>:</p>\n<img src=\"/2023/11/04/Understanding-Flag-Enums-in-C/01_value_no_flag_attribute.png\" class=\"post-image\">\n\n<p>If on the contrary the <code>Flags</code> attribute is used, both IDE and <code>ToString</code> method will show a proper representation of what flags are active:</p>\n<img src=\"/2023/11/04/Understanding-Flag-Enums-in-C/02_value_flag_attribute.png\" class=\"post-image\">\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I hope this article gave you a good idea on how to use flag enums and bitwise operations to store and check for active flags using a single field, making your application more resource efficient without losing code readability.</p>\n",
            "tags": [
                "dotnetcore",
                "csharp",
                "dotnet"
            ]
        },
        {
            "id": "https://code-corner.dev/2022/08/13/Immutability-and-Entity-Framework-Core/",
            "url": "https://code-corner.dev/2022/08/13/Immutability-and-Entity-Framework-Core/",
            "title": "Immutability and Entity Framework Core",
            "date_published": "2022-08-12T23:00:00.000Z",
            "content_html": "<p>Nowadays, when implementing a .NET application that works directly with a database (relational or not), most developers will chose Entity Framework Core to abstract their data layer and work directly with entity classes.</p>\n<p>It has become an integral part of the .NET ecosystem, just like ASP.NET, and it is extremely rare finding someone that never worked with it. I’ve been using it myself ever since version 4 (along with other ORMs) and I must say that it <em><strong>aged like a fine wine</strong></em>.</p>\n<p>Fully open sourced, with support for multiple databases (not just SQL Server) while offering relatively optimized and extensible conversion from LINQ to database queries, accessing data from a .NET application never been easier. And when it doesn’t support something, <a href=\"/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/\" title=\"Integrating Dapper with Entity Framework Core\">just integrate with some micro ORM and go crazy on that SQL</a>!</p>\n<p>One core feature is the implementation of the unit of work pattern by supporting, what is usually called, a first level cache. Load a bunch of entities from the database, that will be tracked in memory by the context, mutate or delete them, create new ones and then flush everything in a single database access.</p>\n<p>The thing about this feature, despite working fine most of the time, is that it depends on managing internal state with mutable entities. After all, it was originally focused on C# developers that were used to work in a object-oriented way — get an entity, change some properties, request an update.</p>\n<p><strong>But what if you are a C# developer and prefer the advantages provided by immutability?</strong></p>\n<p>Lets look at the most used immutable class in the .NET world — the string.</p>\n<p>We all know that working with text can be memory inefficient if badly managed, but imagine a world were you could initialize a string with the name “Bruce Wayne”, pass it as an argument to some method that was supposed to count how many words were in it, and when you realize, your original string contains the name “Peter Parker” because the strings were mutable and nothing could prevent that?</p>\n<p>In this article I won’t enter into details about the advantages of immutable over mutable objects, and vice versa. There are great articles already explaining both visions and we all know no size fits all, so it kinda depends of your current needs.</p>\n<p>But I’m going to explain how you can use immutable entities directly with Entity Framework Core so you know that not only it is possible but also a viable option.</p>\n<hr>\n<h1 id=\"Immutable-entities-in-C\"><a href=\"#Immutable-entities-in-C\" class=\"headerlink\" title=\"Immutable entities in C#\"></a>Immutable entities in C#</h1><p>Before C# 9 the only way to create an immutable entity was to define a class or structure with <em>getter only properties</em> that were initialized during object construction, ensuring nothing could be changed afterwards.</p>\n<p>As an example, a <code>PersonEntity</code> would look like this:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">PersonEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PersonEntity</span>(<span class=\"params\"><span class=\"built_in\">string</span> forename, <span class=\"built_in\">string</span> surname, <span class=\"built_in\">string</span>? middleNames = <span class=\"literal\">null</span>, DateOnly? birthdate = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Forename = forename;</span><br><span class=\"line\">        Surname = surname;</span><br><span class=\"line\">        MiddleNames = middleNames;</span><br><span class=\"line\">        Birthdate = birthdate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Forename &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Surname &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span>? MiddleNames &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateOnly? Birthdate &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It works as expected but there is one major problem: just by looking at the code, the developer cannot tell which properties are being set unless argument names are used and, if it wants to change something, it must copy every property by hand.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> PersonEntity(</span><br><span class=\"line\">    <span class=\"string\">&quot;Bruce&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Wayne&quot;</span></span><br><span class=\"line\">);</span><br><span class=\"line\">person = <span class=\"keyword\">new</span> PersonEntity(</span><br><span class=\"line\">    person.Forename,</span><br><span class=\"line\">    person.Surname,</span><br><span class=\"line\">    <span class=\"string\">&quot;Thomas&quot;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> DateOnly(<span class=\"number\">1972</span>, <span class=\"number\">02</span>, <span class=\"number\">19</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>For small POCOs this may not be a problem, but for bigger ones the chances of someone making a mistake increases.</p>\n<p>With this in mind, Microsoft implemented <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/init\">init only setters</a> supporting object initializers while still preventing changes afterwards. Couple this with <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/records\">record types</a>, and creating immutable entities has never been easier in C#.</p>\n<p>The same PersonEntity, but now using both of these features:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title\">PersonEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Forename &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Surname &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span>? MiddleNames &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateOnly? Birthdate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Not only the syntax is more concise by using auto-implemented properties, you can now easily tell which properties are being set during initialization and have a much easier life copying data by using the keyword with and only state which properties must change.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> PersonEntity</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Forename = <span class=\"string\">&quot;Bruce&quot;</span>,</span><br><span class=\"line\">    Surname = <span class=\"string\">&quot;Wayne&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">person = person <span class=\"keyword\">with</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MiddleNames = <span class=\"string\">&quot;Thomas&quot;</span>,</span><br><span class=\"line\">    Birthdate = <span class=\"keyword\">new</span> DateOnly(<span class=\"number\">1972</span>, <span class=\"number\">02</span>, <span class=\"number\">19</span>),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Change-Tracking-and-immutability\"><a href=\"#Change-Tracking-and-immutability\" class=\"headerlink\" title=\"Change Tracking and immutability\"></a>Change Tracking and immutability</h1><p>Every developer that uses Entity Framework knows it provides a lot of database abstractions to enable working directly with .NET objects.</p>\n<p><a href=\"https://docs.microsoft.com/en-us/ef/core/change-tracking\">One core feature is the automatic detection of changes made to entities</a>. This usually means interacting with the context to get an existing entity, change some properties and then invoke <code>SaveChangesAsync</code> which will generate a bunch of instructions and execute them into the database. Under the hood, when the entity is retrieved from the context it will keep a reference to the instance and original values from the database and when the developer requests the context to save changes, all properties of tracked entities will be compared and if anything changed, instructions will be generated and executed.</p>\n<p>This works well for mutable entities but we are implementing immutability, and since no changes will be made to tracked entities, will this cause any issues?</p>\n<p>Let’s imagine the following use case:</p>\n<ul>\n<li>You retrieve our <em>Bruce Wayne</em> from the database using an EF Core context, which internally will keep a reference to it;</li>\n<li>You want to change it’s birthdate, so you clone it while assigning a new date;</li>\n<li>If you invoke <code>SaveChangesAsync</code>, nothing will happen because no changes happened to the original entity;</li>\n<li>If you invoke <code>Update</code>, an <code>InvalidOperationException</code> will be thrown because the context is already tracking an entity with the same primary key;</li>\n</ul>\n<p>Certainly invoking <code>SaveChangesAsync</code> and nothing happening was expected, after all we created a copy of the original instance, which EF Core knows nothing about and would never automatically detect changes, but why the exception when trying to attach the entity to the context?</p>\n<p>This leads to another EF Core feature, called <a href=\"https://docs.microsoft.com/en-us/ef/core/change-tracking/identity-resolution\">Identity Resolution</a>, strongly correlated to our change tracking.</p>\n<p><em>Identity Resolution</em> ensures the same entity is retrieved for the same primary key while being tracked. This is a requirement when implementing the Unit of Work pattern because EF Core only flushes data when <code>SaveChangesAsync</code> is invoked.</p>\n<p>Again, let’s imagine our <code>PersonEntity</code> was a mutable class:</p>\n<ul>\n<li>You retrieve our <em>Bruce Wayne</em> from the database using an EF Core context, which internally will keep a reference to it, also identified by its primary key;</li>\n<li>You change its birthdate;</li>\n<li>You do some more work;</li>\n<li>You try to get it again from the EF Core context but since that primary key its already being tracked, it returns the same instance instead of going to the database and returning old data for your Unit of Work operation;</li>\n<li>You change more properties;</li>\n<li>Invoke <code>SaveChangesAsync</code>, flushing changes and now both the instance and database have the same data;</li>\n</ul>\n<p>As you can see, <em>Identity Resolution</em> is important for mutable entities, but not so much for our use case and it’s a problem we must solve.</p>\n<hr>\n<h1 id=\"The-project\"><a href=\"#The-project\" class=\"headerlink\" title=\"The project\"></a>The project</h1><p>It seems the only thing preventing an immutable approach to database access while using EF Core is not relying on <em>Change Tracking</em> for mutations while preventing <em>Identity Resolution</em> problems.</p>\n<p>Let’s create a C# console application that will use Entity Framework Core to store data into a SQLite database, using immutable <code>record</code> entities.</p>\n<p>The source code is available on <a href=\"https://github.com/gravity00/efcore-immutability\">GitHub</a>, feel free to give it a look.</p>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><p>Start by opening Visual Studio and creating a <strong>.NET 6.0 Console Application</strong> with a name at any location you prefer.</p>\n<img src=\"/2022/08/13/Immutability-and-Entity-Framework-Core/01_project_create.png\" class=\"\">\n\n<p>Install most recent versions of Entity Framework Core for SQLite and Microsoft hosting nugets:</p>\n<ul>\n<li><code>Microsoft.Extensions.Hosting</code></li>\n<li><code>Microsoft.EntityFrameworkCore.Sqlite</code></li>\n</ul>\n<img src=\"/2022/08/13/Immutability-and-Entity-Framework-Core/02_nugets.png\" class=\"\">\n\n<p>Create a <code>ProgramHost</code> class implementing <code>IHostedService</code>. This class will run our exemple code, but for now just inject a logger and write something inside the <code>StartAsync</code> method. We’ll do nothing in the <code>StopAsync</code> method, so just return a completed task.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProgramHost</span> : <span class=\"title\">IHostedService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ILogger&lt;ProgramHost&gt; _logger;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProgramHost</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        ILogger&lt;ProgramHost&gt; logger</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">StartAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogInformation(<span class=\"string\">&quot;I&#x27;m alive!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">StopAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span> =&gt; Task.CompletedTask;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>Program.cs</code> file, build an host with our <code>ProgramHost</code> class registered as a hosted service.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> host = Host.CreateDefaultBuilder()</span><br><span class=\"line\">    .ConfigureServices(services =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddHostedService&lt;ProgramHost&gt;();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .Build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> host.RunAsync();</span><br></pre></td></tr></table></figure>\n\n<p>If you configured everything correctly and run the application, you should see something like this:</p>\n<img src=\"/2022/08/13/Immutability-and-Entity-Framework-Core/03_setup_logs.png\" class=\"\">\n\n<h2 id=\"The-database-model\"><a href=\"#The-database-model\" class=\"headerlink\" title=\"The database model\"></a>The database model</h2><p>For simplicity, we’ll have a single Persons table:</p>\n<ul>\n<li><strong>Id</strong> — identity column to uniquely identify the row (required);</li>\n<li><strong>Forename</strong> — stores the first name (text, required);</li>\n<li><strong>Surname</strong> — stores the last name (text, required);</li>\n<li><strong>MiddleNames</strong> — stores the middle names (text, optional);</li>\n<li><strong>Birthdate</strong> — stores the date of birth (date, optional);</li>\n</ul>\n<p>When representing database entities, I always create a base class containing properties to be defined in all entities (like the unique identifier or some metadata columns), and for the rest I always use positional records syntax for required properties and auto-properties for optional ones, making clear to the developer which ones must be always provided (this also removes compiler warnings if the project is configured for nullable reference types).</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Base class for all database entities</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">record</span> <span class=\"title\">Entity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> Unique identifier</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Representation of a person</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;Forename&quot;&gt;</span>Person first name<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;Surname&quot;&gt;</span>Person last name<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title\">PersonEntity</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"built_in\">string</span> Forename,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"built_in\">string</span> Surname</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) : Entity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> Person middle names, separated by spaces</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span>? MiddleNames &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> Person date of birth</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateOnly? Birthdate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you prefer to keep everything more compact, feel free to use <em>positional records</em> with default values for optional properties.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title\">PersonEntity</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"built_in\">string</span> Forename,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"built_in\">string</span> Surname,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"built_in\">string</span>? MiddleNames = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    DateOnly? Birthdate = <span class=\"literal\">null</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) : Entity</span>;</span><br></pre></td></tr></table></figure>\n\n<p>This is the most compact syntax, but be careful when adding new optional properties if your are sharing <em>records</em> across multiple applications. It will also be considered a breaking change unless you define both constructors, effectively losing this compact syntax. That’s the reason I don’t use <em>positional record syntax</em> for everything, but it kinda depends on your needs.</p>\n<p>Now, lets create our EF Core context with <code>Persons</code> table mappings.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleDbContext</span> : <span class=\"title\">DbContext</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleDbContext</span>(<span class=\"params\">DbContextOptions&lt;SampleDbContext&gt; options</span>)</span></span><br><span class=\"line\"><span class=\"function\">        : <span class=\"title\">base</span>(<span class=\"params\">options</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnModelCreating</span>(<span class=\"params\">ModelBuilder builder</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">base</span>.OnModelCreating(builder);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.Entity&lt;PersonEntity&gt;(cfg =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cfg.ToTable(<span class=\"string\">&quot;Persons&quot;</span>);</span><br><span class=\"line\">            cfg.HasKey(e =&gt; e.Id);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Id)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .ValueGeneratedOnAdd();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Forename)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">64</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Surname)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">64</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.MiddleNames)</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">256</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Birthdate);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>Program.cs</code> file and register the EF Core context into the container. This is a test console, so I’ll use the temporary folder to store the SQLite file but feel free to use any other location and file name.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> host = Host.CreateDefaultBuilder()</span><br><span class=\"line\">    .ConfigureServices(services =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddDbContext&lt;SampleDbContext&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> connectionString = <span class=\"keyword\">new</span> SqliteConnectionStringBuilder</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DataSource = Path.Combine(</span><br><span class=\"line\">                    Path.GetTempPath(),</span><br><span class=\"line\">                    <span class=\"string\">&quot;efcore-immutability-sample.sqlite3&quot;</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;.ConnectionString;</span><br><span class=\"line\">            options.UseSqlite(connectionString);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddHostedService&lt;ProgramHost&gt;();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .Build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> host.RunAsync();</span><br></pre></td></tr></table></figure>\n\n<p>Now inject the context into the <code>ProgramHost</code> class and, since this is a test console and we want to freely modify our entities without much thought, change the <code>StartAsync</code> method to always drop and recreate the database on startup.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProgramHost</span> : <span class=\"title\">IHostedService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ILogger&lt;ProgramHost&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> SampleDbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProgramHost</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        ILogger&lt;ProgramHost&gt; logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        SampleDbContext context</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">StartAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Ensuring database is in a clean state&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.EnsureDeletedAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.EnsureCreatedAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">StopAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span> =&gt; Task.CompletedTask;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you run the application and open the SQLite database file (using DB Browser for SQLite or equivalent), both a <code>Persons</code> and <code>sqlite_sequence</code> tables should be defined.</p>\n<img src=\"/2022/08/13/Immutability-and-Entity-Framework-Core/04_db_setup.png\" class=\"\">\n\n<h2 id=\"Configuring-for-immutability\"><a href=\"#Configuring-for-immutability\" class=\"headerlink\" title=\"Configuring for immutability\"></a>Configuring for immutability</h2><p>Now that we have a working solution lets recall what we need to achieve to support immutability:</p>\n<ul>\n<li>Not relying on <em>Change Tracking</em> to know which instructions must be executed when <code>SaveChangesAsync</code> is invoked;</li>\n<li>Preventing <em>Identity Resolution</em> exceptions;</li>\n</ul>\n<p>Because <em>Change Tracking</em> is such a core feature in Entity Framework Core, you can only disable it when querying for entities.</p>\n<p>As stated in Microsoft <a href=\"https://docs.microsoft.com/en-us/ef/core/querying/tracking\">documentation</a>, we can disable it in three ways:</p>\n<ul>\n<li>Using extension method <code>AsNoTracking</code> for each query;</li>\n<li>Setting context property <code>ChangeTracker.QueryTrackingBehavior</code> to <code>NoTracking</code>;</li>\n<li>Global configuration with method <code>UseQueryTrackingBehavior</code>;</li>\n</ul>\n<p>Open <code>Program.cs</code> file and disable it globally, ensuring will never be tracked when queried from the database.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> host = Host.CreateDefaultBuilder()</span><br><span class=\"line\">    .ConfigureServices(services =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddDbContext&lt;SampleDbContext&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> connectionString = <span class=\"keyword\">new</span> SqliteConnectionStringBuilder</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DataSource = Path.Combine(</span><br><span class=\"line\">                    Path.GetTempPath(),</span><br><span class=\"line\">                    <span class=\"string\">&quot;efcore-immutability-sample.sqlite3&quot;</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;.ConnectionString;</span><br><span class=\"line\">            options.UseSqlite(connectionString)</span><br><span class=\"line\">                .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddHostedService&lt;ProgramHost&gt;();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .Build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> host.RunAsync();</span><br></pre></td></tr></table></figure>\n\n<p>In theory, if you only made a single entity operation per unit of work, like getting a person by unique identifier, changing its middle names and doing an update, this configuration would be enough.</p>\n<p>Sadly we all know development is far from perfect and more complex applications, due to business requirements, may lead to multiple updates to the same data in a single unit of work operation. That’s one of the major reasons behind <em>Change Tracking</em> in EF Core, to implement the unit of work pattern while not relying on database ACID implementations and reducing the time transactions stays open.</p>\n<p>This means every time an entity is added, updated or removed using the context, an internal reference will be kept and <em>Identity Resolution</em> exceptions will be thrown if someone tries to attach an entity with the same id.</p>\n<p>There are multiple ways to solve this problem but the easiest one is to enforce a transaction, flush changes to the database every time a create, update or delete is requested and then detach the entity.</p>\n<p>Since this is a proof of concept application, I’m going to implementing this behavior with extension methods over <code>DbContext</code> instances, but feel free to wrap it into a repository pattern or any way you prefer.</p>\n<p>Create a static class <code>DbContextExtensions</code> and implement a generic extension that will receive an entity and the state to be tracked, returning an updated entity.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">DbContextExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TEntity</span>&gt; <span class=\"title\">SaveEntityStateAsync</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TEntity entity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        EntityState state,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) <span class=\"keyword\">where</span> TEntity : Entity</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (context == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(context));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entity == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(entity));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> entry = context.Entry(entity);</span><br><span class=\"line\">        entry.State = state;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> context.SaveChangesAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        entry.State = EntityState.Detached;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> entry.Entity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The method creates an <code>EntityEntry&lt;TEntity&gt;</code>, changes the state to the one provided and immediately requests to flush changes. Because the context is now tracking the entity, it will execute a database instruction based on the entry state (<code>Added|Modified|Deleted</code>). Then, it detaches the entity right before returning to prevent <em>Identity Resolution</em> exceptions on future mutations and returns the entity with the most recent values (usefull to get values generated by the database, like an identity column).</p>\n<p>Open the <code>ProgramHost</code> class and create some test code using the extension method and the immutable <code>PersonEntity</code>. In this case I’m creating <em>Bruce Wayne</em> and then updating both birthdate and middle name.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProgramHost</span> : <span class=\"title\">IHostedService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ILogger&lt;ProgramHost&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> SampleDbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProgramHost</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        ILogger&lt;ProgramHost&gt; logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        SampleDbContext context</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">StartAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Setting database to a clean state&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.EnsureDeletedAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.EnsureCreatedAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Creating an explicit database transaction&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> tx = <span class=\"keyword\">await</span> _context.Database.BeginTransactionAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Adding person&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> person = <span class=\"keyword\">await</span> _context.SaveEntityStateAsync(<span class=\"keyword\">new</span> PersonEntity(</span><br><span class=\"line\">            Forename: <span class=\"string\">&quot;Bruce&quot;</span>,</span><br><span class=\"line\">            Surname: <span class=\"string\">&quot;Wayne&quot;</span></span><br><span class=\"line\">        ), EntityState.Added, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Updating person&#x27;s birthdate&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveEntityStateAsync(person <span class=\"keyword\">with</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MiddleNames = <span class=\"string\">&quot;Thomas&quot;</span>,</span><br><span class=\"line\">            Birthdate = <span class=\"keyword\">new</span> DateOnly(<span class=\"number\">1972</span>, <span class=\"number\">02</span>, <span class=\"number\">19</span>)</span><br><span class=\"line\">        &#125;, EntityState.Modified, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Commiting database transaction&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> tx.CommitAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">StopAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span> =&gt; Task.CompletedTask;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you execute the code, you’ll see database instructions being sent to SQLite by Entity Framework Core to insert and then update the entity.</p>\n<img src=\"/2022/08/13/Immutability-and-Entity-Framework-Core/05_logs_entity_mutate.png\" class=\"\">\n\n<p>Open the SQLite file and you’ll see <em>Bruce Wayne</em> was both created and updated with a birthdate and middle name.</p>\n<img src=\"/2022/08/13/Immutability-and-Entity-Framework-Core/06_db_persons_table.png\" class=\"\">\n\n<p>Certainly you don’t want to be writing <code>EntityState.Added|Updated|Deleted</code> every time an entity needs to be manipulated, so lets create dedicated extensions for each operation and update your test code.</p>\n<p>Change the method to <code>private</code> and implement a <code>CreateAsync</code>, <code>UpdateAsync</code> and <code>DeleteAsync</code> extension methods that will reuse the existing one.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">DbContextExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TEntity</span>&gt; <span class=\"title\">CreateAsync</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TEntity entity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) <span class=\"keyword\">where</span> TEntity : Entity</span> =&gt; <span class=\"keyword\">await</span> context.SaveEntityStateAsync(</span><br><span class=\"line\">        entity,</span><br><span class=\"line\">        EntityState.Added,</span><br><span class=\"line\">        ct</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TEntity</span>&gt; <span class=\"title\">UpdateAsync</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TEntity entity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) <span class=\"keyword\">where</span> TEntity : Entity</span> =&gt; <span class=\"keyword\">await</span> context.SaveEntityStateAsync(</span><br><span class=\"line\">        entity,</span><br><span class=\"line\">        EntityState.Modified,</span><br><span class=\"line\">        ct</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task <span class=\"title\">DeleteAsync</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TEntity entity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) <span class=\"keyword\">where</span> TEntity : Entity</span> =&gt; <span class=\"keyword\">await</span> context.SaveEntityStateAsync(</span><br><span class=\"line\">        entity,</span><br><span class=\"line\">        EntityState.Deleted,</span><br><span class=\"line\">        ct</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TEntity</span>&gt; <span class=\"title\">SaveEntityStateAsync</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TEntity entity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        EntityState state,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) <span class=\"keyword\">where</span> TEntity : Entity</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (context == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(context));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entity == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(entity));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> entry = context.Entry(entity);</span><br><span class=\"line\">        entry.State = state;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> context.SaveChangesAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        entry.State = EntityState.Detached;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> entry.Entity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Use the new methods in our <code>ProgramHost</code> class.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProgramHost</span> : <span class=\"title\">IHostedService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ILogger&lt;ProgramHost&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> SampleDbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProgramHost</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        ILogger&lt;ProgramHost&gt; logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        SampleDbContext context</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">StartAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Setting database to a clean state&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.EnsureDeletedAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.EnsureCreatedAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Creating an explicit database transaction&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> tx = <span class=\"keyword\">await</span> _context.Database.BeginTransactionAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Adding person&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> person = <span class=\"keyword\">await</span> _context.CreateAsync(<span class=\"keyword\">new</span> PersonEntity(</span><br><span class=\"line\">            Forename: <span class=\"string\">&quot;Bruce&quot;</span>,</span><br><span class=\"line\">            Surname: <span class=\"string\">&quot;Wayne&quot;</span></span><br><span class=\"line\">        ), ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Updating person&#x27;s birthdate&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.UpdateAsync(person <span class=\"keyword\">with</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MiddleNames = <span class=\"string\">&quot;Thomas&quot;</span>,</span><br><span class=\"line\">            Birthdate = <span class=\"keyword\">new</span> DateOnly(<span class=\"number\">1972</span>, <span class=\"number\">02</span>, <span class=\"number\">19</span>)</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Commiting database transaction&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> tx.CommitAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">StopAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span> =&gt; Task.CompletedTask;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I hope this article gave you a good idea on how to use Entity Framework Core to abstract your application from the database while still implementing the immutable design pattern to manage application state.</p>\n<p>There are both advantages and disadvantages of using immutable entities over mutable ones, after all no size fits all, but I think its nice to know you have the option to use it without sacrificing productivity by having to implement database access yourself. As long you ensure <em>Change Tracking</em> is disabled for all queries and every code uses your abstractions to create, update or delete entities, everything will work just fine.</p>\n<p>Just a small note about explicit database transactions. If you are implementing an ASP.NET Core application and using the mediator pattern, some time ago I created a bunch of articles and one of them provided an approach to <a href=\"/2020/11/07/Transaction-Management-With-Mediator-Pipelines-in-ASP-NET-Core/\" title=\"Transaction Management With Mediator Pipelines in ASP.NET Core\">manage Entity Framework Core transactions globally using a pipeline</a>. I use that approach all the time, you may find it helpful too.</p>\n",
            "tags": [
                "dotnetcore",
                "csharp",
                "patterns",
                "efcore"
            ]
        },
        {
            "id": "https://code-corner.dev/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/",
            "url": "https://code-corner.dev/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/",
            "title": "Integrating Dapper with Entity Framework Core",
            "date_published": "2021-03-09T00:00:00.000Z",
            "content_html": "<p>Nowadays it is extremely rare to implement an application without using any sort of library for <em>Object-Relational Mapping (ORM)</em> to reduce development time by removing the need to implement a lot of boilerplate code to access a database. In the .NET world that usually means using <a href=\"https://docs.microsoft.com/en-us/ef/core/\">Entity Framework Core</a> or <a href=\"https://nhibernate.info/\">NHibernate</a> both offering strong tooling for CRUD operations, data type conversions, strong typed queries using LINQ with <code>IQueryable</code> and so on.</p>\n<p>Despite the pros of using an ORM there are also some cons that, while may not prevent them to be widely used inside an application, they may need to be replaced in some areas either for performance reasons or limitations. This usually means working directly with <a href=\"https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ado-net-overview\">ADO.NET</a> (oh hell no!) or use Micro ORM libraries, like <a href=\"https://github.com/StackExchange/Dapper\">Dapper</a>, that are focused on performance and providing a simpler way to map database queries into objects.</p>\n<p>In this article I’m going to demonstrate how Dapper can easily be integrated with Entity Framework Core (and probably with any other ORM) without using <code>TransactionScope</code>, while trying to keep the same contracts via extension methods to <code>DbContext</code> instances and ensuring the SQL is properly logged in a similar way to what EF Core usually does.</p>\n<h1 id=\"Dapper-Requirements\"><a href=\"#Dapper-Requirements\" class=\"headerlink\" title=\"Dapper Requirements\"></a>Dapper Requirements</h1><p>To work with Dapper, the only requirements are a <code>DbConnection</code>, the SQL text, and some optional parameters, like a <code>DbTransaction</code>, command timeout, query parameters and so on. Sometimes is is also necessary to globally register some custom <code>TypeHandler&lt;T&gt;</code> for the when it can’t convert a given database type to its CLR representation.</p>\n<p>Assuming we want to execute a simple <code>SELECT @SomeParameter</code> statement via Dapper, what code we must implement to get everything we need from a <code>DbContext</code>?</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// get the underline DbConnection</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> connection = context.Database.GetDbConnection();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get the underline DbTransaction, if any</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> transaction = context.Database.CurrentTransaction?.GetDbTransaction();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get the currently configured command timeout</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> commandTimeout = context.Database.GetCommandTimeout();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// create a Dapper CommandDefinition</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> command = <span class=\"keyword\">new</span> CommandDefinition(</span><br><span class=\"line\">    <span class=\"string\">&quot;SELECT @SomeParameter&quot;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">new</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SomeParameter = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    transaction,</span><br><span class=\"line\">    commandTimeout,</span><br><span class=\"line\">    cancellationToken: ct</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"keyword\">await</span> connection.QueryAsync&lt;<span class=\"built_in\">int</span>&gt;(command);</span><br></pre></td></tr></table></figure>\n\n<p>As shown, the database facade has everything we need to make Dapper work but there is a caveat that must be properly addressed:</p>\n<p><strong>Dapper always executes the SQL immediately into the database</strong>, which means it won’t detect changes made on tracked entities before <code>SaveChanges</code> is invoked and it won’t wait to flush changes either, so be very careful when managing database access.</p>\n<p>My recommendation is to always open a transaction explicitly via <code>context.Database.BeginTransactionAsync</code> before running any mutation.</p>\n<p>If you are using the mediator pattern, I recommend my previous article that explains <a href=\"/2020/11/07/Transaction-Management-With-Mediator-Pipelines-in-ASP-NET-Core/\" title=\"Transaction Management With Mediator Pipelines in ASP.NET Core\">how to create a mediator pipeline that enforces database transactions when handling commands</a>.</p>\n<p>With all of this in mind, lets implement an example project that showcases what we just talked about.</p>\n<hr>\n<h1 id=\"The-project\"><a href=\"#The-project\" class=\"headerlink\" title=\"The project\"></a>The project</h1><p>The source code for this article can be found on <a href=\"https://github.com/gravity00/EntityFrameworkCoreWithDapper\">GitHub</a>.</p>\n<p>Start by opening Visual Studio and creating an <strong>ASP.NET Core Web Application</strong> with a name and a location at your preference.</p>\n<img src=\"/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/01_project_create.png\" class=\"\">\n\n<p>Choose an <strong>empty project</strong> since this is just a demo and we are going to setup only the required dependencies.</p>\n<img src=\"/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/02_project_create_aspnet.png\" class=\"\">\n\n<p>Install the Nuget <code>Swashbuckle.AspNetCore</code>:</p>\n<img src=\"/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/03_nuget_swagger.png\" class=\"\">\n\n<p>Open the <code>Startup.cs</code> file and configure both MVC and Swagger so we can use its UI to test our endpoints more easily.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddSwaggerGen();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseSwagger();</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseSwaggerUI(c =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            c.SwaggerEndpoint(<span class=\"string\">&quot;/swagger/v1/swagger.json&quot;</span>, <span class=\"string\">&quot;EF Core with Dapper Example Api V1&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseRouting();</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseEndpoints(endpoints =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            endpoints.MapControllers();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-Web-API\"><a href=\"#The-Web-API\" class=\"headerlink\" title=\"The Web API\"></a>The Web API</h1><p>Since the objective of this article is to show how Dapper can be integrated with Entity Framework Core, we are going to create a simple endpoint to manage products:</p>\n<ul>\n<li>GET &#x2F;products — lists products, including their current price and last date when it has changed;</li>\n<li>POST &#x2F;products — creates a product with a given price;</li>\n</ul>\n<h2 id=\"The-Database-Model\"><a href=\"#The-Database-Model\" class=\"headerlink\" title=\"The Database Model\"></a>The Database Model</h2><p>We need a SQL database to run our queries so, to simplify our setup, we are going to use the SQLite provider for Entity Framework Core and configure it as an in-memory instance.</p>\n<p>Install the Nuget <code>Microsoft.EntityFrameworkCore.Sqlite</code>:</p>\n<img src=\"/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/04_nuget_efcore_sqlite.png\" class=\"\">\n\n<p>Create a <code>Database</code> folder and inside create entities for products and price history, both mapped into an Entity Framework context:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ApiDbContext</span> : <span class=\"title\">DbContext</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApiDbContext</span>(<span class=\"params\">DbContextOptions&lt;ApiDbContext&gt; options</span>) : <span class=\"title\">base</span>(<span class=\"params\">options</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnModelCreating</span>(<span class=\"params\">ModelBuilder builder</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">base</span>.OnModelCreating(builder);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.Entity&lt;ProductEntity&gt;(cfg =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cfg.ToTable(<span class=\"string\">&quot;Product&quot;</span>);</span><br><span class=\"line\">            cfg.HasKey(e =&gt; e.Id);</span><br><span class=\"line\">            cfg.HasAlternateKey(e =&gt; e.ExternalId);</span><br><span class=\"line\">            cfg.HasIndex(e =&gt; e.Code).IsUnique();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Id)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .ValueGeneratedOnAdd();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.ExternalId)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Code)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">8</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Name)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">128</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.Entity&lt;PriceHistoryEntity&gt;(cfg =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cfg.ToTable(<span class=\"string\">&quot;PriceHistory&quot;</span>);</span><br><span class=\"line\">            cfg.HasKey(e =&gt; e.Id);</span><br><span class=\"line\">            cfg.HasIndex(e =&gt; e.CreatedOn);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Id)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .ValueGeneratedOnAdd();</span><br><span class=\"line\">            cfg.HasOne(e =&gt; e.Product)</span><br><span class=\"line\">                .WithMany(p =&gt; p.PricesHistory)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Price)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.CreatedOn)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid ExternalId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> ICollection&lt;PriceHistoryEntity&gt; PricesHistory &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProductEntity</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        PricesHistory = <span class=\"keyword\">new</span> HashSet&lt;PriceHistoryEntity&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">PriceHistoryEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> ProductEntity Product &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Price &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime CreatedOn &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>Startup.cs</code> file and add the database context to the container. Because the database is stored in-memory, we must ensure all tables are created when the application starts and at least one connection is always open so the SQLite provider won’t discard it from memory:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> ConnectionString = <span class=\"string\">&quot;Data Source=EntityFrameworkCoreWithDapper;Mode=Memory;Cache=Shared&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SqliteConnection _keepAliveConnection;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddDbContext&lt;ApiDbContext&gt;(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.UseSqlite(ConnectionString);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// this ensures at least one connection is open and the database is kept in-memory while the application is running</span></span><br><span class=\"line\">        _keepAliveConnection = <span class=\"keyword\">new</span> SqliteConnection(ConnectionString);</span><br><span class=\"line\">        keepAliveConnection.Open();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> scope = app.ApplicationServices.GetRequiredService&lt;IServiceScopeFactory&gt;().CreateScope())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ctx = scope.ServiceProvider.GetRequiredService&lt;ApiDbContext&gt;();</span><br><span class=\"line\">            ctx.Database.EnsureCreated();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Products-Controller\"><a href=\"#The-Products-Controller\" class=\"headerlink\" title=\"The Products Controller\"></a>The Products Controller</h2><p>Now that we have configured the database, create a <code>Controllers</code> folder, the <code>ProductsController</code> class and its models. For now, we are going to implement our logic using only the Entity Framework context.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;products&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductsController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ApiDbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProductsController</span>(<span class=\"params\">ApiDbContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">IEnumerable</span>&lt;<span class=\"title\">ProductModel</span>&gt;&gt; <span class=\"title\">GetAllAsync</span>(<span class=\"params\">[FromQuery] <span class=\"built_in\">int</span>? skip, [FromQuery] <span class=\"built_in\">int</span>? take, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> (</span><br><span class=\"line\">                <span class=\"keyword\">from</span> p <span class=\"keyword\">in</span> _context.Set&lt;ProductEntity&gt;()</span><br><span class=\"line\">                <span class=\"keyword\">select</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Id = p.ExternalId,</span><br><span class=\"line\">                    p.Code,</span><br><span class=\"line\">                    p.Name,</span><br><span class=\"line\">                    MostRecentPriceHistory = p</span><br><span class=\"line\">                        .PricesHistory</span><br><span class=\"line\">                        .OrderByDescending(ph =&gt; ph.CreatedOn)</span><br><span class=\"line\">                        .First()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            )</span><br><span class=\"line\">            .OrderBy(p =&gt; p.Code)</span><br><span class=\"line\">            .Skip(skip ?? <span class=\"number\">0</span>)</span><br><span class=\"line\">            .Take(take ?? <span class=\"number\">20</span>)</span><br><span class=\"line\">            .Select(p =&gt; <span class=\"keyword\">new</span> ProductModel</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Id = p.Id,</span><br><span class=\"line\">                Code = p.Code,</span><br><span class=\"line\">                Name = p.Name,</span><br><span class=\"line\">                Price = p.MostRecentPriceHistory.Price,</span><br><span class=\"line\">                PriceChangedOn = p.MostRecentPriceHistory.CreatedOn</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .ToListAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;CreateProductResultModel&gt; <span class=\"title\">CreateAsync</span>(<span class=\"params\">[FromBody] CreateProductModel model, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> externalId = Guid.NewGuid();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> tx = <span class=\"keyword\">await</span> _context.Database.BeginTransactionAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> product = <span class=\"keyword\">new</span> ProductEntity</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExternalId = externalId,</span><br><span class=\"line\">            Code = model.Code,</span><br><span class=\"line\">            Name = model.Name,</span><br><span class=\"line\">            PricesHistory =</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> PriceHistoryEntity</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Price = model.Price,</span><br><span class=\"line\">                    CreatedOn = DateTime.UtcNow</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Set&lt;ProductEntity&gt;().AddAsync(product, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">await</span> tx.CommitAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CreateProductResultModel</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = externalId</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreateProductModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Price &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime PriceChangedOn &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreateProductResultModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Right now, the project content should look as follows:</p>\n<img src=\"/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/05_project_structure.png\" class=\"\">\n\n<h1 id=\"Dapper-Integration\"><a href=\"#Dapper-Integration\" class=\"headerlink\" title=\"Dapper Integration\"></a>Dapper Integration</h1><p>Now that we have a running API that manages products and their prices using Entity Framework Core, we can now integrate Dapper into the solution and apply what we learned at the start of this article.</p>\n<p>Install the Nuget <code>Dapper</code>:</p>\n<img src=\"/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/06_nuget_dapper.png\" class=\"\">\n\n<p>Since Dapper uses extension methods over <code>IDbConnection</code> and we can extract everything needed from a <code>DbContext</code> instance (even an <code>ILogger</code> to log our raw SQL), lets keep that philosophy and replicate those extension methods but this time to an Entity Framework Core context.</p>\n<p>Inside the <code>Database</code> folder create a static <code>DapperDbContextExtensions</code> class, that will containing all the extension methods, and a <code>DapperEFCoreCommand</code> structure, used to wrap both logging and Dapper’s <code>CommandDefinition</code>.</p>\n<p>For demo purposes we are only going to expose methods to query a collection of items and to execute commands but feel free to add your owns (like <code>FirstAsync</code>). I also put the <code>CancellationToken</code> at the start since all other parameters are optional and I have my fair share of cancellation tokens being passed as the <code>object parameters</code>, but change them in a way that makes more sense to you.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">DapperDbContextExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">IEnumerable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"title\">QueryAsync</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> text,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">object</span> parameters = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">int</span>? timeout = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CommandType? type = <span class=\"literal\">null</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> command = <span class=\"keyword\">new</span> DapperEFCoreCommand(</span><br><span class=\"line\">            context,</span><br><span class=\"line\">            text,</span><br><span class=\"line\">            parameters,</span><br><span class=\"line\">            timeout,</span><br><span class=\"line\">            type,</span><br><span class=\"line\">            ct</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> connection = context.Database.GetDbConnection();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> connection.QueryAsync&lt;T&gt;(command.Definition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"built_in\">int</span>&gt; <span class=\"title\">ExecuteAsync</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> text,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">object</span> parameters = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">int</span>? timeout = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CommandType? type = <span class=\"literal\">null</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> command = <span class=\"keyword\">new</span> DapperEFCoreCommand(</span><br><span class=\"line\">            context,</span><br><span class=\"line\">            text,</span><br><span class=\"line\">            parameters,</span><br><span class=\"line\">            timeout,</span><br><span class=\"line\">            type,</span><br><span class=\"line\">            ct</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> connection = context.Database.GetDbConnection();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> connection.ExecuteAsync(command.Definition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">struct</span> DapperEFCoreCommand : IDisposable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ILogger&lt;DapperEFCoreCommand&gt; _logger;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DapperEFCoreCommand</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> text,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">object</span> parameters,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">int</span>? timeout,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CommandType? type,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger = context.GetService&lt;ILogger&lt;DapperEFCoreCommand&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> transaction = context.Database.CurrentTransaction?.GetDbTransaction();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> commandType = type ?? CommandType.Text;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> commandTimeout = timeout ?? context.Database.GetCommandTimeout() ?? <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Definition = <span class=\"keyword\">new</span> CommandDefinition(</span><br><span class=\"line\">            text,</span><br><span class=\"line\">            parameters,</span><br><span class=\"line\">            transaction,</span><br><span class=\"line\">            commandTimeout,</span><br><span class=\"line\">            commandType,</span><br><span class=\"line\">            cancellationToken: ct</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_logger.IsEnabled(LogLevel.Debug))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _logger.LogDebug(</span><br><span class=\"line\">                <span class=\"string\">@&quot;Executing DbCommand [CommandType=&#x27;&#123;commandType&#125;&#x27;, CommandTimeout=&#x27;&#123;commandTimeout&#125;&#x27;]</span></span><br><span class=\"line\"><span class=\"string\">&#123;commandText&#125;&quot;</span>, Definition.CommandType, Definition.CommandTimeout, Definition.CommandText);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CommandDefinition Definition &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_logger.IsEnabled(LogLevel.Information))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _logger.LogInformation(</span><br><span class=\"line\">                <span class=\"string\">@&quot;Executed DbCommand [CommandType=&#x27;&#123;commandType&#125;&#x27;, CommandTimeout=&#x27;&#123;commandTimeout&#125;&#x27;]</span></span><br><span class=\"line\"><span class=\"string\">&#123;commandText&#125;&quot;</span>, Definition.CommandType, Definition.CommandTimeout, Definition.CommandText);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Since we are using <code>Guid</code> properties in our models but they are stored as <code>TEXT</code> and Dapper doesn’t know how to do the conversion when reading from a SQLite database, we also need to add a global type handler.</p>\n<p>Open the <code>Startup.cs</code> file, create an inner class <code>GuidTypeHandler</code>, that will parse the string into a <code>Guid</code>, and register the handler on application startup:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SqlMapper.AddTypeHandler(<span class=\"keyword\">new</span> GuidTypeHandler());</span><br><span class=\"line\">        </span><br><span class=\"line\">        services.AddDbContext&lt;ApiDbContext&gt;(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.UseSqlite(ConnectionString);</span><br><span class=\"line\">        &#125;).AddTransient&lt;ApiDbSqlRunner&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title\">GuidTypeHandler</span> : <span class=\"title\">SqlMapper.TypeHandler</span>&lt;<span class=\"title\">Guid</span>&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">SetValue</span>(<span class=\"params\">IDbDataParameter parameter, Guid <span class=\"keyword\">value</span></span>)</span> =&gt; parameter.Value = <span class=\"keyword\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> Guid <span class=\"title\">Parse</span>(<span class=\"params\"><span class=\"built_in\">object</span> <span class=\"keyword\">value</span></span>)</span> =&gt; Guid.Parse((<span class=\"built_in\">string</span>) <span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Optimizations-with-Dapper\"><a href=\"#Optimizations-with-Dapper\" class=\"headerlink\" title=\"Optimizations with Dapper\"></a>Optimizations with Dapper</h1><p>As stated before, Entity Framework will usually make it easier to access the database and remove some of the boilerplate code but, like most advanced frameworks, it has some drawbacks, specially performance degradation that sometimes can’t be ignored in critical paths.</p>\n<p>Lets analyse each endpoint and see if we can improve both the generated SQL and the total of database interactions.</p>\n<h2 id=\"POST-products\"><a href=\"#POST-products\" class=\"headerlink\" title=\"POST &#x2F;products\"></a>POST &#x2F;products</h2><p>This endpoint is responsible to create a product with a given initial price. Because prices are stored in a history table, being the most recent entry the current product price, this action has to insert both a line in the products and price history tables.</p>\n<p>If we look at the logs we can see two commands being executed by the Entity Framework with a total of four operations:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: Microsoft.EntityFrameworkCore.Database.Command[20101]</span><br><span class=\"line\">      Executed DbCommand (6ms) [Parameters=[@p0=&#x27;?&#x27; (Size = 8), @p1=&#x27;?&#x27;, @p2=&#x27;?&#x27; (Size = 16)], CommandType=&#x27;Text&#x27;, CommandTimeout=&#x27;30&#x27;]</span><br><span class=\"line\">      INSERT INTO &quot;Product&quot; (&quot;Code&quot;, &quot;ExternalId&quot;, &quot;Name&quot;)</span><br><span class=\"line\">      VALUES (@p0, @p1, @p2);</span><br><span class=\"line\">      SELECT &quot;Id&quot;</span><br><span class=\"line\">      FROM &quot;Product&quot;</span><br><span class=\"line\">      WHERE changes() = 1 AND &quot;rowid&quot; = last_insert_rowid();</span><br><span class=\"line\">info: Microsoft.EntityFrameworkCore.Database.Command[20101]</span><br><span class=\"line\">      Executed DbCommand (1ms) [Parameters=[@p3=&#x27;?&#x27;, @p4=&#x27;?&#x27;, @p5=&#x27;?&#x27;], CommandType=&#x27;Text&#x27;, CommandTimeout=&#x27;30&#x27;]</span><br><span class=\"line\">      INSERT INTO &quot;PriceHistory&quot; (&quot;CreatedOn&quot;, &quot;Price&quot;, &quot;ProductId&quot;)</span><br><span class=\"line\">      VALUES (@p3, @p4, @p5);</span><br><span class=\"line\">      SELECT &quot;Id&quot;</span><br><span class=\"line\">      FROM &quot;PriceHistory&quot;</span><br><span class=\"line\">      WHERE changes() = 1 AND &quot;rowid&quot; = last_insert_rowid();</span><br></pre></td></tr></table></figure>\n\n<p>This happens because Entity Framework and the SQLite provider don’t know what our code needs from each entity after an insert, so the only option is to execute a command that does the insert, selects database generated columns, and update properties of the tracked instances, in this case, the primary keys.</p>\n<p>Since we know our code doesn’t need anything from the database, because we are only returning the product external id that was calculated inside the controller, we can execute a single SQL statement containing both inserts:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO Product (ExternalId, Code, Name)</span><br><span class=\"line\">VALUES (@ExternalId, @Code, @Name);</span><br><span class=\"line\">INSERT INTO PriceHistory (Price, CreatedOn, ProductId)</span><br><span class=\"line\">SELECT @Price, @CreatedOn, Id</span><br><span class=\"line\">FROM Product</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">    rowid = last_insert_rowid();</span><br></pre></td></tr></table></figure>\n\n<p>Change the <code>CreateAsync</code> action to use the extension method <code>ExecuteAsync</code> with this statement, passing the arguments. Keep in mind that SQLite is case sensitive when parsing the parameter name, so you must ensure the anonymous object property names match with the ones inside the statement:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;products&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductsController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;CreateProductResultModel&gt; <span class=\"title\">CreateAsync</span>(<span class=\"params\">[FromBody] CreateProductModel model, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> externalId = Guid.NewGuid();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> tx = <span class=\"keyword\">await</span> _context.Database.BeginTransactionAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.ExecuteAsync(ct, <span class=\"string\">@&quot;</span></span><br><span class=\"line\"><span class=\"string\">INSERT INTO Product (ExternalId, Code, Name)</span></span><br><span class=\"line\"><span class=\"string\">VALUES (@ExternalId, @Code, @Name);</span></span><br><span class=\"line\"><span class=\"string\">INSERT INTO PriceHistory (Price, CreatedOn, ProductId)</span></span><br><span class=\"line\"><span class=\"string\">SELECT @Price, @CreatedOn, Id</span></span><br><span class=\"line\"><span class=\"string\">FROM Product</span></span><br><span class=\"line\"><span class=\"string\">WHERE</span></span><br><span class=\"line\"><span class=\"string\">    rowid = last_insert_rowid();&quot;</span>, <span class=\"keyword\">new</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExternalId = externalId,</span><br><span class=\"line\">            model.Code,</span><br><span class=\"line\">            model.Name,</span><br><span class=\"line\">            model.Price,</span><br><span class=\"line\">            CreatedOn = DateTime.UtcNow</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">await</span> tx.CommitAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CreateProductResultModel</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = externalId</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Remember that, even if we are executing a single command in the database, it contains two instructions so it still must be wrapped by an explicit database transaction.</em></p>\n<p>When creating a new product using the Swagger UI endpoint (<a href=\"https://localhost:44310/swagger/index.html\">https://localhost:44310/swagger/index.html</a>), if you look at your Visual Studio output console, a log similar to the following should appear showing the custom SQL:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbug: EntityFrameworkCoreWithDapper.Database.DapperEFCoreCommand[0]</span><br><span class=\"line\">      Executing DbCommand [CommandType=&#x27;Text&#x27;, CommandTimeout=&#x27;30&#x27;]</span><br><span class=\"line\">      </span><br><span class=\"line\">      INSERT INTO Product (ExternalId, Code, Name)</span><br><span class=\"line\">      VALUES (@ExternalId, @Code, @Name);</span><br><span class=\"line\">      </span><br><span class=\"line\">      INSERT INTO PriceHistory (Price, CreatedOn, ProductId)</span><br><span class=\"line\">      SELECT @Price, @CreatedOn, Id</span><br><span class=\"line\">      FROM Product</span><br><span class=\"line\">      WHERE</span><br><span class=\"line\">          rowid = last_insert_rowid();</span><br><span class=\"line\">info: EntityFrameworkCoreWithDapper.Database.DapperEFCoreCommand[0]</span><br><span class=\"line\">      Executed DbCommand [CommandType=&#x27;Text&#x27;, CommandTimeout=&#x27;30&#x27;]</span><br><span class=\"line\">      </span><br><span class=\"line\">      INSERT INTO Product (ExternalId, Code, Name)</span><br><span class=\"line\">      VALUES (@ExternalId, @Code, @Name);</span><br><span class=\"line\">      </span><br><span class=\"line\">      INSERT INTO PriceHistory (Price, CreatedOn, ProductId)</span><br><span class=\"line\">      SELECT @Price, @CreatedOn, Id</span><br><span class=\"line\">      FROM Product</span><br><span class=\"line\">      WHERE</span><br><span class=\"line\">          rowid = last_insert_rowid();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"GET-products\"><a href=\"#GET-products\" class=\"headerlink\" title=\"GET &#x2F;products\"></a>GET &#x2F;products</h2><p>This endpoint is responsible for returning a paginated collections of products with their current price and the timestamp when it was last updated, ordered by product code.</p>\n<p>Lets extract the SQL statement generated by the Entity Framework Core from the logs:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: Microsoft.EntityFrameworkCore.Database.Command[20101]</span><br><span class=\"line\">      Executed DbCommand (3ms) [Parameters=[@__p_1=&#x27;?&#x27;, @__p_0=&#x27;?&#x27;], CommandType=&#x27;Text&#x27;, CommandTimeout=&#x27;30&#x27;]</span><br><span class=\"line\">      SELECT &quot;p1&quot;.&quot;ExternalId&quot; AS &quot;Id&quot;, &quot;p1&quot;.&quot;Code&quot;, &quot;p1&quot;.&quot;Name&quot;, (</span><br><span class=\"line\">          SELECT &quot;p&quot;.&quot;Price&quot;</span><br><span class=\"line\">          FROM &quot;PriceHistory&quot; AS &quot;p&quot;</span><br><span class=\"line\">          WHERE &quot;p1&quot;.&quot;Id&quot; = &quot;p&quot;.&quot;ProductId&quot;</span><br><span class=\"line\">          ORDER BY &quot;p&quot;.&quot;CreatedOn&quot; DESC</span><br><span class=\"line\">          LIMIT 1) AS &quot;Price&quot;, (</span><br><span class=\"line\">          SELECT &quot;p0&quot;.&quot;CreatedOn&quot;</span><br><span class=\"line\">          FROM &quot;PriceHistory&quot; AS &quot;p0&quot;</span><br><span class=\"line\">          WHERE &quot;p1&quot;.&quot;Id&quot; = &quot;p0&quot;.&quot;ProductId&quot;</span><br><span class=\"line\">          ORDER BY &quot;p0&quot;.&quot;CreatedOn&quot; DESC</span><br><span class=\"line\">          LIMIT 1) AS &quot;PriceChangedOn&quot;</span><br><span class=\"line\">      FROM &quot;Product&quot; AS &quot;p1&quot;</span><br><span class=\"line\">      ORDER BY &quot;p1&quot;.&quot;Code&quot;</span><br><span class=\"line\">      LIMIT @__p_1 OFFSET @__p_0</span><br></pre></td></tr></table></figure>\n\n<p>As we can see, because we need both the Price and CreatedOn columns from the most recent price history entry, the SQLite provider decided to create two sub-queries. The database engine is relatively smart to know how to optimize them but lets ensure the engine optimizes the access as follows:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. order products by code</span><br><span class=\"line\">2. filter products by skip and take</span><br><span class=\"line\">3. join with latest price history entry, grouped by product, using the ROWID for fast access</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT p.ExternalId as Id, p.Code, p.Name, lph.Price, lph.CreatedOn as PriceChangedOn</span><br><span class=\"line\">FROM (</span><br><span class=\"line\">    SELECT Id, ExternalId, Code, Name, RowId</span><br><span class=\"line\">    FROM Product</span><br><span class=\"line\">    ORDER BY Code DESC</span><br><span class=\"line\">    LIMIT @Take OFFSET @Skip</span><br><span class=\"line\">) p</span><br><span class=\"line\">INNER JOIN (</span><br><span class=\"line\">    SELECT ph.ProductId, ph.Price, ph.CreatedOn</span><br><span class=\"line\">    FROM PriceHistory ph</span><br><span class=\"line\">    INNER JOIN (</span><br><span class=\"line\">        SELECT MAX(RowId) RowId</span><br><span class=\"line\">        FROM PriceHistory</span><br><span class=\"line\">        GROUP BY ProductId</span><br><span class=\"line\">    ) phLatest ON ph.RowId = phLatest.RowId</span><br><span class=\"line\">) lph ON p.Id = lph.ProductId</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><em>Note: this may not be the most optimized access but remember, this is for demo purposes.</em></p>\n<p>Change the <code>GetAllAsync</code> action to use the <code>QueryAsync&lt;T&gt;</code> extension method, passing this SQL and both the skip and take as arguments.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;products&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductsController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">IEnumerable</span>&lt;<span class=\"title\">ProductModel</span>&gt;&gt; <span class=\"title\">GetAllAsync</span>(<span class=\"params\">[FromQuery] <span class=\"built_in\">int</span>? skip, [FromQuery] <span class=\"built_in\">int</span>? take, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.QueryAsync&lt;ProductModel&gt;(ct, <span class=\"string\">@&quot;</span></span><br><span class=\"line\"><span class=\"string\">SELECT p.ExternalId as Id, p.Code, p.Name, lph.Price, lph.CreatedOn as PriceChangedOn</span></span><br><span class=\"line\"><span class=\"string\">FROM (</span></span><br><span class=\"line\"><span class=\"string\">    SELECT Id, ExternalId, Code, Name, RowId</span></span><br><span class=\"line\"><span class=\"string\">    FROM Product</span></span><br><span class=\"line\"><span class=\"string\">    ORDER BY Code DESC</span></span><br><span class=\"line\"><span class=\"string\">    LIMIT @Take OFFSET @Skip</span></span><br><span class=\"line\"><span class=\"string\">) p</span></span><br><span class=\"line\"><span class=\"string\">INNER JOIN (</span></span><br><span class=\"line\"><span class=\"string\">    SELECT ph.ProductId, ph.Price, ph.CreatedOn</span></span><br><span class=\"line\"><span class=\"string\">    FROM PriceHistory ph</span></span><br><span class=\"line\"><span class=\"string\">    INNER JOIN (</span></span><br><span class=\"line\"><span class=\"string\">        SELECT MAX(RowId) RowId</span></span><br><span class=\"line\"><span class=\"string\">        FROM PriceHistory</span></span><br><span class=\"line\"><span class=\"string\">        GROUP BY ProductId</span></span><br><span class=\"line\"><span class=\"string\">    ) phLatest ON ph.RowId = phLatest.RowId</span></span><br><span class=\"line\"><span class=\"string\">) lph ON p.Id = lph.ProductId&quot;</span>, <span class=\"keyword\">new</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Skip = skip ?? <span class=\"number\">0</span>,</span><br><span class=\"line\">            Take = take ?? <span class=\"number\">20</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Because we globally registered our <code>GuidTypeHandler</code>, Dapper will know how to convert the column <code>ExternalId [TEXT]</code> as a <code>Guid</code> so we can map our result directly as a <code>ProductModel</code> type.</p>\n<p>Once again, if you invoke the endpoint using the Swagger UI, the folowing log should be visible:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbug: EntityFrameworkCoreWithDapper.Database.DapperEFCoreCommand[0]</span><br><span class=\"line\">      Executing DbCommand [CommandType=&#x27;Text&#x27;, CommandTimeout=&#x27;30&#x27;]</span><br><span class=\"line\">      </span><br><span class=\"line\">      SELECT p.ExternalId as Id, p.Code, p.Name, lph.Price, lph.CreatedOn as PriceChangedOn</span><br><span class=\"line\">      FROM (</span><br><span class=\"line\">          SELECT Id, ExternalId, Code, Name, RowId</span><br><span class=\"line\">          FROM Product</span><br><span class=\"line\">          ORDER BY Code DESC</span><br><span class=\"line\">          LIMIT @Take OFFSET @Skip</span><br><span class=\"line\">      ) p</span><br><span class=\"line\">      INNER JOIN (</span><br><span class=\"line\">          SELECT ph.ProductId, ph.Price, ph.CreatedOn</span><br><span class=\"line\">          FROM PriceHistory ph</span><br><span class=\"line\">          INNER JOIN (</span><br><span class=\"line\">              SELECT MAX(RowId) RowId</span><br><span class=\"line\">              FROM PriceHistory</span><br><span class=\"line\">              GROUP BY ProductId</span><br><span class=\"line\">          ) phLatest ON ph.RowId = phLatest.RowId</span><br><span class=\"line\">      ) lph ON p.Id = lph.ProductId</span><br><span class=\"line\">info: EntityFrameworkCoreWithDapper.Database.DapperEFCoreCommand[0]</span><br><span class=\"line\">      Executed DbCommand [CommandType=&#x27;Text&#x27;, CommandTimeout=&#x27;30&#x27;]</span><br><span class=\"line\">      </span><br><span class=\"line\">      SELECT p.ExternalId as Id, p.Code, p.Name, lph.Price, lph.CreatedOn as PriceChangedOn</span><br><span class=\"line\">      FROM (</span><br><span class=\"line\">          SELECT Id, ExternalId, Code, Name, RowId</span><br><span class=\"line\">          FROM Product</span><br><span class=\"line\">          ORDER BY Code DESC</span><br><span class=\"line\">          LIMIT @Take OFFSET @Skip</span><br><span class=\"line\">      ) p</span><br><span class=\"line\">      INNER JOIN (</span><br><span class=\"line\">          SELECT ph.ProductId, ph.Price, ph.CreatedOn</span><br><span class=\"line\">          FROM PriceHistory ph</span><br><span class=\"line\">          INNER JOIN (</span><br><span class=\"line\">              SELECT MAX(RowId) RowId</span><br><span class=\"line\">              FROM PriceHistory</span><br><span class=\"line\">              GROUP BY ProductId</span><br><span class=\"line\">          ) phLatest ON ph.RowId = phLatest.RowId</span><br><span class=\"line\">      ) lph ON p.Id = lph.ProductId</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I hope this article gave you a good idea on how to easily integrate Dapper with Entity Framework Core, either to optimize critical paths or to workaround limitations while removing the need to use <code>TransactionScope</code>, usually needed for these use cases.</p>\n<p>Remember that I only implemented a few set of operations, but feel free to extend your own, like <code>FirstOrDefaultAsync</code>, <code>SingleAsync</code> and even their synchronous operations.</p>\n<p>As an extended note, this approach can also be easily applied to any other ORM, like NHibernate, as long you can access the underline <code>DbConnection</code> and current <code>DbTransaction</code> from the context.</p>\n",
            "tags": [
                "dotnetcore",
                "aspnetcore",
                "csharp",
                "efcore",
                "dapper"
            ]
        },
        {
            "id": "https://code-corner.dev/2020/11/25/Auditing-with-Mediator-Pipelines-in-ASP-NET-Core/",
            "url": "https://code-corner.dev/2020/11/25/Auditing-with-Mediator-Pipelines-in-ASP-NET-Core/",
            "title": "Auditing with Mediator Pipelines in ASP.NET Core",
            "date_published": "2020-11-25T00:00:00.000Z",
            "content_html": "<p>When implementing a web application, it can be a good idea to enforce some kind of auditing to all of your client interactions, either to track their behavior over time, to ensure any security breach will be properly logged, or just to help analyze system bugs.</p>\n<p>Previously we talked about using the mediator pattern to implement the <strong>Command Query Responsibility Segregation (CQRS)</strong> and <strong>Event Sourcing (ES)</strong> and how pipelines could be used to implement transversal behavior to your application.</p>\n<p>Since commands are responsible to mutate the system state, in this article I’m going to demonstrate how you could implement an audit pipeline to ensure all commands will be stored into a table. Because a variable number of events can be broadcasted when the state changes, the pipeline will also store them into another table and with a reference to the command, ensuring any correlation can be analyzed.</p>\n<hr>\n<h1 id=\"The-project\"><a href=\"#The-project\" class=\"headerlink\" title=\"The project\"></a>The project</h1><p>From my previous articles, were I explained how to use the mediator and implement transversal behavior with pipelines, we are going to continue and expand the source code to audit commands and store into the events table anything broadcasted by the mediator without having a specific handler for each event.</p>\n<p>As a reminder, we implemented an endpoint to manage products with the following:</p>\n<p>GET &#x2F;products — search for products using some filters (<code>SearchProductsQuery</code>);<br>GET &#x2F;products&#x2F;{id} — get a product by its unique identifier (<code>GetProductByIdQuery</code>);<br>POST &#x2F;products — create a product (<code>CreateProductCommand</code> and <code>CreatedProductEvent</code>);<br>PUT &#x2F;products&#x2F;{id} — update a product by its unique identifier (<code>UpdateProductCommand</code> and <code>UpdatedProductEvent</code>);<br>DELETE &#x2F;products&#x2F;{id} — delete a product by its unique identifier (<code>DeleteProductCommand</code> and <code>DeletedProductEvent</code>);</p>\n<p>You can check them out here:</p>\n<ul>\n<li><a href=\"/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/\" title=\"Mediator Pattern in ASP.NET Core Applications\">Mediator Pattern in ASP.NET Core Applications</a></li>\n<li><a href=\"/2020/11/02/Using-Mediator-Pipelines-in-ASP-NET-Core-Applications/\" title=\"Using Mediator Pipelines in ASP.NET Core Applications\">Using Mediator Pipelines in ASP.NET Core Applications</a></li>\n<li><a href=\"/2020/11/04/Validation-with-Mediator-Pipelines-in-ASP-NET-Core-Applications/\" title=\"Validation with Mediator Pipelines in ASP.NET Core Applications\">Validation with Mediator Pipelines in ASP.NET Core Applications</a></li>\n<li><a href=\"/2020/11/07/Transaction-Management-With-Mediator-Pipelines-in-ASP-NET-Core/\" title=\"Transaction Management With Mediator Pipelines in ASP.NET Core\">Transaction Management With Mediator Pipelines in ASP.NET Core</a></li>\n</ul>\n<p>The source code is available on <a href=\"https://github.com/gravity00/IntroductionMediatorCQRS\">GitHub</a>, feel free to give it a look.</p>\n<h1 id=\"Auditing\"><a href=\"#Auditing\" class=\"headerlink\" title=\"Auditing\"></a>Auditing</h1><p>Since in this article we will only audit API actions that mutate state, we are going to intercept commands and store information we find relevant into a specific table:</p>\n<ul>\n<li><strong>ExternalId</strong> — the unique identifier for each command, available via <code>Command.Id</code> or <code>Command&lt;TResult&gt;.Id</code>;</li>\n<li><strong>Name</strong> — the command type name from <code>typeof(TCommand).Name</code>;</li>\n<li><strong>Payload</strong> — the command serialized as JSON;</li>\n<li><strong>Result</strong> — if available, the command result serialized as JSON;</li>\n<li><strong>CreatedOn</strong> — date and time when the command was sent into the mediator, available via <code>Command.CreatedOn</code> or <code>Command&lt;TResult&gt;.CreatedOn</code>;</li>\n<li><strong>CreatedBy</strong> — username from the current request user property, available via <code>Command.CreatedBy</code> or <code>Command&lt;TResult&gt;.CreatedBy</code>;</li>\n<li><strong>ExecutionTime</strong> — elapsed time the handler spent processing the command;</li>\n</ul>\n<p>Because events are broadcasted by commands, which are now audited into the database, we are also going to extend the events table and introduce the foreign key <code>CommandId</code>, referencing the commands.</p>\n<h1 id=\"The-Database-Model\"><a href=\"#The-Database-Model\" class=\"headerlink\" title=\"The Database Model\"></a>The Database Model</h1><p>Inside the <code>Database</code> folder create a <code>CommandEntity</code> class and add the new <code>CommandId</code> property to the existing <code>EventEntity</code>:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CommandEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid ExternalId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Payload &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Result &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTimeOffset CreatedOn &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> CreatedBy &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TimeSpan ExecutionTime &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EventEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> CommandId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; <span class=\"comment\">// added property</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid ExternalId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Payload &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTimeOffset CreatedOn &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> CreatedBy &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>ApiDbContext</code> file, configure the mappings for the <code>CommandEntity</code> and add a required one-to-many relation between this tables:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ApiDbContext</span> : <span class=\"title\">DbContext</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnModelCreating</span>(<span class=\"params\">ModelBuilder builder</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">        builder.Entity&lt;CommandEntity&gt;(cfg =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cfg.HasKey(e =&gt; e.Id);</span><br><span class=\"line\">            cfg.HasAlternateKey(e =&gt; e.ExternalId);</span><br><span class=\"line\">            cfg.HasIndex(e =&gt; e.CreatedOn);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Id)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .ValueGeneratedOnAdd();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.ExternalId)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Name)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">128</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Payload)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Result);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.CreatedOn)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.CreatedBy)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">128</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.ExecutionTime)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.Entity&lt;EventEntity&gt;(cfg =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cfg.HasKey(e =&gt; e.Id);</span><br><span class=\"line\">            cfg.HasAlternateKey(e =&gt; e.ExternalId);</span><br><span class=\"line\">            cfg.HasIndex(e =&gt; e.CreatedOn);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Id)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .ValueGeneratedOnAdd();</span><br><span class=\"line\">            cfg.HasOne&lt;CommandEntity&gt;()</span><br><span class=\"line\">                .WithMany()</span><br><span class=\"line\">                .HasForeignKey(e =&gt; e.CommandId)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.ExternalId)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Name)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">128</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Payload)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.CreatedOn)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.CreatedBy)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">128</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"User-Information\"><a href=\"#User-Information\" class=\"headerlink\" title=\"User Information\"></a>User Information</h1><p>By design, all POCOs provided in this library are immutable and only provide a protected setter for the properties <code>Id</code>, <code>CreatedOn</code> and <code>CreatedBy</code>. This ensures the developer is free to decide either by immutable commands, queries and events, initializing all properties in the constructor, or to expose a public setter instead.</p>\n<p>Since we haven’t made our POCOs immutable, and for demo purposes, we are going to expose a public setter for the <code>CreatedBy</code> property by implementing our own command, query and event classes.</p>\n<p>Inside the <code>Handlers</code> folder create a <code>Command.cs</code>, <code>Query.cs</code> and <code>Event.cs</code> files and extend the corresponding <code>Command</code>, <code>Command&lt;TResult&gt;</code>, <code>Query&lt;TResult&gt;</code> and <code>Event</code> classes, creating a new setter ao getter for <code>CreatedBy</code>. Since your classes have the same name than the ones provided by <code>Simplesoft.Mediator</code>, your existing classes will automatically extend from them and expose the new setters without a single change:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Command</span> : <span class=\"title\">SimpleSoft.Mediator.Command</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">new</span> <span class=\"built_in\">string</span> CreatedBy</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> =&gt; <span class=\"keyword\">base</span>.CreatedBy;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> =&gt; <span class=\"keyword\">base</span>.CreatedBy = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Command</span>&lt;<span class=\"title\">TResult</span>&gt; : <span class=\"title\">SimpleSoft.Mediator.Command</span>&lt;<span class=\"title\">TResult</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">new</span> <span class=\"built_in\">string</span> CreatedBy</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> =&gt; <span class=\"keyword\">base</span>.CreatedBy;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> =&gt; <span class=\"keyword\">base</span>.CreatedBy = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Event</span> : <span class=\"title\">SimpleSoft.Mediator.Event</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">new</span> <span class=\"built_in\">string</span> CreatedBy</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> =&gt; <span class=\"keyword\">base</span>.CreatedBy;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> =&gt; <span class=\"keyword\">base</span>.CreatedBy = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Query</span>&lt;<span class=\"title\">TResult</span>&gt; : <span class=\"title\">SimpleSoft.Mediator.Query</span>&lt;<span class=\"title\">TResult</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">new</span> <span class=\"built_in\">string</span> CreatedBy</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> =&gt; <span class=\"keyword\">base</span>.CreatedBy;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> =&gt; <span class=\"keyword\">base</span>.CreatedBy = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The project solution should look like this:</p>\n<img src=\"/2020/11/25/Auditing-with-Mediator-Pipelines-in-ASP-NET-Core/01_project_structure_auditing.png\" class=\"\">\n\n<p>Open your <code>ProductsController.cs</code> file and set the CreatedBy property of all the commands and queries with the property <code>User.Identity.Name</code>.</p>\n<p>Please keep in your mind that, since we haven’t configured authentication in this API, the username value will always be null.</p>\n<p>After changes, your controller actions should look as follows:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;products&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductsController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IMediator _mediator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProductsController</span>(<span class=\"params\">IMediator mediator</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _mediator = mediator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IEnumerable&lt;ProductModel&gt;&gt; SearchAsync([FromQuery] <span class=\"built_in\">string</span> filterQ, [FromQuery] <span class=\"built_in\">int</span>? skip, [FromQuery] <span class=\"built_in\">int</span>? take, CancellationToken ct)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> _mediator.FetchAsync(<span class=\"keyword\">new</span> SearchProductsQuery</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            FilterQ = filterQ,</span><br><span class=\"line\">            Skip = skip,</span><br><span class=\"line\">            Take = take,</span><br><span class=\"line\">            CreatedBy = User.Identity.Name</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.Select(r =&gt; <span class=\"keyword\">new</span> ProductModel</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = r.Id,</span><br><span class=\"line\">            Code = r.Code,</span><br><span class=\"line\">            Name = r.Name,</span><br><span class=\"line\">            Price = r.Price</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet(<span class=\"string\">&quot;&#123;id:guid&#125;&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;ProductModel&gt; <span class=\"title\">GetByIdAsync</span>(<span class=\"params\">[FromRoute] Guid id, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> _mediator.FetchAsync(<span class=\"keyword\">new</span> GetProductByIdQuery</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ProductId = id,</span><br><span class=\"line\">            CreatedBy = User.Identity.Name</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductModel</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = result.Id,</span><br><span class=\"line\">            Code = result.Code,</span><br><span class=\"line\">            Name = result.Name,</span><br><span class=\"line\">            Price = result.Price</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;CreateProductResultModel&gt; <span class=\"title\">CreateAsync</span>(<span class=\"params\">[FromBody] CreateProductModel model, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> _mediator.SendAsync(<span class=\"keyword\">new</span> CreateProductCommand</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Code = model.Code,</span><br><span class=\"line\">            Name = model.Name,</span><br><span class=\"line\">            Price = model.Price,</span><br><span class=\"line\">            CreatedBy = User.Identity.Name</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CreateProductResultModel</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = result.Id</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpPut(<span class=\"string\">&quot;&#123;id:guid&#125;&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">UpdateAsync</span>(<span class=\"params\">[FromRoute] Guid id, [FromBody] UpdateProductModel model, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _mediator.SendAsync(<span class=\"keyword\">new</span> UpdateProductCommand</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ProductId = id,</span><br><span class=\"line\">            Code = model.Code,</span><br><span class=\"line\">            Name = model.Name,</span><br><span class=\"line\">            Price = model.Price,</span><br><span class=\"line\">            CreatedBy = User.Identity.Name</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpDelete(<span class=\"string\">&quot;&#123;id:guid&#125;&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">DeleteAsync</span>(<span class=\"params\">[FromRoute] Guid id, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _mediator.SendAsync(<span class=\"keyword\">new</span> DeleteProductCommand</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ProductId = id,</span><br><span class=\"line\">            CreatedBy = User.Identity.Name</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We also want to pass the same username to all of our events, so open the command handlers and set the event <code>CreatedBy</code> property with the same value from the command, as exemplified by the following handler:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreateProductCommandHandler</span> : <span class=\"title\">ICommandHandler</span>&lt;<span class=\"title\">CreateProductCommand</span>, <span class=\"title\">CreateProductResult</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ApiDbContext _context;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IMediator _mediator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CreateProductCommandHandler</span>(<span class=\"params\">ApiDbContext context, IMediator mediator</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">        _mediator = mediator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;CreateProductResult&gt; <span class=\"title\">HandleAsync</span>(<span class=\"params\">CreateProductCommand cmd, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> products = _context.Set&lt;ProductEntity&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">await</span> products.AnyAsync(p =&gt; p.Code == cmd.Code, ct))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">$&quot;Product code &#x27;<span class=\"subst\">&#123;cmd.Code&#125;</span>&#x27; already exists&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> externalId = Guid.NewGuid();</span><br><span class=\"line\">        <span class=\"keyword\">await</span> products.AddAsync(<span class=\"keyword\">new</span> ProductEntity</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExternalId = externalId,</span><br><span class=\"line\">            Code = cmd.Code,</span><br><span class=\"line\">            Name = cmd.Name,</span><br><span class=\"line\">            Price = cmd.Price</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _mediator.BroadcastAsync(<span class=\"keyword\">new</span> CreatedProductEvent</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExternalId = externalId,</span><br><span class=\"line\">            Code = cmd.Code,</span><br><span class=\"line\">            Name = cmd.Name,</span><br><span class=\"line\">            Price = cmd.Price,</span><br><span class=\"line\">            CreatedBy = cmd.CreatedBy  <span class=\"comment\">// use the same value</span></span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CreateProductResult</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = externalId</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-Audit-Pipeline\"><a href=\"#The-Audit-Pipeline\" class=\"headerlink\" title=\"The Audit Pipeline\"></a>The Audit Pipeline</h1><p>Now that we are passing the user information into the mediator we can create the audit pipeline that will have the following behavior when intercepting commands:</p>\n<ol>\n<li>Serialize and insert a new entry into the commands table;</li>\n<li>Add both the command and entry ids into an <code>AsyncLocal&lt;T&gt;</code> scope to be used if an event is broadcast;</li>\n<li>Invoke the next pipe;</li>\n<li>If available, serialize the result, calculate the execution time and update the table entry;</li>\n</ol>\n<p>When intercepting events, which are sent by commands, it will do the following:</p>\n<ol>\n<li>Get the command id from the current <code>AsyncLocal&lt;T&gt;</code> scope;</li>\n<li>Serialize the event and insert a new entry into the events table, referencing the command entry;</li>\n<li>Invoke the next pipe;</li>\n</ol>\n<p>Inside the <code>Pipelines</code> folder, create an <code>AuditPipeline</code> class extending <code>Pipeline</code>. The implementation should be similar to the following:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AuditPipeline</span> : <span class=\"title\">Pipeline</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> DbSet&lt;CommandEntity&gt; _commands;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> DbSet&lt;EventEntity&gt; _events;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AuditPipeline</span>(<span class=\"params\">ApiDbContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _commands = context.Set&lt;CommandEntity&gt;();</span><br><span class=\"line\">        _events = context.Set&lt;EventEntity&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnCommandAsync</span>&lt;<span class=\"title\">TCommand</span>&gt;(<span class=\"params\">Func&lt;TCommand, CancellationToken, Task&gt; next, TCommand cmd, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> command = (<span class=\"keyword\">await</span> _commands.AddAsync(<span class=\"keyword\">new</span> CommandEntity</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExternalId = cmd.Id,</span><br><span class=\"line\">            Name = <span class=\"keyword\">typeof</span>(TCommand).Name,</span><br><span class=\"line\">            Payload = JsonSerializer.Serialize(cmd),</span><br><span class=\"line\">            Result = <span class=\"literal\">null</span>,</span><br><span class=\"line\">            CreatedOn = cmd.CreatedOn,</span><br><span class=\"line\">            CreatedBy = cmd.CreatedBy,</span><br><span class=\"line\">            ExecutionTime = TimeSpan.Zero</span><br><span class=\"line\">        &#125;, ct)).Entity;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">using</span> (CommandScope.Begin(command.ExternalId, command.Id))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">await</span> next(cmd, ct);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        command.ExecutionTime = DateTimeOffset.UtcNow - cmd.CreatedOn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TResult</span>&gt; <span class=\"title\">OnCommandAsync</span>&lt;<span class=\"title\">TCommand</span>, <span class=\"title\">TResult</span>&gt;(<span class=\"params\">Func&lt;TCommand, CancellationToken, Task&lt;TResult&gt;&gt; next, TCommand cmd, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> command = (<span class=\"keyword\">await</span> _commands.AddAsync(<span class=\"keyword\">new</span> CommandEntity</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExternalId = cmd.Id,</span><br><span class=\"line\">            Name = <span class=\"keyword\">typeof</span>(TCommand).Name,</span><br><span class=\"line\">            Payload = JsonSerializer.Serialize(cmd),</span><br><span class=\"line\">            Result = <span class=\"literal\">null</span>,</span><br><span class=\"line\">            CreatedOn = cmd.CreatedOn,</span><br><span class=\"line\">            CreatedBy = cmd.CreatedBy,</span><br><span class=\"line\">            ExecutionTime = TimeSpan.Zero</span><br><span class=\"line\">        &#125;, ct)).Entity;</span><br><span class=\"line\"></span><br><span class=\"line\">        TResult result;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">using</span> (CommandScope.Begin(command.ExternalId, command.Id))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            result = <span class=\"keyword\">await</span> next(cmd, ct);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        command.Result = result == <span class=\"literal\">null</span> ? <span class=\"literal\">null</span> : JsonSerializer.Serialize(result);</span><br><span class=\"line\">        command.ExecutionTime = DateTimeOffset.UtcNow - cmd.CreatedOn;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnEventAsync</span>&lt;<span class=\"title\">TEvent</span>&gt;(<span class=\"params\">Func&lt;TEvent, CancellationToken, Task&gt; next, TEvent evt, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _events.AddAsync(<span class=\"keyword\">new</span> EventEntity</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            CommandId = CommandScope.Current.Id,</span><br><span class=\"line\">            ExternalId = evt.Id,</span><br><span class=\"line\">            Name = <span class=\"keyword\">typeof</span>(TEvent).Name,</span><br><span class=\"line\">            Payload = JsonSerializer.Serialize(evt),</span><br><span class=\"line\">            CreatedOn = evt.CreatedOn,</span><br><span class=\"line\">            CreatedBy = evt.CreatedBy,</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> next(evt, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title\">CommandScope</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">CommandScope</span>(<span class=\"params\">Guid externalId, <span class=\"built_in\">long</span> id</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExternalId = externalId;</span><br><span class=\"line\">            Id = id;</span><br><span class=\"line\"></span><br><span class=\"line\">            AsyncLocal.Value = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Guid ExternalId &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Id &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>()</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            AsyncLocal.Value = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> AsyncLocal&lt;CommandScope&gt; AsyncLocal = <span class=\"keyword\">new</span> AsyncLocal&lt;CommandScope&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CommandScope Current =&gt; AsyncLocal.Value;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> IDisposable <span class=\"title\">Begin</span>(<span class=\"params\">Guid externalId, <span class=\"built_in\">long</span> id</span>)</span> =&gt; <span class=\"keyword\">new</span> CommandScope(externalId, id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>Startup.cs</code> file and register this pipeline to be run after all the existing ones, right before the commands or events are handled.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddDbContext&lt;ApiDbContext&gt;(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.UseInMemoryDatabase(<span class=\"string\">&quot;ApiDbContext&quot;</span>).ConfigureWarnings(warn =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// since InMemoryDatabase does not support transactions</span></span><br><span class=\"line\">                <span class=\"comment\">// for test purposes we are going to ignore this exception</span></span><br><span class=\"line\">                warn.Ignore(InMemoryEventId.TransactionIgnoredWarning);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddMediator(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.AddPipeline&lt;LoggingPipeline&gt;();</span><br><span class=\"line\">            o.AddPipeline&lt;TimeoutPipeline&gt;();</span><br><span class=\"line\">            o.AddPipeline&lt;ValidationPipeline&gt;();</span><br><span class=\"line\">            o.AddPipeline&lt;TransactionPipeline&gt;();</span><br><span class=\"line\">            o.AddPipeline&lt;AuditPipeline&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">var</span> implementationType <span class=\"keyword\">in</span> <span class=\"title\">typeof</span>(<span class=\"params\">Startup</span>)</span></span><br><span class=\"line\"><span class=\"function\">                .Assembly</span></span><br><span class=\"line\"><span class=\"function\">                .ExportedTypes</span></span><br><span class=\"line\"><span class=\"function\">                .<span class=\"title\">Where</span>(<span class=\"params\">t =&gt; t.IsClass &amp;&amp; !t.IsAbstract</span>))</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> serviceType <span class=\"keyword\">in</span> implementationType</span><br><span class=\"line\">                    .GetInterfaces()</span><br><span class=\"line\">                    .Where(i =&gt; i.IsGenericType &amp;&amp; i.GetGenericTypeDefinition() == <span class=\"keyword\">typeof</span>(IValidator&lt;&gt;)))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    o.Services.Add(<span class=\"keyword\">new</span> ServiceDescriptor(serviceType, implementationType, ServiceLifetime.Transient));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            o.AddHandlersFromAssemblyOf&lt;Startup&gt;();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// or, if using the SimpleSoft.Mediator.Microsoft.Extensions.* pipelines</span></span><br><span class=\"line\">        <span class=\"comment\">//services.AddMediator(o =&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    o.AddPipelineForLogging(options =&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">//    &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//        options.LogCommandResult = true;</span></span><br><span class=\"line\">        <span class=\"comment\">//        options.LogQueryResult = true;</span></span><br><span class=\"line\">        <span class=\"comment\">//    &#125;);</span></span><br><span class=\"line\">        <span class=\"comment\">//    o.AddPipeline&lt;TimeoutPipeline&gt;();</span></span><br><span class=\"line\">        <span class=\"comment\">//    o.AddPipelineForValidation(options =&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">//    &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//        options.ValidateCommand = true;</span></span><br><span class=\"line\">        <span class=\"comment\">//        options.ValidateEvent = true;</span></span><br><span class=\"line\">        <span class=\"comment\">//    &#125;);</span></span><br><span class=\"line\">        <span class=\"comment\">//    o.AddPipelineForEFCoreTransaction&lt;ApiDbContext&gt;(options =&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">//    &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//        options.BeginTransactionOnCommand = true;</span></span><br><span class=\"line\">        <span class=\"comment\">//    &#125;);</span></span><br><span class=\"line\">        <span class=\"comment\">//    o.AddPipeline&lt;AuditPipeline&gt;();</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//    o.AddValidatorsFromAssemblyOf&lt;Startup&gt;();</span></span><br><span class=\"line\">        <span class=\"comment\">//    o.AddHandlersFromAssemblyOf&lt;Startup&gt;();</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Because this pipeline is also serializing all events, the existing handlers for <code>CreatedProductEvent</code>, <code>DeletedProductEvent</code> and <code>UpdatedProductEvent</code> can now either be deleted or stop storing their events into the table to prevent duplicated data:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreatedProductEventHandler</span> : <span class=\"title\">IEventHandler</span>&lt;<span class=\"title\">CreatedProductEvent</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ApiDbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CreatedProductEventHandler</span>(<span class=\"params\">ApiDbContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">HandleAsync</span>(<span class=\"params\">CreatedProductEvent evt, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//await _context.Set&lt;EventEntity&gt;().AddAsync(new EventEntity</span></span><br><span class=\"line\">        <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//    ExternalId = evt.Id,</span></span><br><span class=\"line\">        <span class=\"comment\">//    Name = nameof(CreatedProductEvent),</span></span><br><span class=\"line\">        <span class=\"comment\">//    Payload = JsonSerializer.Serialize(evt),</span></span><br><span class=\"line\">        <span class=\"comment\">//    CreatedOn = evt.CreatedOn,</span></span><br><span class=\"line\">        <span class=\"comment\">//    CreatedBy = evt.CreatedBy</span></span><br><span class=\"line\">        <span class=\"comment\">//&#125;, ct);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Task.CompletedTask;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"AsyncLocal\"><a href=\"#AsyncLocal\" class=\"headerlink\" title=\"AsyncLocal\"></a>AsyncLocal<T></h1><p>When comparing the audit pipeline with the previous ones we implemented, the biggest difference is the usage of <code>AsyncLocal&lt;T&gt;</code> to store an instance of the <code>CommandScope</code> class holding both the command external id and the primary key value for the audit entry into the table.</p>\n<p>If you aren’t familiar with this class, it is available since .NET Framework 4.6 and .NET standard 1.3, and was introduced to help sharing global flow state when implementing asynchronous code with Task Parallel Library (TPL). Because TPL relies on the thread pool and, by default, asynchronous code in ASP.NET Core applications can be resumed by any available thread, we can’t rely on mechanisms like the <code>ThreadLocal</code> class to store global state.</p>\n<p>Simply put, the idea of <code>AsyncLocal&lt;T&gt;</code> is to create a static instance that can hold some <code>T</code> value and, as long you use the <code>async</code> and <code>await</code> keywords, the runtime will consider your code execution to be a logical flow, despite asynchronous, and will ensure the value is shared even if the flow has been resumed by a different thread.</p>\n<p>Because we want to share data between the command and event interceptor code, the flow is asynchronous, and since only commands broadcast events, the <code>AsyncLocal&lt;T&gt;</code> class is an elegant solution to prevent changing all the events to include an <code>CommandId</code> property that has to be set on every broadcast.</p>\n<p>As an example, this is usually the solution implemented by some logging frameworks to support the creation of scopes, enabling some information to be written on every log without having to pass it every time, like when the using Microsoft façade <code>Logger.BeginScope(&quot;X:&#123;x&#125; Y:&#123;y&#125;&quot;, x, y)</code>.</p>\n<p>For more details and examples, give a look to the <code>AsyncLocal&lt;T&gt;</code> class <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.threading.asynclocal-1?view=net-8.0\">documentation</a>.</p>\n<h1 id=\"Audits-Controller\"><a href=\"#Audits-Controller\" class=\"headerlink\" title=\"Audits Controller\"></a>Audits Controller</h1><p>To make it easier to test and check our system audits, we are going to implement the following endpoint:</p>\n<p>GET &#x2F;audits — search for command audits using some filters (<code>SearchAuditsQuery</code>);<br>GET &#x2F;audits&#x2F;{id} — get a command audit by its unique identifier and all the associated events (<code>GetAuditByIdQuery</code>);</p>\n<p>Inside the <code>Handlers</code> folder create an <code>Audits</code> folder and create the queries for searching or getting an audit by its external id:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SearchAuditsQueryHandler</span> : <span class=\"title\">IQueryHandler</span>&lt;<span class=\"title\">SearchAuditsQuery</span>, <span class=\"title\">IEnumerable</span>&lt;<span class=\"title\">AuditSearchItem</span>&gt;&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IQueryable&lt;CommandEntity&gt; _commands;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SearchAuditsQueryHandler</span>(<span class=\"params\">ApiDbContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _commands = context.Set&lt;CommandEntity&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IEnumerable&lt;AuditSearchItem&gt;&gt; HandleAsync(SearchAuditsQuery query, CancellationToken ct)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> filter = _commands;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">string</span>.IsNullOrWhiteSpace(query.FilterQ))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> filterQ = query.FilterQ.Trim();</span><br><span class=\"line\"></span><br><span class=\"line\">            filter = filter.Where(p =&gt;</span><br><span class=\"line\">                p.Name.Contains(filterQ)</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> skip = query.Skip ?? <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> take = query.Take ?? <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> filter</span><br><span class=\"line\">            .OrderByDescending(c =&gt; c.CreatedOn)</span><br><span class=\"line\">            .ThenByDescending(c =&gt; c.Id)</span><br><span class=\"line\">            .Skip(skip)</span><br><span class=\"line\">            .Take(take)</span><br><span class=\"line\">            .Select(c =&gt; <span class=\"keyword\">new</span> AuditSearchItem</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Id = c.ExternalId,</span><br><span class=\"line\">                Name = c.Name,</span><br><span class=\"line\">                CreatedOn = c.CreatedOn,</span><br><span class=\"line\">                CreatedBy = c.CreatedBy,</span><br><span class=\"line\">                ExecutionTimeInMs = (<span class=\"built_in\">long</span>) c.ExecutionTime.TotalMilliseconds</span><br><span class=\"line\">            &#125;).ToListAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SearchAuditsQuery</span> : <span class=\"title\">Query</span>&lt;<span class=\"title\">IEnumerable</span>&lt;<span class=\"title\">AuditSearchItem</span>&gt;&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> FilterQ &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span>? Skip &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span>? Take &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AuditSearchItem</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTimeOffset CreatedOn &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> CreatedBy &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> ExecutionTimeInMs &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">GetAuditByIdQueryHandler</span> : <span class=\"title\">IQueryHandler</span>&lt;<span class=\"title\">GetAuditByIdQuery</span>, <span class=\"title\">Audit</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IQueryable&lt;CommandEntity&gt; _commands;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IQueryable&lt;EventEntity&gt; _events;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GetAuditByIdQueryHandler</span>(<span class=\"params\">ApiDbContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _commands = context.Set&lt;CommandEntity&gt;();</span><br><span class=\"line\">        _events = context.Set&lt;EventEntity&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;Audit&gt; <span class=\"title\">HandleAsync</span>(<span class=\"params\">GetAuditByIdQuery query, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> command = <span class=\"keyword\">await</span> _commands.SingleOrDefaultAsync(c =&gt; c.ExternalId == query.AuditId, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (command == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">$&quot;Command audit &#x27;<span class=\"subst\">&#123;query.AuditId&#125;</span>&#x27; not found&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> events = <span class=\"keyword\">await</span> _events.Where(e =&gt; e.CommandId == command.Id).ToListAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Audit</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = command.ExternalId,</span><br><span class=\"line\">            Name = command.Name,</span><br><span class=\"line\">            Payload = JsonSerializer.Deserialize&lt;<span class=\"built_in\">dynamic</span>&gt;(command.Payload),</span><br><span class=\"line\">            Result = <span class=\"built_in\">string</span>.IsNullOrWhiteSpace(command.Result)</span><br><span class=\"line\">                ? <span class=\"literal\">null</span></span><br><span class=\"line\">                : JsonSerializer.Deserialize&lt;<span class=\"built_in\">dynamic</span>&gt;(command.Result),</span><br><span class=\"line\">            CreatedOn = command.CreatedOn,</span><br><span class=\"line\">            CreatedBy = command.CreatedBy,</span><br><span class=\"line\">            ExecutionTimeInMs = (<span class=\"built_in\">long</span>) command.ExecutionTime.TotalMilliseconds,</span><br><span class=\"line\">            Events = events.Select(e =&gt; <span class=\"keyword\">new</span> AuditEvent</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Id = e.ExternalId,</span><br><span class=\"line\">                Name = e.Name,</span><br><span class=\"line\">                Payload = JsonSerializer.Deserialize&lt;<span class=\"built_in\">dynamic</span>&gt;(e.Payload),</span><br><span class=\"line\">                CreatedOn = e.CreatedOn</span><br><span class=\"line\">            &#125;).ToList()</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">GetAuditByIdQuery</span> : <span class=\"title\">Query</span>&lt;<span class=\"title\">Audit</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid AuditId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Audit</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">object</span> Payload &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">object</span> Result &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTimeOffset CreatedOn &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> CreatedBy &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> ExecutionTimeInMs &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IEnumerable&lt;AuditEvent&gt; Events &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AuditEvent</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">object</span> Payload &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTimeOffset CreatedOn &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Inside the <code>Controllers</code> folder create an <code>Audit</code> folder and an <code>AuditController</code> that will use the previous queries:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;audits&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AuditsController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IMediator _mediator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AuditsController</span>(<span class=\"params\">IMediator mediator</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _mediator = mediator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IEnumerable&lt;AuditSearchItemModel&gt;&gt; SearchAsync([FromQuery] <span class=\"built_in\">string</span> filterQ, [FromQuery] <span class=\"built_in\">int</span>? skip, [FromQuery] <span class=\"built_in\">int</span>? take, CancellationToken ct)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> _mediator.FetchAsync(<span class=\"keyword\">new</span> SearchAuditsQuery</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            FilterQ = filterQ,</span><br><span class=\"line\">            Skip = skip,</span><br><span class=\"line\">            Take = take,</span><br><span class=\"line\">            CreatedBy = User.Identity.Name</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result.Select(r =&gt; <span class=\"keyword\">new</span> AuditSearchItemModel</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = r.Id,</span><br><span class=\"line\">            Name = r.Name,</span><br><span class=\"line\">            CreatedOn = r.CreatedOn,</span><br><span class=\"line\">            CreatedBy = r.CreatedBy,</span><br><span class=\"line\">            ExecutionTimeInMs = r.ExecutionTimeInMs</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet(<span class=\"string\">&quot;&#123;id:guid&#125;&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;AuditModel&gt; <span class=\"title\">GetByIdAsync</span>(<span class=\"params\">[FromRoute] Guid id, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> _mediator.FetchAsync(<span class=\"keyword\">new</span> GetAuditByIdQuery</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            AuditId = id,</span><br><span class=\"line\">            CreatedBy = User.Identity.Name</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AuditModel</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = result.Id,</span><br><span class=\"line\">            Name = result.Name,</span><br><span class=\"line\">            Payload = result.Payload,</span><br><span class=\"line\">            Result = result.Result,</span><br><span class=\"line\">            CreatedOn = result.CreatedOn,</span><br><span class=\"line\">            CreatedBy = result.CreatedBy,</span><br><span class=\"line\">            ExecutionTimeInMs = result.ExecutionTimeInMs,</span><br><span class=\"line\">            Events = result.Events.Select(e =&gt; <span class=\"keyword\">new</span> AuditEventModel</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Id = e.Id,</span><br><span class=\"line\">                Name = e.Name,</span><br><span class=\"line\">                Payload = e.Payload,</span><br><span class=\"line\">                CreatedOn = e.CreatedOn</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AuditSearchItemModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTimeOffset CreatedOn &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> CreatedBy &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> ExecutionTimeInMs &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AuditModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">object</span> Payload &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">object</span> Result &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTimeOffset CreatedOn &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> CreatedBy &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> ExecutionTimeInMs &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> IEnumerable&lt;AuditEventModel&gt; Events &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AuditEventModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">object</span> Payload &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTimeOffset CreatedOn &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The project structure should look as follows:</p>\n<img src=\"/2020/11/25/Auditing-with-Mediator-Pipelines-in-ASP-NET-Core/02_project_structure_auditing_final.png\" class=\"\">\n\n<p>Open the Swagger endpoint (ex: <a href=\"https://localhost:44380/swagger\">https://localhost:44380/swagger</a>) and you should see the audits endpoint:</p>\n<img src=\"/2020/11/25/Auditing-with-Mediator-Pipelines-in-ASP-NET-Core/03_swagger_audit.png\" class=\"\">\n\n<p>Create, update or delete products with the help of Swagger UI and then check if all the commands and events have been properly audited:</p>\n<img src=\"/2020/11/25/Auditing-with-Mediator-Pipelines-in-ASP-NET-Core/04_swagger_audit_search.png\" class=\"\">\n\n<p>And even get the details of a specific audit:</p>\n<img src=\"/2020/11/25/Auditing-with-Mediator-Pipelines-in-ASP-NET-Core/05_swagger_audit_get_by_id.png\" class=\"\">\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I hope this article gave you a good idea on how to use mediator pipelines to simplify the auditing of user actions without having to replicate code across all commands.</p>\n<p>We also ensured events were always stored before being broadcasted and a reference to the command was kept without adding properties to our POCOs, providing a more clean approach.</p>\n<p>Soon I’ll be explaining how we can inject more specialized interfaces, like the <code>ISender&lt;TCommand&gt;</code>, to make our dependencies more clearer and help with unit testing.</p>\n",
            "tags": [
                "dotnetcore",
                "aspnetcore",
                "csharp",
                "patterns"
            ]
        },
        {
            "id": "https://code-corner.dev/2020/11/07/Transaction-Management-With-Mediator-Pipelines-in-ASP-NET-Core/",
            "url": "https://code-corner.dev/2020/11/07/Transaction-Management-With-Mediator-Pipelines-in-ASP-NET-Core/",
            "title": "Transaction Management With Mediator Pipelines in ASP.NET Core",
            "date_published": "2020-11-07T00:00:00.000Z",
            "content_html": "<p>When implementing a <strong>simplified CQRS</strong> service, which usually has a single database but still separates commands from queries, the mediator pipeline can be used to manage transactions when processing commands, ensuring changes will be implicitly committed unless an exception is thrown.</p>\n<p>Implementing a pipeline for transactions has some key advantages even when using Entity Framework Core or other ORM that tracks and flushes changes at a single point in time.</p>\n<p>Because the command handler is executing inside an implicit transaction, the developer is free to flush their changes as it sees fit knowing that any exception will rollback the changes. This is very helpful when it wants to cancel the flow when some business rules aren’t meet and could only be checked after changing the system state. Optimistic concurrency is a good example where you may want to flush your changes before leaving the handler so you know exactly what entity failed and can send a more detailed message to the user, which is the usual approach when implementing a dedicated <strong>Backend for Frontend</strong> service.</p>\n<p>Also, ORMs are very good at abstracting database access but can’t solve more edge cases, specially when performance is a requirement. Being able to use a more lightweight library (e.g. <a href=\"https://github.com/StackExchange/Dapper\">Dapper</a>) to do some bulk operations and using the ORM context connection inside the same transaction will remove the need to use the <code>TransactionScope</code> and reduce some application complexity.</p>\n<p>Ensuring transactions are properly managed around the handler execution ensure the application architecture is be more robust and will be able to handle more edge cases.</p>\n<hr>\n<h1 id=\"The-project\"><a href=\"#The-project\" class=\"headerlink\" title=\"The project\"></a>The project</h1><p>This article will be based on my previous ones that explained how to use the mediator and implement transversal behavior with pipelines. As a reminder, we implemented an endpoint to manage products with the following:</p>\n<ul>\n<li>GET &#x2F;products — search for products using some filters (<code>SearchProductsQuery</code>);</li>\n<li>GET &#x2F;products&#x2F;{id} — get a product by its unique identifier (<code>GetProductByIdQuery</code>);</li>\n<li>POST &#x2F;products — create a product (<code>CreateProductCommand</code> and <code>CreatedProductEvent</code>);</li>\n<li>PUT &#x2F;products&#x2F;{id} — update a product by its unique identifier (<code>UpdateProductCommand</code> and <code>UpdatedProductEvent</code>);</li>\n<li>DELETE &#x2F;products&#x2F;{id} — delete a product by its unique identifier (<code>DeleteProductCommand</code> and <code>DeletedProductEvent</code>);</li>\n</ul>\n<p>You can check them out here:</p>\n<ul>\n<li><a href=\"/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/\" title=\"Mediator Pattern in ASP.NET Core Applications\">Mediator Pattern in ASP.NET Core Applications</a></li>\n<li><a href=\"/2020/11/02/Using-Mediator-Pipelines-in-ASP-NET-Core-Applications/\" title=\"Using Mediator Pipelines in ASP.NET Core Applications\">Using Mediator Pipelines in ASP.NET Core Applications</a></li>\n<li><a href=\"/2020/11/04/Validation-with-Mediator-Pipelines-in-ASP-NET-Core-Applications/\" title=\"Validation with Mediator Pipelines in ASP.NET Core Applications\">Validation with Mediator Pipelines in ASP.NET Core Applications</a></li>\n</ul>\n<p>The source code is available on <a href=\"https://github.com/gravity00/IntroductionMediatorCQRS\">GitHub</a>, feel free to give it a look.</p>\n<h1 id=\"Entity-Framework-Core-transactions\"><a href=\"#Entity-Framework-Core-transactions\" class=\"headerlink\" title=\"Entity Framework Core transactions\"></a>Entity Framework Core transactions</h1><p>Entity Framework Core has support for explicit transaction management, which works in a similar way to ADO.NET or the <code>TransactionScope</code> class.</p>\n<p>You can get a disposable instance of <code>IDbContextTransaction</code> by invoking the method <code>BeginTransactionAsync</code>, available from the database property. The transaction can be either committed or rolled back, either by explicit invocation or by disposing the instance before any commit.</p>\n<p>As stated before, this can be very helpful if <code>SaveChanges</code> must be invoked multiple times inside the <em>unit of work</em> operation and you want to ensure exceptions will rollback data changes.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> tx = <span class=\"keyword\">await</span> _context.Database.BeginTransactionAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> products = _context.Set&lt;ProductEntity&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> products.Where(p =&gt; p.Code.StartsWith(<span class=\"string\">&#x27;9&#x27;</span>)).ForEachAsync(product =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    product.Name += <span class=\"string\">&quot; [DEPRECATED]&quot;</span>;</span><br><span class=\"line\">&#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> products.ForEachAsync(product =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    product.Price /= <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> tx.CommitAsync(ct);</span><br></pre></td></tr></table></figure>\n\n<p>In the example above if an exception was thrown after the first <code>SaveChangesAsync</code> every changes would be reverted because the transaction would be disposed without an explicit call to commit.</p>\n<p>We are going to leverage on this behavior to implement the pipeline.</p>\n<h1 id=\"The-pipeline\"><a href=\"#The-pipeline\" class=\"headerlink\" title=\"The pipeline\"></a>The pipeline</h1><p>Since only commands mutate system state, we are going to use the command pipeline to enforce a transaction for the next pipelines in the chain up until the handler.</p>\n<p>The pipeline behavior will be:</p>\n<ol>\n<li>Intercept any command;</li>\n<li>Create a new <code>IDbContextTransaction</code> with <code>BeginTransactionAsync</code>;</li>\n<li>Invoke the next pipeline inside the <code>using</code> scope;</li>\n<li>If no exception is thrown, flush all changes and commit;</li>\n<li>Dispose the transaction;</li>\n</ol>\n<p>I’ll also include some commented code incase you want to be sure the queries never mutate the system state. Prevention is better than cure…</p>\n<p>Inside the <code>Pipelines</code> folder create a <code>TransactionPipeline</code> class extending <code>Pipeline</code> (because we only need some of the methods):</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TransactionPipeline</span> : <span class=\"title\">Pipeline</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ApiDbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TransactionPipeline</span>(<span class=\"params\">ApiDbContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnCommandAsync</span>&lt;<span class=\"title\">TCommand</span>&gt;(<span class=\"params\">Func&lt;TCommand, CancellationToken, Task&gt; next, TCommand cmd, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> tx = <span class=\"keyword\">await</span> _context.Database.BeginTransactionAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> next(cmd, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> tx.CommitAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TResult</span>&gt; <span class=\"title\">OnCommandAsync</span>&lt;<span class=\"title\">TCommand</span>, <span class=\"title\">TResult</span>&gt;(<span class=\"params\">Func&lt;TCommand, CancellationToken, Task&lt;TResult&gt;&gt; next, TCommand cmd, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> tx = <span class=\"keyword\">await</span> _context.Database.BeginTransactionAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> next(cmd, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> tx.CommitAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//public override async Task&lt;TResult&gt; OnQueryAsync&lt;TQuery, TResult&gt;(Func&lt;TQuery, CancellationToken, Task&lt;TResult&gt;&gt; next, TQuery query, CancellationToken ct)</span></span><br><span class=\"line\">    <span class=\"comment\">//&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//    await using var tx = await _context.Database.BeginTransactionAsync(ct);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//    var result = await next(query, ct);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//    await tx.RollbackAsync(ct);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//    return result;</span></span><br><span class=\"line\">    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>Startup.cs</code> file and add the <code>TransactionPipeline</code> after the <code>ValidationPipeline</code>, preventing the opening of transactions that could be immediately closed if the command had invalid data.</p>\n<p>Since this examples are using the in-memory database provider for Entity Framework Core, which does not support explicit transactions, we are also going to ignore them for test purposes.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddDbContext&lt;ApiDbContext&gt;(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.UseInMemoryDatabase(<span class=\"string\">&quot;ApiDbContext&quot;</span>).ConfigureWarnings(warn =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                warn.Ignore(InMemoryEventId.TransactionIgnoredWarning);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddMediator(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.AddPipeline&lt;LoggingPipeline&gt;();</span><br><span class=\"line\">            o.AddPipeline&lt;TimeoutPipeline&gt;();</span><br><span class=\"line\">            o.AddPipeline&lt;ValidationPipeline&gt;();</span><br><span class=\"line\">            o.AddPipeline&lt;TransactionPipeline&gt;();</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">var</span> implementationType <span class=\"keyword\">in</span> <span class=\"title\">typeof</span>(<span class=\"params\">Startup</span>)</span></span><br><span class=\"line\"><span class=\"function\">                .Assembly</span></span><br><span class=\"line\"><span class=\"function\">                .ExportedTypes</span></span><br><span class=\"line\"><span class=\"function\">                .<span class=\"title\">Where</span>(<span class=\"params\">t =&gt; t.IsClass &amp;&amp; !t.IsAbstract</span>))</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> serviceType <span class=\"keyword\">in</span> implementationType</span><br><span class=\"line\">                    .GetInterfaces()</span><br><span class=\"line\">                    .Where(i =&gt; i.IsGenericType &amp;&amp; i.GetGenericTypeDefinition() == <span class=\"keyword\">typeof</span>(IValidator&lt;&gt;)))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    o.Services.Add(<span class=\"keyword\">new</span> ServiceDescriptor(serviceType, implementationType, ServiceLifetime.Transient));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            o.AddHandlersFromAssemblyOf&lt;Startup&gt;();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have a transversal behavior that manages transactions and flushes all context changes to the database, we can remove from all command handlers the explicit calls to <code>SaveChangesAsync</code>:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DeleteProductCommandHandler</span> : <span class=\"title\">ICommandHandler</span>&lt;<span class=\"title\">DeleteProductCommand</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ApiDbContext _context;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IMediator _mediator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DeleteProductCommandHandler</span>(<span class=\"params\">ApiDbContext context, IMediator mediator</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">        _mediator = mediator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">HandleAsync</span>(<span class=\"params\">DeleteProductCommand cmd, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> products = _context.Set&lt;ProductEntity&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> product = <span class=\"keyword\">await</span> products.SingleOrDefaultAsync(p =&gt; p.ExternalId == cmd.ProductId, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (product == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">$&quot;Product &#x27;<span class=\"subst\">&#123;cmd.ProductId&#125;</span>&#x27; not found&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        products.Remove(product);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//await _context.SaveChangesAsync(ct);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _mediator.BroadcastAsync(<span class=\"keyword\">new</span> DeletedProductEvent</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ProductId = cmd.ProductId</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Speeding-things-up\"><a href=\"#Speeding-things-up\" class=\"headerlink\" title=\"Speeding things up!\"></a>Speeding things up!</h1><p>Because this is a pipeline we use very often in most of our APIs, there is already a <a href=\"https://www.nuget.org/packages/simplesoft.mediator.microsoft.extensions.efcoretransactionpipeline\">NuGet available that allows to open an explicit Entity Framework Core transaction for commands, events or queries</a>, depending your needs.</p>\n<p>To use it, just open the NuGet package manager and install the package <code>SimpleSoft.Mediator.Microsoft.Extensions.EFCoreTransactionPipeline</code>:</p>\n<img src=\"/2020/11/07/Transaction-Management-With-Mediator-Pipelines-in-ASP-NET-Core/01_nuget_mediator_transaction_pipeline.png\" class=\"\">\n\n<p>Open the <code>Startup.cs</code> file and register the pipeline with the extension method <code>AddPipelineForEFCoreTransaction&lt;TContext&gt;</code>. Explicit transactions are disabled by default, so you only need to enable them for commands.</p>\n<p>When using all the NuGets mentioned on my previous articles, the <code>Startup.cs</code> file should be similar to this:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddDbContext&lt;ApiDbContext&gt;(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.UseInMemoryDatabase(<span class=\"string\">&quot;ApiDbContext&quot;</span>).ConfigureWarnings(warn =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// since InMemoryDatabase does not support transactions</span></span><br><span class=\"line\">                <span class=\"comment\">// for test purposes we are going to ignore this exception</span></span><br><span class=\"line\">                warn.Ignore(InMemoryEventId.TransactionIgnoredWarning);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddMediator(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.AddPipelineForLogging(options =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                options.LogCommandResult = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                options.LogQueryResult = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            o.AddPipeline&lt;TimeoutPipeline&gt;();</span><br><span class=\"line\">            o.AddPipelineForValidation(options =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                options.ValidateCommand = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                options.ValidateEvent = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            o.AddPipelineForEFCoreTransaction&lt;ApiDbContext&gt;(options =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                options.BeginTransactionOnCommand = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            o.AddValidatorsFromAssemblyOf&lt;Startup&gt;();</span><br><span class=\"line\">            o.AddHandlersFromAssemblyOf&lt;Startup&gt;();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I hope this article gave you a good idea on how to use mediator pipelines to simplify the management of Entity Framework Core transactions, making the implementation of command handlers less error prone since developers won’t forget to flush changes to the database (that behavior will be implicit unless an exception is thrown).</p>\n<p>Even if your application is using another ORM or other lightweight libraries (e.g. <a href=\"https://github.com/StackExchange/Dapper\">Dapper</a>), you can easily implement your own pipeline.</p>\n<p>I also made an article about <a href=\"/2020/11/25/Auditing-with-Mediator-Pipelines-in-ASP-NET-Core/\" title=\"Auditing with Mediator Pipelines in ASP.NET Core\">auditing user actions with pipelines</a>, you may also find it helpful.</p>\n",
            "tags": [
                "dotnetcore",
                "aspnetcore",
                "csharp",
                "patterns"
            ]
        },
        {
            "id": "https://code-corner.dev/2020/11/04/Validation-with-Mediator-Pipelines-in-ASP-NET-Core-Applications/",
            "url": "https://code-corner.dev/2020/11/04/Validation-with-Mediator-Pipelines-in-ASP-NET-Core-Applications/",
            "title": "Validation with Mediator Pipelines in ASP.NET Core Applications",
            "date_published": "2020-11-04T00:00:00.000Z",
            "content_html": "<p>When implementing web applications that manipulate information, there is always the need to validate data sent by the clients, ensuring business rules are properly implemented.</p>\n<p>Previously I talked about the implementation of <strong>Command Query Responsibility Segregation (CQRS)</strong> and <strong>Event Sourcing (ES)</strong> using a mediator pattern and how to support transversal behavior via pipelines.</p>\n<p>In this article I’m going to demonstrate how validation can be enforced into your commands and events before reaching the handlers, making sure that invalid data will be rejected by the API.</p>\n<p>This approach not only reduces the amount of duplicated code, it also ensures validations won’t be forgotten, unless explicitly stated.</p>\n<hr>\n<h1 id=\"The-project\"><a href=\"#The-project\" class=\"headerlink\" title=\"The project\"></a>The project</h1><p>To make it faster to implement the validation pipeline, I’m going to leverage this example on both of my previous articles, in which we implemented an <a href=\"/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/\" title=\"Mediator Pattern in ASP.NET Core Applications\">endpoint to manage products</a> and introduced both a <a href=\"/2020/11/02/Using-Mediator-Pipelines-in-ASP-NET-Core-Applications/\" title=\"Using Mediator Pipelines in ASP.NET Core Applications\">logging and timeout pipelines</a>.</p>\n<p>The source code is available on <a href=\"https://github.com/gravity00/IntroductionMediatorCQRS\">GitHub</a>.</p>\n<h1 id=\"The-validations\"><a href=\"#The-validations\" class=\"headerlink\" title=\"The validations\"></a>The validations</h1><p>To help us configure the rules we are going to use a very popular and one of my favorites libraries <a href=\"https://fluentvalidation.net/\">FluentValidation</a> by creating classes implementing the interface <code>IValidator&lt;T&gt;</code>.</p>\n<p>These classes will be added to the dependency injection container and used by the pipeline to validate both the commands and events before reaching the handler.</p>\n<p>Lets start by installing the NuGet <code>FluentValidation</code>:</p>\n<img src=\"/2020/11/04/Validation-with-Mediator-Pipelines-in-ASP-NET-Core-Applications/01_nuget_fluentvalidation.png\" class=\"\">\n\n<p>Create a <code>Validations</code> folder at the project root level, with a subfolder <code>Products</code>.</p>\n<img src=\"/2020/11/04/Validation-with-Mediator-Pipelines-in-ASP-NET-Core-Applications/02_project_structure.png\" class=\"\">\n\n<p>Inside the <code>Products</code> folder create both a validator for <code>CreateProductCommand</code> and <code>CreatedProductEvent</code> by extending the class <code>AbstractValidator&lt;T&gt;</code> (which itself implementes the interface <code>IValidator&lt;T&gt;</code>) and configure some rules in the constructors:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreateProductCommandValidator</span> : <span class=\"title\">AbstractValidator</span>&lt;<span class=\"title\">CreateProductCommand</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CreateProductCommandValidator</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        RuleFor(e =&gt; e.Code)</span><br><span class=\"line\">            .NotEmpty()</span><br><span class=\"line\">            .Length(<span class=\"number\">8</span>)</span><br><span class=\"line\">            .Matches(<span class=\"string\">&quot;^[0-9a-zA-Z]*$&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        RuleFor(e =&gt; e.Name)</span><br><span class=\"line\">            .NotEmpty()</span><br><span class=\"line\">            .MaximumLength(<span class=\"number\">128</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        RuleFor(e =&gt; e.Price)</span><br><span class=\"line\">            .GreaterThanOrEqualTo(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreatedProductEventValidator</span> : <span class=\"title\">AbstractValidator</span>&lt;<span class=\"title\">CreatedProductEvent</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CreatedProductEventValidator</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        RuleFor(e =&gt; e.ExternalId)</span><br><span class=\"line\">            .NotEmpty();</span><br><span class=\"line\"></span><br><span class=\"line\">        RuleFor(e =&gt; e.Code)</span><br><span class=\"line\">            .NotEmpty()</span><br><span class=\"line\">            .Length(<span class=\"number\">8</span>)</span><br><span class=\"line\">            .Matches(<span class=\"string\">&quot;^[0-9a-zA-Z]*$&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        RuleFor(e =&gt; e.Name)</span><br><span class=\"line\">            .NotEmpty()</span><br><span class=\"line\">            .MaximumLength(<span class=\"number\">128</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        RuleFor(e =&gt; e.Price)</span><br><span class=\"line\">            .GreaterThanOrEqualTo(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Feel free to create validators for all other commands and events, I’m just focusing on these for simplicity. You can also check the <a href=\"https://docs.fluentvalidation.net/en/latest/\">documentation for supported rules and detailed usage instructions</a>.</p>\n<p>Open the <code>Startup.cs</code> file and register all classes implementing <code>IValidator&lt;T&gt;</code> into the container:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddDbContext&lt;ApiDbContext&gt;(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.UseInMemoryDatabase(<span class=\"string\">&quot;ApiDbContext&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddMediator(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.AddPipeline&lt;LoggingPipeline&gt;();</span><br><span class=\"line\">            o.AddPipeline&lt;TimeoutPipeline&gt;();</span><br><span class=\"line\">            o.AddHandlersFromAssemblyOf&lt;Startup&gt;();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"function\"><span class=\"keyword\">var</span> implementationType <span class=\"keyword\">in</span> <span class=\"title\">typeof</span>(<span class=\"params\">Startup</span>)</span></span><br><span class=\"line\"><span class=\"function\">            .Assembly</span></span><br><span class=\"line\"><span class=\"function\">            .ExportedTypes</span></span><br><span class=\"line\"><span class=\"function\">            .<span class=\"title\">Where</span>(<span class=\"params\">t =&gt; t.IsClass &amp;&amp; !t.IsAbstract</span>))</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> serviceType <span class=\"keyword\">in</span> implementationType</span><br><span class=\"line\">                .GetInterfaces()</span><br><span class=\"line\">                .Where(i =&gt; i.IsGenericType &amp;&amp; i.GetGenericTypeDefinition() == <span class=\"keyword\">typeof</span>(IValidator&lt;&gt;)))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                services.Add(<span class=\"keyword\">new</span> ServiceDescriptor(serviceType, implementationType, ServiceLifetime.Transient));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-pipeline\"><a href=\"#The-pipeline\" class=\"headerlink\" title=\"The pipeline\"></a>The pipeline</h1><p>Because for this example we are going to enforce validation only on commands and events, since they either mutate or represent the system state at a given point in time, the pipeline will be implemented as follows:</p>\n<ol>\n<li>Intercept any command or event;</li>\n<li>Resolve a required instance of <code>IValidator&lt;TCommand&gt;</code> or <code>IValidator&lt;TEvent&gt;</code> from the container;</li>\n<li>Invoke the method <code>ValidateAndThrowAsync</code>, failing with a <code>ValidationException</code> if something is invalid;</li>\n</ol>\n<p>Inside the <code>Pipelines</code> folder create a <code>ValidationPipeline</code> class extending <code>Pipeline</code> (because we only need some of the methods):</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ValidationPipeline</span> : <span class=\"title\">Pipeline</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IServiceProvider _provider;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ValidationPipeline</span>(<span class=\"params\">IServiceProvider provider</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _provider = provider;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnCommandAsync</span>&lt;<span class=\"title\">TCommand</span>&gt;(<span class=\"params\">Func&lt;TCommand, CancellationToken, Task&gt; next, TCommand cmd, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> ValidateAndThrowAsync(cmd, ct);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> next(cmd, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TResult</span>&gt; <span class=\"title\">OnCommandAsync</span>&lt;<span class=\"title\">TCommand</span>, <span class=\"title\">TResult</span>&gt;(<span class=\"params\">Func&lt;TCommand, CancellationToken, Task&lt;TResult&gt;&gt; next, TCommand cmd, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> ValidateAndThrowAsync(cmd, ct);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> next(cmd, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnEventAsync</span>&lt;<span class=\"title\">TEvent</span>&gt;(<span class=\"params\">Func&lt;TEvent, CancellationToken, Task&gt; next, TEvent evt, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> ValidateAndThrowAsync(evt, ct);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> next(evt, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">async</span> Task <span class=\"title\">ValidateAndThrowAsync</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">T instance, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> validator = _provider.GetRequiredService&lt;IValidator&lt;T&gt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">await</span> validator.ValidateAndThrowAsync(instance, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>Startup.cs</code> file and add the <code>ValidationPipeline</code> at least after the <code>LoggingPipeline</code> ensuring, in case invalid data is submitted, we can still see it in the logs:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services.AddMediator(o =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    o.AddPipeline&lt;LoggingPipeline&gt;();</span><br><span class=\"line\">    o.AddPipeline&lt;TimeoutPipeline&gt;();</span><br><span class=\"line\">    o.AddPipeline&lt;ValidationPipeline();</span><br><span class=\"line\">    o.AddHandlersFromAssemblyOf&lt;Startup&gt;();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>If you now start the server and try to create a product with invalid data you will receive a <code>ValidationException</code>.</p>\n<img src=\"/2020/11/04/Validation-with-Mediator-Pipelines-in-ASP-NET-Core-Applications/03_validation_exception.png\" class=\"\">\n\n<p>Because returning an HTTP 500 due to invalid data would be confusing to the client, lets just finish this example by creating an ASP.NET Core middleware converting this exception into a more appropriate code, like HTTP 422.</p>\n<p>Once again, open the <code>Startup.cs</code> file and register the middleware immediately after the developer exception page, catching this exception and returning HTTP 422 with a more detailed JSON representation:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\"></span><br><span class=\"line\">        app.Use(<span class=\"keyword\">async</span> (ctx, next) =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">await</span> next();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (ValidationException e)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> response = ctx.Response;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (response.HasStarted)</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">                ctx.RequestServices</span><br><span class=\"line\">                    .GetRequiredService&lt;ILogger&lt;Startup&gt;&gt;()</span><br><span class=\"line\">                    .LogWarning(e, <span class=\"string\">&quot;Invalid data has been submitted&quot;</span>);</span><br><span class=\"line\">                response.Clear();</span><br><span class=\"line\">                response.StatusCode = <span class=\"number\">422</span>;</span><br><span class=\"line\">                <span class=\"keyword\">await</span> response.WriteAsync(JsonSerializer.Serialize(<span class=\"keyword\">new</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Message = <span class=\"string\">&quot;Invalid data has been submitted&quot;</span>,</span><br><span class=\"line\">                    ModelState = e.Errors.ToDictionary(error =&gt; error.ErrorCode, error =&gt; error.ErrorMessage)</span><br><span class=\"line\">                &#125;), Encoding.UTF8, ctx.RequestAborted);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseSwagger();</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseSwaggerUI(c =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            c.SwaggerEndpoint(<span class=\"string\">&quot;/swagger/v1/swagger.json&quot;</span>, <span class=\"string\">&quot;Mediator ExampleApi V1&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseRouting();</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseEndpoints(endpoints =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            endpoints.MapControllers();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Submit invalid data again and a more detailed message should be returned:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /products</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;code&quot;: &quot;-123456&quot;,</span><br><span class=\"line\">  &quot;name&quot;: &quot;&quot;,</span><br><span class=\"line\">  &quot;price&quot;: -1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">HTTP 422</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   &quot;Message&quot;:&quot;Invalid data has been submitted&quot;,</span><br><span class=\"line\">   &quot;ModelState&quot;:&#123;</span><br><span class=\"line\">      &quot;ExactLengthValidator&quot;:&quot;&#x27;Code&#x27; must be 8 characters in length. You entered 7 characters.&quot;,</span><br><span class=\"line\">      &quot;RegularExpressionValidator&quot;:&quot;&#x27;Code&#x27; is not in the correct format.&quot;,</span><br><span class=\"line\">      &quot;NotEmptyValidator&quot;:&quot;&#x27;Name&#x27; must not be empty.&quot;,</span><br><span class=\"line\">      &quot;GreaterThanOrEqualValidator&quot;:&quot;&#x27;Price&#x27; must be greater than or equal to &#x27;0&#x27;.&quot;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Speeding-things-up\"><a href=\"#Speeding-things-up\" class=\"headerlink\" title=\"Speeding things up!\"></a>Speeding things up!</h1><p>If just like me, you can see yourself using a pipeline for validation in most of your projects, there is already a <a href=\"https://www.nuget.org/packages/simplesoft.mediator.microsoft.extensions.validationpipeline\">pipeline available via NuGet</a> that should be configurable to most use cases while also providing a simpler way to register the validators into the container.</p>\n<p>Install <code>SimpleSoft.Mediator.Microsoft.Extensions.ValidationPipeline</code> via NuGet:</p>\n<img src=\"/2020/11/04/Validation-with-Mediator-Pipelines-in-ASP-NET-Core-Applications/04_nuget_mediator_validation_pipeline.png\" class=\"\">\n\n<p>Use the extension method <code>AddPipelineForValidation</code> and enforce both command and event validations and use the extension method <code>AddValidatorsFromAssemblyOf</code> to scan for all <code>IValidator&lt;T&gt;</code> classes and register them into the container.</p>\n<p>For the current project, the <code>ConfigureServices</code> method would be similar to the following:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddDbContext&lt;ApiDbContext&gt;(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.UseInMemoryDatabase(<span class=\"string\">&quot;ApiDbContext&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddMediator(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.AddPipeline&lt;LoggingPipeline&gt;();</span><br><span class=\"line\">            o.AddPipeline&lt;TimeoutPipeline&gt;();</span><br><span class=\"line\">            o.AddPipelineForValidation(options =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                options.ValidateCommand = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                options.ValidateEvent = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            o.AddValidatorsFromAssemblyOf&lt;Startup&gt;();</span><br><span class=\"line\">            o.AddHandlersFromAssemblyOf&lt;Startup&gt;();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I hope this article gave you a good idea on how to use mediator pipelines to ensure that all your commands, events and even queries are initialized with proper data, either implementing your own pipeline or by using the existing <a href=\"https://www.nuget.org/packages/simplesoft.mediator.microsoft.extensions.validationpipeline\">ValidationPipeline</a> NuGet.</p>\n<p>I also made an article about <a href=\"/2020/11/07/Transaction-Management-With-Mediator-Pipelines-in-ASP-NET-Core/\" title=\"Transaction Management With Mediator Pipelines in ASP.NET Core\">transaction management with pipelines</a>, you may also find it helpful.</p>\n",
            "tags": [
                "dotnetcore",
                "aspnetcore",
                "csharp",
                "patterns"
            ]
        },
        {
            "id": "https://code-corner.dev/2020/11/02/Using-Mediator-Pipelines-in-ASP-NET-Core-Applications/",
            "url": "https://code-corner.dev/2020/11/02/Using-Mediator-Pipelines-in-ASP-NET-Core-Applications/",
            "title": "Using Mediator Pipelines in ASP.NET Core Applications",
            "date_published": "2020-11-02T00:00:00.000Z",
            "content_html": "<p>In my <a href=\"/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/\" title=\"Mediator Pattern in ASP.NET Core Applications\">previous article</a> I explained how you could implement <strong>Command Query Responsibility Segregation (CQRS)</strong> and <strong>Event Sourcing (ES)</strong> patterns using a mediator instance from <a href=\"https://www.nuget.org/packages/simplesoft.mediator\">SimpleSoft.Mediator</a> in ASP.NET Core applications.</p>\n<p>This time I’m going to explain how to intercept commands, queries and events, making it possible to apply transversal behavior before they reach the handlers, reducing significantly the amount of boilerplate and duplicated code.</p>\n<p>Transaction management, logging, auditing, caching or validations are some of the good examples where pipelines can be very helpful. Imagine the following chains:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Commands:</span><br><span class=\"line\">  Mediator</span><br><span class=\"line\">    LoggingPipeline</span><br><span class=\"line\">      ValidationPipeline</span><br><span class=\"line\">        TransactionPipeline</span><br><span class=\"line\">          AuditPipeline</span><br><span class=\"line\">            Handler</span><br><span class=\"line\"></span><br><span class=\"line\">Queries:</span><br><span class=\"line\">  Mediator</span><br><span class=\"line\">    LoggingPipeline</span><br><span class=\"line\">      Handler</span><br><span class=\"line\"></span><br><span class=\"line\">Events:</span><br><span class=\"line\">  Mediator</span><br><span class=\"line\">    LoggingPipeline</span><br><span class=\"line\">      StoragePipeline</span><br><span class=\"line\">        Handler(s)</span><br></pre></td></tr></table></figure>\n\n<p>Not only you can plugin any pipeline at will without changing the handlers implementation, you can also be specific to the entities each pipeline is interested.</p>\n<h1 id=\"Pipelines\"><a href=\"#Pipelines\" class=\"headerlink\" title=\"Pipelines\"></a>Pipelines</h1><p>Mediator pipelines are represented by the interface <code>IPipeline</code> (or the abstract class <code>Pipeline</code>) with methods to intercept each entity type:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IPipeline</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">Task <span class=\"title\">OnCommandAsync</span>&lt;<span class=\"title\">TCommand</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        Func&lt;TCommand, CancellationToken, Task&gt; next, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TCommand cmd, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) <span class=\"keyword\">where</span> TCommand : <span class=\"keyword\">class</span>, ICommand</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">Task</span>&lt;<span class=\"title\">TResult</span>&gt; <span class=\"title\">OnCommandAsync</span>&lt;<span class=\"title\">TCommand</span>, <span class=\"title\">TResult</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        Func&lt;TCommand, CancellationToken, Task&lt;TResult&gt;&gt; next, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TCommand cmd, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) <span class=\"keyword\">where</span> TCommand : <span class=\"keyword\">class</span>, <span class=\"title\">ICommand</span>&lt;<span class=\"title\">TResult</span>&gt;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Task <span class=\"title\">OnEventAsync</span>&lt;<span class=\"title\">TEvent</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        Func&lt;TEvent, CancellationToken, Task&gt; next, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TEvent evt, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) <span class=\"keyword\">where</span> TEvent : <span class=\"keyword\">class</span>, IEvent</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">Task</span>&lt;<span class=\"title\">TResult</span>&gt; <span class=\"title\">OnQueryAsync</span>&lt;<span class=\"title\">TQuery</span>, <span class=\"title\">TResult</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        Func&lt;TQuery, CancellationToken, Task&lt;TResult&gt;&gt; next, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TQuery query, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) <span class=\"keyword\">where</span> TQuery : <span class=\"keyword\">class</span>, IQuery&lt;TResult&gt;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You receive a delegate for the next pipe and the entity, so the concept is very simple: either do some work before or after invoking the next pipe, or break the chain by returning or throwing an exception.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IsItMondayAlreadyPipeline</span> : <span class=\"title\">Pipeline</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TResult</span>&gt; <span class=\"title\">OnQueryAsync</span>&lt;<span class=\"title\">TQuery</span>, <span class=\"title\">TResult</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        Func&lt;TQuery, CancellationToken, Task&lt;TResult&gt;&gt; next, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TQuery query, </span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(DateTime.Now.DayOfWeek == DayOfWeek.Monday)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">&quot;Today is monday, no data for you!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> next(query, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Pipelines are executed by the same order they are added to the container so, to be deterministic, don’t scan the assemblies for classes implementing <code>IPipeline</code>.</em></p>\n<h2 id=\"Commands-pipeline\"><a href=\"#Commands-pipeline\" class=\"headerlink\" title=\"Commands pipeline\"></a>Commands pipeline</h2><p>Intercept commands sent into the mediator by implementing the methods <code>OnCommandAsync</code>:</p>\n<img src=\"/2020/11/02/Using-Mediator-Pipelines-in-ASP-NET-Core-Applications/01_pipeline_command.png\" class=\"\">\n\n<h2 id=\"Queries-pipeline\"><a href=\"#Queries-pipeline\" class=\"headerlink\" title=\"Queries pipeline\"></a>Queries pipeline</h2><p>Intercept queries being fetched from the mediator by implementing the methods <code>OnQueryAsync</code>:</p>\n<img src=\"/2020/11/02/Using-Mediator-Pipelines-in-ASP-NET-Core-Applications/02_pipeline_query.png\" class=\"\">\n\n<h2 id=\"Events-pipeline\"><a href=\"#Events-pipeline\" class=\"headerlink\" title=\"Events pipeline\"></a>Events pipeline</h2><p>Intercept events before being broadcasted by the mediator into all the handlers by implementing the method <code>OnEventAsync</code>:</p>\n<img src=\"/2020/11/02/Using-Mediator-Pipelines-in-ASP-NET-Core-Applications/03_pipeline_event.png\" class=\"\">\n\n<hr>\n<h1 id=\"The-project\"><a href=\"#The-project\" class=\"headerlink\" title=\"The project\"></a>The project</h1><p>To make it easier, we are going to leverage on the <a href=\"/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/\" title=\"Mediator Pattern in ASP.NET Core Applications\">previous article</a> and continue from there. As a reminder, we implemented an endpoint to manage products with the following:</p>\n<ul>\n<li>GET &#x2F;products — search for products using some filters (<code>SearchProductsQuery</code>);</li>\n<li>GET &#x2F;products&#x2F;{id} — get a product by its unique identifier (<code>GetProductByIdQuery</code>);</li>\n<li>POST &#x2F;products — create a product (<code>CreateProductCommand</code> and <code>CreatedProductEvent</code>);</li>\n<li>PUT &#x2F;products&#x2F;{id} — update a product by its unique identifier (<code>UpdateProductCommand</code> and <code>UpdatedProductEvent</code>);</li>\n<li>DELETE &#x2F;products&#x2F;{id} — delete a product by its unique identifier (<code>DeleteProductCommand</code> and <code>DeletedProductEvent</code>);</li>\n</ul>\n<p>The complete source code can be found on <a href=\"https://github.com/gravity00/IntroductionMediatorCQRS\">GitHub</a>.</p>\n<h1 id=\"The-pipelines\"><a href=\"#The-pipelines\" class=\"headerlink\" title=\"The pipelines\"></a>The pipelines</h1><p>Since the objective of this article is to show how to implement pipelines in the mediator, the following should be enough:</p>\n<ul>\n<li><strong>LoggingPipeline</strong> — serializes every command, queries, events and results as JSON into the log if <code>Trace</code> is enabled;</li>\n<li><strong>TimeoutPipeline</strong> — cancels the handler execution if it takes more than a given set of time;</li>\n</ul>\n<p>Start by creating a <code>Pipelines</code> folder at the project root level.</p>\n<img src=\"/2020/11/02/Using-Mediator-Pipelines-in-ASP-NET-Core-Applications/04_project_structure_pipelines.png\" class=\"\">\n\n<h2 id=\"LoggingPipeline\"><a href=\"#LoggingPipeline\" class=\"headerlink\" title=\"LoggingPipeline\"></a>LoggingPipeline</h2><p>Because we don’t want logging to affect the timeout, this will be the first pipeline to be added to the chain.</p>\n<p>Inside the <code>Pipelines</code> folder, create a <code>LoggingPipeline</code> class implementing <code>IPipeline</code>. This pipeline will receive an <code>ILogger</code> instance and use <code>System.Text.Json</code> to serialize the objects:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">LoggingPipeline</span> : <span class=\"title\">IPipeline</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ILogger&lt;LoggingPipeline&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> JsonSerializerOptions _serializerOptions = <span class=\"keyword\">new</span> JsonSerializerOptions</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        WriteIndented = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoggingPipeline</span>(<span class=\"params\">ILogger&lt;LoggingPipeline&gt; logger</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnCommandAsync</span>&lt;<span class=\"title\">TCommand</span>&gt;(<span class=\"params\">Func&lt;TCommand, CancellationToken, Task&gt; next, TCommand cmd, CancellationToken ct</span>) </span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">where</span> TCommand : <span class=\"keyword\">class</span>, ICommand</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Log(<span class=\"string\">&quot;Command: &#123;command&#125;&quot;</span>, cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> next(cmd, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TResult</span>&gt; <span class=\"title\">OnCommandAsync</span>&lt;<span class=\"title\">TCommand</span>, <span class=\"title\">TResult</span>&gt;(<span class=\"params\">Func&lt;TCommand, CancellationToken, Task&lt;TResult&gt;&gt; next, TCommand cmd, CancellationToken ct</span>) </span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">where</span> TCommand : <span class=\"keyword\">class</span>, ICommand&lt;TResult&gt;</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Log(<span class=\"string\">&quot;Command: &#123;command&#125;&quot;</span>, cmd);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> next(cmd, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        Log(<span class=\"string\">&quot;Command.Result: &#123;commandResult&#125;&quot;</span>, result);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnEventAsync</span>&lt;<span class=\"title\">TEvent</span>&gt;(<span class=\"params\">Func&lt;TEvent, CancellationToken, Task&gt; next, TEvent evt, CancellationToken ct</span>) </span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">where</span> TEvent : <span class=\"keyword\">class</span>, IEvent</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Log(<span class=\"string\">&quot;Event: &#123;event&#125;&quot;</span>, evt);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> next(evt, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TResult</span>&gt; <span class=\"title\">OnQueryAsync</span>&lt;<span class=\"title\">TQuery</span>, <span class=\"title\">TResult</span>&gt;(<span class=\"params\">Func&lt;TQuery, CancellationToken, Task&lt;TResult&gt;&gt; next, TQuery query, CancellationToken ct</span>) </span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">where</span> TQuery : <span class=\"keyword\">class</span>, IQuery&lt;TResult&gt;</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Log(<span class=\"string\">&quot;Query: &#123;query&#125;&quot;</span>, query);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> next(query, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        Log(<span class=\"string\">&quot;Query.Result: &#123;queryResult&#125;&quot;</span>, result);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">Log</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"><span class=\"built_in\">string</span> message, T instance</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_logger.IsEnabled(LogLevel.Trace))</span><br><span class=\"line\">            _logger.LogTrace(message, JsonSerializer.Serialize(instance, _serializerOptions));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>Startup.cs</code> file and register the pipeline into the mediator:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services.AddMediator(o =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    o.AddPipeline&lt;LoggingPipeline&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    o.AddHandlersFromAssemblyOf&lt;Startup&gt;();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>appsettings.development.json</code> file and set the default log level to <code>Trace</code>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;Logging&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;LogLevel&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;Default&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Trace&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;Microsoft&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Warning&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;Microsoft.Hosting.Lifetime&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Information&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>If you now start the server and do some actions in the API, like creating or searching for products, you should start seeing your objects being serialized:</p>\n<img src=\"/2020/11/02/Using-Mediator-Pipelines-in-ASP-NET-Core-Applications/05_pipeline_logging_logs.png\" class=\"\">\n\n<p><em>As a note, if you find this helpful for your APIs, you can use the NuGet <a href=\"https://www.nuget.org/packages/simplesoft.mediator.microsoft.extensions.loggingpipeline\">SimpleSoft.Mediator.Microsoft.Extensions.LoggingPipeline</a>. Just give a look at the <code>Startup.cs</code> file in <a href=\"https://github.com/simplesoft-pt/Mediator/blob/master/work/SimpleSoft.Mediator.Example.Api/Startup.cs\">the example API</a>.</em></p>\n<h2 id=\"TimeoutPipeline\"><a href=\"#TimeoutPipeline\" class=\"headerlink\" title=\"TimeoutPipeline\"></a>TimeoutPipeline</h2><p>Inside the <code>Pipelines</code> folder, create a <code>TimeoutPipeline</code> class implementing <code>IPipeline</code>. For simplicity, the timeout value will be fixed, but could be received as an options from the container.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TimeoutPipeline</span> : <span class=\"title\">IPipeline</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">readonly</span> TimeSpan Timeout = TimeSpan.FromMilliseconds(<span class=\"number\">500</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnCommandAsync</span>&lt;<span class=\"title\">TCommand</span>&gt;(<span class=\"params\">Func&lt;TCommand, CancellationToken, Task&gt; next, TCommand cmd, CancellationToken ct</span>) </span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">where</span> TCommand : <span class=\"keyword\">class</span>, ICommand</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> cts = CreateCancellationTokenSource(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> next(cmd, cts.Token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TResult</span>&gt; <span class=\"title\">OnCommandAsync</span>&lt;<span class=\"title\">TCommand</span>, <span class=\"title\">TResult</span>&gt;(<span class=\"params\">Func&lt;TCommand, CancellationToken, Task&lt;TResult&gt;&gt; next, TCommand cmd, CancellationToken ct</span>) </span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">where</span> TCommand : <span class=\"keyword\">class</span>, ICommand&lt;TResult&gt;</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> cts = CreateCancellationTokenSource(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> next(cmd, cts.Token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">OnEventAsync</span>&lt;<span class=\"title\">TEvent</span>&gt;(<span class=\"params\">Func&lt;TEvent, CancellationToken, Task&gt; next, TEvent evt, CancellationToken ct</span>) </span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">where</span> TEvent : <span class=\"keyword\">class</span>, IEvent</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> cts = CreateCancellationTokenSource(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> next(evt, cts.Token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TResult</span>&gt; <span class=\"title\">OnQueryAsync</span>&lt;<span class=\"title\">TQuery</span>, <span class=\"title\">TResult</span>&gt;(<span class=\"params\">Func&lt;TQuery, CancellationToken, Task&lt;TResult&gt;&gt; next, TQuery query, CancellationToken ct</span>) </span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">where</span> TQuery : <span class=\"keyword\">class</span>, IQuery&lt;TResult&gt;</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> cts = CreateCancellationTokenSource(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> next(query, cts.Token);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CancellationTokenSource <span class=\"title\">CreateCancellationTokenSource</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> cts = CancellationTokenSource.CreateLinkedTokenSource(ct);</span><br><span class=\"line\">        cts.CancelAfter(Timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cts;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Once again, open the <code>Startup.cs</code> file and register the pipeline into the mediator <strong>after</strong> the logging pipe:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services.AddMediator(o =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    o.AddPipeline&lt;LoggingPipeline&gt;();</span><br><span class=\"line\">    o.AddPipeline&lt;TimeoutPipeline&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    o.AddHandlersFromAssemblyOf&lt;Startup&gt;();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>If you now open any of your handlers and add an <code>Task.Delay(1000, ct)</code> into the <code>HandleAsync</code> methods you should receive a <code>TaskCanceledException</code>. I added one when searching for products:</p>\n<img src=\"/2020/11/02/Using-Mediator-Pipelines-in-ASP-NET-Core-Applications/06_pipeline_timeout_stacktrace_response.png\" class=\"\">\n\n<p>If you look at the stack trace, you’ll see the invocation order was kept:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ProductsController</span><br><span class=\"line\">    MicrosoftFetcher (internal class used by the mediator)</span><br><span class=\"line\">        LoggingPipeline</span><br><span class=\"line\">            TimeoutPipeline</span><br><span class=\"line\">                SearchProductsQueryHandler</span><br></pre></td></tr></table></figure>\n\n<p>The project structure with pipeline classes:</p>\n<img src=\"/2020/11/02/Using-Mediator-Pipelines-in-ASP-NET-Core-Applications/07_project_structure_pipelines_impl.png\" class=\"\">\n\n<p>The final <code>Startup.cs</code> file:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddDbContext&lt;ApiDbContext&gt;(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.UseInMemoryDatabase(<span class=\"string\">&quot;ApiDbContext&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddMediator(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.AddPipeline&lt;LoggingPipeline&gt;();</span><br><span class=\"line\">            o.AddPipeline&lt;TimeoutPipeline&gt;();</span><br><span class=\"line\">            o.AddHandlersFromAssemblyOf&lt;Startup&gt;();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseSwagger();</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseSwaggerUI(c =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            c.SwaggerEndpoint(<span class=\"string\">&quot;/swagger/v1/swagger.json&quot;</span>, <span class=\"string\">&quot;Mediator ExampleApi V1&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseRouting();</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseEndpoints(endpoints =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            endpoints.MapControllers();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I hope this article gave you a good idea about mediator pipelines and how you can use them to empower your solutions, making them more resilient to developer mistakes (like forgetting to save changes into the database).</p>\n<p>For me, this is one of the strongest aspects of the mediator pattern and one of the main reason I always use this pattern even when implementing <strong>minimum viable products</strong>.</p>\n",
            "tags": [
                "dotnetcore",
                "aspnetcore",
                "csharp",
                "patterns"
            ]
        },
        {
            "id": "https://code-corner.dev/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/",
            "url": "https://code-corner.dev/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/",
            "title": "Mediator Pattern in ASP.NET Core Applications",
            "date_published": "2020-10-28T00:00:00.000Z",
            "content_html": "<p>For the last few years, <strong>Command Query Responsibility Segregation (CQRS)</strong> and <strong>Event Sourcing (ES)</strong> emerged as patterns that can help implement large scale systems, with some risky complexity, by having different models to read or mutate data while also using events as a single source of truth.</p>\n<p>Since there are already great articles explaining <a href=\"https://martinfowler.com/bliki/CQRS.html\"><strong>CQRS</strong></a> or <a href=\"https://martinfowler.com/eaaDev/EventSourcing.html\"><strong>ES</strong></a> in great depth, I’m going to focus and show how you can decouple your application layers by only knowing POCOs and a mediator instance from <a href=\"https://www.nuget.org/packages/simplesoft.mediator\">SimpleSoft.Mediator</a>.</p>\n<p>Remember that, even if you are not using <strong>CQRS</strong> or <strong>ES</strong> to its full extend, just by ensuring a logical model segregation inside the project can make your life easier in the long run, even when implementing a simple <strong>Backend for Frontend (BFF)</strong> or a <strong>minimum viable product (MVP)</strong>.</p>\n<h1 id=\"Commands-Queries-Events-Handlers-and-Mediator\"><a href=\"#Commands-Queries-Events-Handlers-and-Mediator\" class=\"headerlink\" title=\"Commands, Queries, Events, Handlers and Mediator\"></a>Commands, Queries, Events, Handlers and Mediator</h1><p>Before showing some code, lets make a simple review of some core concepts about these patterns and the library we are going to use:</p>\n<ul>\n<li><strong>Commands</strong> - each action intended to change the system state, by creating, updating or deleting information, should be represented by a class implementing either <code>ICommand</code> or <code>ICommand&lt;TResult&gt;</code>, if you are using the mediator just for in-process decoupling and want to return a result synchronously. Examples: <code>CreateProductCommand</code> or <code>DeleteUserCommand</code>;</li>\n<li><strong>Queries</strong> - classes implementing <code>IQuery&lt;TResult&gt;</code> represent data reads that shouldn’t change the system state or else they must be considered commands. Examples: <code>GetProductByIdQuery</code> or <code>SearchUsersQuery</code>;</li>\n<li><strong>Events</strong> — representing system changes over time, these classes implement <code>IEvent</code>. Examples: <code>ProductCreatedEvent</code> or <code>UpdatedUserEmailEvent</code>;</li>\n<li><strong>Handlers</strong> — responsible for receiving the commands (<code>ICommandHandler</code>), queries (<code>IQueryHandler</code>) or events (<code>IEventHandler</code>), they implement the business behavior to be run. Examples: <code>CreateProductCommandHandler</code> or <code>GetProductByIdQueryHandler</code>;</li>\n<li><strong>Mediator</strong> — decouples the caller from the executor exposing generic methods to send commands, fetch queries or broadcast events, being responsible for finding the correct handler (or handlers, in case of an event) and is represented by the interface <code>IMediator</code>;</li>\n</ul>\n<p>I also made articles <a href=\"/2020/11/02/Using-Mediator-Pipelines-in-ASP-NET-Core-Applications/\" title=\"Using Mediator Pipelines in ASP.NET Core Applications\">explaining how pipelines work</a>, how to enforce <a href=\"/2020/11/04/Validation-with-Mediator-Pipelines-in-ASP-NET-Core-Applications/\" title=\"Validation with Mediator Pipelines in ASP.NET Core Applications\">validations</a>, how to <a href=\"/2020/11/07/Transaction-Management-With-Mediator-Pipelines-in-ASP-NET-Core/\" title=\"Transaction Management With Mediator Pipelines in ASP.NET Core\">manage transactions</a> and how to <a href=\"/2020/11/25/Auditing-with-Mediator-Pipelines-in-ASP-NET-Core/\" title=\"Auditing with Mediator Pipelines in ASP.NET Core\">audit user actions</a>.</p>\n<hr>\n<h1 id=\"The-project\"><a href=\"#The-project\" class=\"headerlink\" title=\"The project\"></a>The project</h1><p>The source code for this article can be found on <a href=\"https://github.com/gravity00/IntroductionMediatorCQRS\">GitHub</a>.</p>\n<p>Start by opening Visual Studio and creating an <strong>ASP.NET Core 3.1 Web Application</strong> with a name and at any location.</p>\n<img src=\"/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/configure-project.png\" class=\"\">\n\n<p>Choose an empty project since this is just a demo.</p>\n<img src=\"/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/configure-project-empty.png\" class=\"\">\n\n<p>Install the Nuget <code>Swashbuckle.AspNetCore</code> so we can use Swagger to test the API:</p>\n<img src=\"/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/configure-project-nuget-swagger.png\" class=\"\">\n\n<p>Open the file <code>Startup.cs</code> and configure both MVC and Swagger, making it easier to test our web API.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddSwaggerGen();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseSwagger();</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseSwaggerUI(c =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            c.SwaggerEndpoint(<span class=\"string\">&quot;/swagger/v1/swagger.json&quot;</span>, <span class=\"string\">&quot;Mediator ExampleApi V1&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseRouting();</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseEndpoints(endpoints =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            endpoints.MapControllers();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-web-API\"><a href=\"#The-web-API\" class=\"headerlink\" title=\"The web API\"></a>The web API</h1><p>Since the objective of this article is to show the mediator pattern, a simple endpoint to manage products should be enough:</p>\n<ul>\n<li>GET &#x2F;products — search for products using some filters;</li>\n<li>GET &#x2F;products&#x2F;{id} — get a product by its unique identifier;</li>\n<li>POST &#x2F;products — create a product;</li>\n<li>PUT &#x2F;products&#x2F;{id} — update a product by its unique identifier;</li>\n<li>DELETE &#x2F;products&#x2F;{id} — delete a product by its unique identifier;</li>\n</ul>\n<p>Create a <code>Controllers</code> folder with another <code>Products</code> folder inside, a <code>ProductsController</code> and the following models:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;products&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductsController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IEnumerable&lt;ProductModel&gt;&gt; SearchAsync([FromQuery] <span class=\"built_in\">string</span> filterQ, [FromQuery] <span class=\"built_in\">int</span>? skip, [FromQuery] <span class=\"built_in\">int</span>? take, CancellationToken ct)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotImplementedException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet(<span class=\"string\">&quot;&#123;id:guid&#125;&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;ProductModel&gt; <span class=\"title\">GetByIdAsync</span>(<span class=\"params\">[FromRoute] Guid id, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotImplementedException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;CreateProductResultModel&gt; <span class=\"title\">CreateAsync</span>(<span class=\"params\">[FromBody] CreateProductModel model, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotImplementedException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpPut(<span class=\"string\">&quot;&#123;id:guid&#125;&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">UpdateAsync</span>(<span class=\"params\">[FromRoute] Guid id, [FromBody] UpdateProductModel model, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotImplementedException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpDelete(<span class=\"string\">&quot;&#123;id:guid&#125;&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">DeleteAsync</span>(<span class=\"params\">[FromRoute] Guid id, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> NotImplementedException();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreateProductModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Price &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreateProductResultModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Price &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">UpdateProductModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Price &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The project should look as follows:</p>\n<img src=\"/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/web-api-project-structure.png\" class=\"\">\n\n<p>Open the Swagger endpoint (ex: <a href=\"https://localhost:44380/swagger/index.html\">https://localhost:44380/swagger/index.html</a>) and you should see your products endpoint with all the actions:</p>\n<img src=\"/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/web-api-swagger.png\" class=\"\">\n\n<h2 id=\"The-database-model\"><a href=\"#The-database-model\" class=\"headerlink\" title=\"The database model\"></a>The database model</h2><p>For demo purposes we are going to use <strong>Entity Framework Core</strong> with data stored in-memory.</p>\n<p>Install the Nuget <code>Microsoft.EntityFrameworkCore.InMemory</code>:</p>\n<img src=\"/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/database-model-nuget-ef-core-inmemory.png\" class=\"\">\n\n<p>Create a <code>Database</code> folder, the following database context and entities for products and events, to store both the business data and mutations history:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ApiDbContext</span> : <span class=\"title\">DbContext</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApiDbContext</span>(<span class=\"params\">DbContextOptions&lt;ApiDbContext&gt; options</span>) : <span class=\"title\">base</span>(<span class=\"params\">options</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnModelCreating</span>(<span class=\"params\">ModelBuilder builder</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">base</span>.OnModelCreating(builder);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.Entity&lt;ProductEntity&gt;(cfg =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cfg.HasKey(e =&gt; e.Id);</span><br><span class=\"line\">            cfg.HasAlternateKey(e =&gt; e.ExternalId);</span><br><span class=\"line\">            cfg.HasIndex(e =&gt; e.Code).IsUnique();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.ExternalId)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Code)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">8</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Name)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">128</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Price)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.Entity&lt;EventEntity&gt;(cfg =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cfg.HasKey(e =&gt; e.Id);</span><br><span class=\"line\">            cfg.HasAlternateKey(e =&gt; e.ExternalId);</span><br><span class=\"line\">            cfg.HasIndex(e =&gt; e.CreatedOn);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Name)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">128</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Payload)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.CreatedOn)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.CreatedBy)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">128</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">EventEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid ExternalId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Payload &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTimeOffset CreatedOn &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> CreatedBy &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid ExternalId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Price &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>Startup.cs</code> file and add the context into the container as an in-memory database:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services.AddDbContext&lt;ApiDbContext&gt;(o =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    o.UseInMemoryDatabase(<span class=\"string\">&quot;ApiDbContext&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>The project should look as follows:</p>\n<img src=\"/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/database-model-project-structure.png\" class=\"\">\n\n<h1 id=\"The-mediator\"><a href=\"#The-mediator\" class=\"headerlink\" title=\"The mediator\"></a>The mediator</h1><p>Now that we have created the demo endpoint, models and database, its time to configure the mediator.</p>\n<p>Install the Nuget <code>SimpleSoft.Mediator.Microsoft.Extensions</code> which is a specialized package for projects using <code>Microsoft.Extensions.*</code>:</p>\n<img src=\"/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/mediator-nuget.png\" class=\"\">\n\n<p>Open the <code>Startup.cs</code> file and add the mediator into the container, scanning the current assembly for all classes implementing <code>ICommandHandler</code>, <code>IQueryHandler</code> and <code>IEventHandler</code>:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services.AddMediator(o =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    o.AddHandlersFromAssemblyOf&lt;Startup&gt;();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>ProductsController.cs</code> file and inject into the constructor the <code>IMediator</code> instance:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IMediator _mediator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProductsController</span>(<span class=\"params\">IMediator mediator</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    _mediator = mediator;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-handlers\"><a href=\"#The-handlers\" class=\"headerlink\" title=\"The handlers\"></a>The handlers</h1><p>We now have everything we need to start implementing the business logic.</p>\n<p>To keep it simple, we are not going to use the mediator pipelines, only focusing on commands, queries, events and their handlers. As stated before, I made <a href=\"/2020/11/02/Using-Mediator-Pipelines-in-ASP-NET-Core-Applications/\" title=\"Using Mediator Pipelines in ASP.NET Core Applications\">some articles more specific for those use cases</a>.</p>\n<p>Start by creating a folder named <code>Handlers</code> with another inside <code>Products</code> in which we are going to put our POCOs and their handlers.</p>\n<p><em>As a note, remember this is a demo article and this project structure <strong>should not be seen as a valid way to organize your solution</strong> in your private projects. Commands, queries, events and their handlers should be, at minimum, in different folders.</em></p>\n<h2 id=\"CreateProductComand\"><a href=\"#CreateProductComand\" class=\"headerlink\" title=\"CreateProductComand\"></a>CreateProductComand</h2><p>We need data so lets create a command that allows that and will be sent when a request for POST &#x2F;products is received.</p>\n<p>Create a class <code>CreateProductResult</code> that will be returned by the handler with the product unique identifier and a <code>CreateProductCommand</code>, implementing the class <code>Command&lt;CreateProductResult&gt;</code>:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreateProductCommand</span> : <span class=\"title\">Command</span>&lt;<span class=\"title\">CreateProductResult</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Price &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreateProductResult</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>ProductsController.cs</code> file and inside the method <code>CreateAsync</code> send the command into the mediator and map its result:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;products&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductsController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IMediator _mediator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProductsController</span>(<span class=\"params\">IMediator mediator</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _mediator = mediator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;CreateProductResultModel&gt; <span class=\"title\">CreateAsync</span>(<span class=\"params\">[FromBody] CreateProductModel model, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> _mediator.SendAsync(<span class=\"keyword\">new</span> CreateProductCommand</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Code = model.Code,</span><br><span class=\"line\">            Name = model.Name,</span><br><span class=\"line\">            Price = model.Price</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CreateProductResultModel</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = result.Id</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If we now invoked the endpoint, we would receive an exception saying that no <code>ICommandHandler&lt;CreateProductCommand, CreateProductResult&gt;</code> was found by the container.</p>\n<p>We will fix that by creating the class <code>CreateProductCommandHandler</code> with the business logic for this action. For this demo, an <code>InvalidOperationException</code> with a custom message will be thrown when a duplicated code is received:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreateProductCommandHandler</span> : <span class=\"title\">ICommandHandler</span>&lt;<span class=\"title\">CreateProductCommand</span>, <span class=\"title\">CreateProductResult</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ApiDbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CreateProductCommandHandler</span>(<span class=\"params\">ApiDbContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;CreateProductResult&gt; <span class=\"title\">HandleAsync</span>(<span class=\"params\">CreateProductCommand cmd, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> products = _context.Set&lt;ProductEntity&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">await</span> products.AnyAsync(p =&gt; p.Code == cmd.Code, ct))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">$&quot;Product code &#x27;<span class=\"subst\">&#123;cmd.Code&#125;</span>&#x27; already exists&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> externalId = Guid.NewGuid();</span><br><span class=\"line\">        <span class=\"keyword\">await</span> products.AddAsync(<span class=\"keyword\">new</span> ProductEntity</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExternalId = externalId,</span><br><span class=\"line\">            Code = cmd.Code,</span><br><span class=\"line\">            Name = cmd.Name,</span><br><span class=\"line\">            Price = cmd.Price</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CreateProductResult</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = externalId</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you now try to create a product using the Swagger endpoint, you will receive the response with the unique identifier or an internal server error indicating a duplicated code.</p>\n<p>The project should look as follows:</p>\n<img src=\"/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/handlers-project-structure-01.png\" class=\"\">\n\n<h2 id=\"GetProductByIdQuery\"><a href=\"#GetProductByIdQuery\" class=\"headerlink\" title=\"GetProductByIdQuery\"></a>GetProductByIdQuery</h2><p>Time to return a product when a GET &#x2F;products&#x2F;:id is received by the web API.</p>\n<p>Inside the <code>Handlers/Products</code> folder, create a <code>Product</code>, the <code>GetProductByIdQuery</code> and its corresponding handler, <code>GetProductByIdQueryHandler</code>. Like in the previous handler, for this demo, we are going to throw an <code>InvalidOperationException</code> if the id is unknown:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">GetProductByIdQuery</span> : <span class=\"title\">Query</span>&lt;<span class=\"title\">Product</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid ProductId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Product</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Price &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">GetProductByIdQueryHandler</span> : <span class=\"title\">IQueryHandler</span>&lt;<span class=\"title\">GetProductByIdQuery</span>, <span class=\"title\">Product</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IQueryable&lt;ProductEntity&gt; _products;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GetProductByIdQueryHandler</span>(<span class=\"params\">ApiDbContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _products = context.Set&lt;ProductEntity&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;Product&gt; <span class=\"title\">HandleAsync</span>(<span class=\"params\">GetProductByIdQuery query, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> product = <span class=\"keyword\">await</span> _products.SingleOrDefaultAsync(p =&gt; p.ExternalId == query.ProductId, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (product == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">$&quot;Product &#x27;<span class=\"subst\">&#123;query.ProductId&#125;</span>&#x27; not found&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Product</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = product.ExternalId,</span><br><span class=\"line\">            Code = product.Code,</span><br><span class=\"line\">            Name = product.Name,</span><br><span class=\"line\">            Price = product.Price</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>ProductsController.cs</code> file and inside the method <code>GetByIdAsync</code> fetch the query from the mediator and map its result:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;products&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductsController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IMediator _mediator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProductsController</span>(<span class=\"params\">IMediator mediator</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _mediator = mediator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet(<span class=\"string\">&quot;&#123;id:guid&#125;&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;ProductModel&gt; <span class=\"title\">GetByIdAsync</span>(<span class=\"params\">[FromRoute] Guid id, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> _mediator.FetchAsync(<span class=\"keyword\">new</span> GetProductByIdQuery</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ProductId = id</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ProductModel</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = result.Id,</span><br><span class=\"line\">            Code = result.Code,</span><br><span class=\"line\">            Name = result.Name,</span><br><span class=\"line\">            Price = result.Price</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you now try to get a product using the Swagger endpoint, you will receive the product or an internal server error indicating an unknown identifier.</p>\n<h2 id=\"CreatedProductEvent\"><a href=\"#CreatedProductEvent\" class=\"headerlink\" title=\"CreatedProductEvent\"></a>CreatedProductEvent</h2><p>Finally, we are going to create an event that will be broadcast when a product is successfully created.</p>\n<p>Just like the previous ones, create a <code>CreateProductEvent</code> and the handler <code>CreateProductEventHandler</code> that will serialize and store it into the events table.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreatedProductEvent</span> : <span class=\"title\">Event</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid ExternalId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Price &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreatedProductEventHandler</span> : <span class=\"title\">IEventHandler</span>&lt;<span class=\"title\">CreatedProductEvent</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ApiDbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CreatedProductEventHandler</span>(<span class=\"params\">ApiDbContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">HandleAsync</span>(<span class=\"params\">CreatedProductEvent evt, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Set&lt;EventEntity&gt;().AddAsync(<span class=\"keyword\">new</span> EventEntity</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExternalId = evt.Id,</span><br><span class=\"line\">            Name = <span class=\"keyword\">nameof</span>(CreatedProductEvent),</span><br><span class=\"line\">            Payload = JsonSerializer.Serialize(evt),</span><br><span class=\"line\">            CreatedOn = evt.CreatedOn,</span><br><span class=\"line\">            CreatedBy = evt.CreatedBy</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>CreateProductCommandHandler</code> file, inject the <code>IMediator</code> instance and broadcast the event before saving flushing all changes into the database:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreateProductCommandHandler</span> : <span class=\"title\">ICommandHandler</span>&lt;<span class=\"title\">CreateProductCommand</span>, <span class=\"title\">CreateProductResult</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ApiDbContext _context;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IMediator _mediator;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CreateProductCommandHandler</span>(<span class=\"params\">ApiDbContext context, IMediator mediator</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">        _mediator = mediator;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;CreateProductResult&gt; <span class=\"title\">HandleAsync</span>(<span class=\"params\">CreateProductCommand cmd, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> products = _context.Set&lt;ProductEntity&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">await</span> products.AnyAsync(p =&gt; p.Code == cmd.Code, ct))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> InvalidOperationException(<span class=\"string\">$&quot;Product code &#x27;<span class=\"subst\">&#123;cmd.Code&#125;</span>&#x27; already exists&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> externalId = Guid.NewGuid();</span><br><span class=\"line\">        <span class=\"keyword\">await</span> products.AddAsync(<span class=\"keyword\">new</span> ProductEntity</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExternalId = externalId,</span><br><span class=\"line\">            Code = cmd.Code,</span><br><span class=\"line\">            Name = cmd.Name,</span><br><span class=\"line\">            Price = cmd.Price</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _mediator.BroadcastAsync(<span class=\"keyword\">new</span> CreatedProductEvent</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExternalId = externalId,</span><br><span class=\"line\">            Code = cmd.Code,</span><br><span class=\"line\">            Name = cmd.Name,</span><br><span class=\"line\">            Price = cmd.Price</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CreateProductResult</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = externalId</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The project should look as follows:</p>\n<img src=\"/2020/10/28/Mediator-Pattern-in-ASP-NET-Core-Applications/handlers-project-structure-02.png\" class=\"\">\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I hope this article gave you a good idea on how to use the mediator to implement the <strong>CQRS</strong> and <strong>ES</strong> patterns even if you are implementing an <strong>MVP</strong> and can’t spend much time thinking about the architecture but you still want something that can be maintained and extended for some time.</p>\n<p>Soon I’ll be explaining more advanced scenarios, like using the mediator pipeline to validate commands before reaching the handler, managing database transactions or even implementing transversal auditing into you application.</p>\n",
            "tags": [
                "dotnetcore",
                "aspnetcore",
                "csharp",
                "patterns"
            ]
        }
    ]
}