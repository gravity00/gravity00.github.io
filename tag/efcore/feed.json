{
    "version": "https://jsonfeed.org/version/1",
    "title": "code-corner.dev • All posts by \"efcore\" tag",
    "description": "",
    "home_page_url": "https://code-corner.dev",
    "items": [
        {
            "id": "https://code-corner.dev/2023/12/04/NET-%E2%80%94-DevOps-and-Entity-Framework-Core/",
            "url": "https://code-corner.dev/2023/12/04/NET-%E2%80%94-DevOps-and-Entity-Framework-Core/",
            "title": ".NET — DevOps and Entity Framework Core",
            "date_published": "2023-12-04T00:00:00.000Z",
            "content_html": "<p>Most .NET developers either have used Entity Framework Core or eventually will, because it is one of the most known and flexible ORM frameworks to access databases in the .NET ecosystem, directly supported by Microsoft and the Open Source community.</p>\n<p>In this article I’m going to explain how you can create a console application that will check if migrations are missing from the database and apply them accordingly. This is an approach I’ve been using ever since Microsoft released .NET Core 1 RC 1 (<a href=\"https://medium.com/@joaoprsimoes/net-creating-advanced-console-applications-c99d58216d36\">at the time I even created an open-source library to facilitate console hosting</a>, now deprecated because we can use <code>Microsoft.Extensions.Hosting</code>).</p>\n<hr>\n<p>Ever since its inception, one of the main features supported by Entity Framework is the concept of <strong>database migrations</strong> in code-first scenarios which, in a simplified way, work as follows:</p>\n<ul>\n<li>Model entities representing tables are mapped into the <code>DbContext</code>, were table and column names, data sizes, foreign keys, indexes, and so on, are defined;</li>\n<li>Entity Framework tools are <a href=\"https://learn.microsoft.com/en-us/ef/core/managing-schemas/migrations/?tabs=dotnet-core-cli#install-the-tools\">installed into the project</a> (either the .NET Core CLI tools for cross platform or Package Manager Console tools for Visual Studio integration);</li>\n<li>A class implementing <code>IDesignTimeDbContextFactory</code> is created and will configure the <code>DbContext</code> when Entity Framework tools are run — provider to use, connection string, etc. This reduces the number of parameters that need to be passed when using the CLI&#x2F;PMC tools.</li>\n<li>When adding a new migration, the tools are going to use the factory to create the <code>DbContext</code>, compare the mappings to the current database schema, see what’s different and create a migration class with a bunch of C# operations that will change the schema accordingly (like creating a new index, adding a new column, dropping a table). The migration will also have a method for the inverse operations (drop the index, remove the column, recreate the table) that can be used to revert changes;</li>\n<li>The tools can also be run to update the database schema, either to the most recent or revert to an older version, ensuring missing migrations are run sequentially in the required order.</li>\n</ul>\n<p>This is a very powerful feature offered by EF Core because it speeds up the development and evolution of the database schemas while ensuring a historic change log is kept and version controlled near the C# entity models. The application may have been developed for 10 years but any new team member can setup a local version of the database in just a few steps.</p>\n<p>But you are probably thinking: <em>this seems nice and all, but he’s talking about DevOps and I’m not sure how I can use this to evolve my production schemas? The company I work for does not allow any developer to connect to production databases and even if it did, certainly the user wouldn’t have permissions to change the database schema! I can’t run EF Core tools from my computer to do this!</em></p>\n<h1 id=\"Why-an-installer-for-EF-Core-migrations\"><a href=\"#Why-an-installer-for-EF-Core-migrations\" class=\"headerlink\" title=\"Why an installer for EF Core migrations?\"></a>Why an installer for EF Core migrations?</h1><p>Having a console application that applies migrations to a database has some advantages that will probably benefit the DevOps process your company currently implements:</p>\n<ul>\n<li>For <strong>cloud solutions</strong>, you can add steps into the Continuous Delivery pipeline that run the console before distributing the APIs or Websites, which may even require the approval of specific DevOps team members. Because the pipeline is tightly controlled, the production connection strings that can execute DDL instructions are properly secured. Even if you don’t have a DevOps team but the access to production is secured by the Infrastructure team, the console can be provided as a standalone executable and they decide how and where it should be run, manually or not.</li>\n<li>For <strong>on-prem solutions</strong>, the console can be packed with the application installer to be run every time a new version is released. If it fails, the installation process can either be halted or database changes reverted to a previous state by restoring a backup made at the start of the installation.</li>\n</ul>\n<p>In both scenarios this process is more reliable than, lets say, executing SQL scripts which are harder to read, maintain and debug in case of problems. If the console application has been configured with a good logging library (either to a file or command line output) there’s no reason someone can’t analyze what is happening.</p>\n<p>The use case scenario<br>To keep things simple and focusing in the migrations executable, let’s assume we are maintaining an API that manages a warehouse. This API is responsible for storing product information and stock movements and is implemented using a typical three-layer architecture, using Entity Framework Core to store and retrieve data from a SQL Server database.</p>\n<p>In this hypothetical scenario, we decided to improve our DevOps process by creating a console application to apply migrations into the database. This tool will be called migrator, which is a new console project inside the database layer.</p>\n<p>It will have a direct dependency from the database implementation, which holds the Entity Framework Core mappings for the database entities, defined in the database contracts layer.</p>\n<p>The diagram for projects and their dependencies inside the solution, after creating the migrator executable project, could look like this:</p>\n<img src=\"/2023/12/04/NET-%E2%80%94-DevOps-and-Entity-Framework-Core/01_solution_diagram.png\" class=\"\">\n\n<p>Since this API only manages products and stock movements, the database model could be represented by the following entity contracts (navigation properties won’t be used for simplicity):</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">StockMovementEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> ProductId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Quantity &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTimeOffset OccurredOn &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The Entity Framework Core database context could be mapped as follows:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        .HasMaxLength(<span class=\"number\">8</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Name)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">128</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        modelBuilder.Entity&lt;StockMovementEntity&gt;(cfg =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cfg.ToTable(<span class=\"string\">&quot;StockMovements&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            cfg.HasKey(e =&gt; e.Id);</span><br><span class=\"line\"></span><br><span class=\"line\">            cfg.Property(e =&gt; e.Id)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .ValueGeneratedOnAdd();</span><br><span class=\"line\">            cfg.HasOne&lt;ProductEntity&gt;()</span><br><span class=\"line\">                .WithMany()</span><br><span class=\"line\">                .HasForeignKey(e =&gt; e.ProductId)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Quantity)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.OccurredOn)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As I said before, nothing fancy here, just a simple use-case with a database model we will use for creating our migrations and apply them using our console application.</p>\n<p><a href=\"https://github.com/gravity00/article-devops-efcore\">I have a working example showcasing this scenario on GitHub (only the database layer), so feel free to give it a good look</a>. I’m using .NET 8, but any previous .NET version will work without any code changes. If for some reason you need to support older framework versions like .NET Core App 2+ or .NET Framework 4.6.2+, just downgrade the nuggets to a previous versions that supports .NET Standard 2.0, like versions 2.x or 3.x, and do some small tweaks into the hosting setup.</p>\n<h1 id=\"Console-application-setup\"><a href=\"#Console-application-setup\" class=\"headerlink\" title=\"Console application setup\"></a>Console application setup</h1><p>Now that we have defined both models and mappings, let’s setup the console application, which is going to use <code>Microsoft.Extensions.Hosting</code> for an easier setup of logging, dependency injection and application settings configuration.</p>\n<p>Start by creating a console application project and create a <code>Program.cs</code> file with a simple “hello world!” output.</p>\n<p>Add a project reference to the database implementation and add both <code>Microsoft.Extensions.Hosting</code> and <code>Microsoft.EntityFrameworkCore.Tools</code> packages (we are going to use Visual Studio Package Manager Console for creating the migrations, but feel free to use .NET Core CLI tools).</p>\n<p>Inside the database layer, the projects should be similar to this:</p>\n<img src=\"/2023/12/04/NET-%E2%80%94-DevOps-and-Entity-Framework-Core/02_project_structure.png\" class=\"\">\n\n<h2 id=\"Migrations-setup\"><a href=\"#Migrations-setup\" class=\"headerlink\" title=\"Migrations setup\"></a>Migrations setup</h2><p>To prepare the project for creating EF Core migrations, start by adding an <code>appsettings.json</code> file with a connection string to an empty SQL Server database and, to be used in the future by the host, you can already make some logging configurations.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;ConnectionStrings&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;ArticleDevOpsEfCore&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Data Source=localhost;Database=ArticleDevOpsEfCore;User Id=sa;Password=abcd1234;Encrypt=false;&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;Logging&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;LogLevel&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;Default&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Trace&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;Microsoft&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Information&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Console&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;IncludeScopes&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;Debug&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;IncludeScopes&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;EventSource&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;IncludeScopes&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>Remember to tell the application that, when publishing, the configuration files must be copied to the output folder. This is done by adding an include property to the <em>csproj</em> file.</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ItemGroup</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">None</span> <span class=\"attr\">Include</span>=<span class=\"string\">&quot;*.config;*.json&quot;</span> <span class=\"attr\">CopyToOutputDirectory</span>=<span class=\"string\">&quot;PreserveNewest&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ItemGroup</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Create a new class implementing <code>IDesignTimeDbContextFactory</code>. This class will be responsible for creating and configuring the database contexts when managing migrations via .NET Core CLI tools or Visual Studio Package Manager Console.</p>\n<p>To know which connection string must be used, we are going to use a <code>ConfigurationBuilder</code> to read the settings file and then register a SQL Server provider with a small detail — <strong>we must specify that the migrations are stored in the console application executable, not where the context is defined</strong>.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DesignTimeDbContextFactory</span> : <span class=\"title\">IDesignTimeDbContextFactory</span>&lt;<span class=\"title\">DatabaseContext</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> DatabaseContext <span class=\"title\">CreateDbContext</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> configuration = <span class=\"keyword\">new</span> ConfigurationBuilder()</span><br><span class=\"line\">            .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class=\"line\">            .AddJsonFile(<span class=\"string\">&quot;appsettings.json&quot;</span>, <span class=\"literal\">false</span>)</span><br><span class=\"line\">            .Build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> options = <span class=\"keyword\">new</span> DbContextOptionsBuilder&lt;DatabaseContext&gt;().UseSqlServer(</span><br><span class=\"line\">            configuration.GetConnectionString(<span class=\"string\">&quot;ArticleDevOpsEfCore&quot;</span>),</span><br><span class=\"line\">            o =&gt; o.MigrationsAssembly(<span class=\"keyword\">typeof</span>(Program).Assembly.FullName)</span><br><span class=\"line\">        ).Options;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> DatabaseContext(options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Let’s test the setup and see if we can create some migrations. Open the Package Manager Console and run the following command:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add-migration InitialModelSetup</span><br></pre></td></tr></table></figure>\n\n<p>If everything went as expected, a new <code>Migrations</code> folder was created with a <code>InitialModelSetup</code> migration class that will setup the database model. If your database schema is empty, it should look like this:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;inheritdoc /&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">InitialModelSetup</span> : <span class=\"title\">Migration</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;inheritdoc /&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Up</span>(<span class=\"params\">MigrationBuilder migrationBuilder</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        migrationBuilder.CreateTable(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;Products&quot;</span>,</span><br><span class=\"line\">            columns: table =&gt; <span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Id = table.Column&lt;<span class=\"built_in\">long</span>&gt;(type: <span class=\"string\">&quot;bigint&quot;</span>, nullable: <span class=\"literal\">false</span>)</span><br><span class=\"line\">                    .Annotation(<span class=\"string\">&quot;SqlServer:Identity&quot;</span>, <span class=\"string\">&quot;1, 1&quot;</span>),</span><br><span class=\"line\">                Code = table.Column&lt;<span class=\"built_in\">string</span>&gt;(type: <span class=\"string\">&quot;nvarchar(8)&quot;</span>, maxLength: <span class=\"number\">8</span>, nullable: <span class=\"literal\">false</span>),</span><br><span class=\"line\">                Name = table.Column&lt;<span class=\"built_in\">string</span>&gt;(type: <span class=\"string\">&quot;nvarchar(128)&quot;</span>, maxLength: <span class=\"number\">128</span>, nullable: <span class=\"literal\">false</span>)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            constraints: table =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                table.PrimaryKey(<span class=\"string\">&quot;PK_Products&quot;</span>, x =&gt; x.Id);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        migrationBuilder.CreateTable(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;StockMovements&quot;</span>,</span><br><span class=\"line\">            columns: table =&gt; <span class=\"keyword\">new</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Id = table.Column&lt;<span class=\"built_in\">long</span>&gt;(type: <span class=\"string\">&quot;bigint&quot;</span>, nullable: <span class=\"literal\">false</span>)</span><br><span class=\"line\">                    .Annotation(<span class=\"string\">&quot;SqlServer:Identity&quot;</span>, <span class=\"string\">&quot;1, 1&quot;</span>),</span><br><span class=\"line\">                ProductId = table.Column&lt;<span class=\"built_in\">long</span>&gt;(type: <span class=\"string\">&quot;bigint&quot;</span>, nullable: <span class=\"literal\">false</span>),</span><br><span class=\"line\">                Quantity = table.Column&lt;<span class=\"built_in\">int</span>&gt;(type: <span class=\"string\">&quot;int&quot;</span>, nullable: <span class=\"literal\">false</span>),</span><br><span class=\"line\">                OccurredOn = table.Column&lt;DateTimeOffset&gt;(type: <span class=\"string\">&quot;datetimeoffset&quot;</span>, nullable: <span class=\"literal\">false</span>)</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            constraints: table =&gt;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                table.PrimaryKey(<span class=\"string\">&quot;PK_StockMovements&quot;</span>, x =&gt; x.Id);</span><br><span class=\"line\">                table.ForeignKey(</span><br><span class=\"line\">                    name: <span class=\"string\">&quot;FK_StockMovements_Products_ProductId&quot;</span>,</span><br><span class=\"line\">                    column: x =&gt; x.ProductId,</span><br><span class=\"line\">                    principalTable: <span class=\"string\">&quot;Products&quot;</span>,</span><br><span class=\"line\">                    principalColumn: <span class=\"string\">&quot;Id&quot;</span>,</span><br><span class=\"line\">                    onDelete: ReferentialAction.Cascade);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        migrationBuilder.CreateIndex(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;IX_Products_Code&quot;</span>,</span><br><span class=\"line\">            table: <span class=\"string\">&quot;Products&quot;</span>,</span><br><span class=\"line\">            column: <span class=\"string\">&quot;Code&quot;</span>,</span><br><span class=\"line\">            unique: <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        migrationBuilder.CreateIndex(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;IX_StockMovements_ProductId&quot;</span>,</span><br><span class=\"line\">            table: <span class=\"string\">&quot;StockMovements&quot;</span>,</span><br><span class=\"line\">            column: <span class=\"string\">&quot;ProductId&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;inheritdoc /&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">Down</span>(<span class=\"params\">MigrationBuilder migrationBuilder</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        migrationBuilder.DropTable(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;StockMovements&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        migrationBuilder.DropTable(</span><br><span class=\"line\">            name: <span class=\"string\">&quot;Products&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hosting-setup\"><a href=\"#Hosting-setup\" class=\"headerlink\" title=\"Hosting setup\"></a>Hosting setup</h2><p>Now that we know the project is ready to add or remove migrations based on our development database, let’s create all the required code to apply migrations when running the console.</p>\n<p>Open the launch profile, and in the environment variables, add a new <code>DOTNET_ENVIRONMENT</code> with the value <code>development</code>. This will be used by the host to know your current environment — development, stagging or production (default) — when running the application which is useful for loading different settings or executing code based on the environment, like creating test data.</p>\n<img src=\"/2023/12/04/NET-%E2%80%94-DevOps-and-Entity-Framework-Core/03_environment_setup.png\" class=\"\">\n\n<p>Open the <code>Program.cs</code> file and use <code>Host.CreateApplicationBuilder</code> to create a builder for setting up a new host. It will use pre-configured defaults, like loading settings from the <code>appsettings.json</code> file or from environment variables and output logging to console and debug windows, while supporting dependency injection.</p>\n<p>You can use the builder to register other logging providers, like NLog or Serilog, and register the Entity Framework Core context into the dependency injection container using a SQL Server provider. Because the migrations are going to be run by a console application, the context can be shared as a singleton (by default it is scoped, useful for ASP.NET Core apps), otherwise you must create a scope explicitly. Once again, don’t forget to specify the assembly were migrations are stored.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> builder = Host.CreateApplicationBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">ConfigureLogging(</span><br><span class=\"line\">    builder.Logging</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">ConfigureServices(</span><br><span class=\"line\">    builder.Services,</span><br><span class=\"line\">    builder.Configuration</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> host = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureLogging</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    ILoggingBuilder logging</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// configure other logging providers, like NLog, Serilog or even Application Insights</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IServiceCollection services,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IConfiguration configuration</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> connectionString = configuration.GetConnectionString(<span class=\"string\">&quot;ArticleDevOpsEfCore&quot;</span>);</span><br><span class=\"line\">    services.AddDbContext&lt;DatabaseContext&gt;(options =&gt; options.UseSqlServer(</span><br><span class=\"line\">        connectionString,</span><br><span class=\"line\">        o =&gt; o.MigrationsAssembly(<span class=\"keyword\">typeof</span>(Program).Assembly.FullName)</span><br><span class=\"line\">    ), ServiceLifetime.Singleton);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Create a new class named <code>Migrator</code> with a <code>RunAsync</code> method (that will have the migrator implementation), register it as a singleton into the DI container and, after creating the host, resolve and run it. Because migrations can fail, it is also a good idea to implement some exception handling logic (because even host setup can fail, I also prefer to wrap it). Also, we should support the cancellation of this process when CTRL+C or exit is requested, so let’s use a <code>CancellationTokenSource</code> for that.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> cts = <span class=\"keyword\">new</span> CancellationTokenSource();</span><br><span class=\"line\">Console.CancelKeyPress += (_, eventArgs) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    cts.Cancel();</span><br><span class=\"line\">    eventArgs.Cancel = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">ILogger&lt;Program&gt; logger = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> builder = Host.CreateApplicationBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">    ConfigureLogging(</span><br><span class=\"line\">        builder.Logging</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    ConfigureServices(</span><br><span class=\"line\">        builder.Services,</span><br><span class=\"line\">        builder.Configuration</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> host = builder.Build();</span><br><span class=\"line\"></span><br><span class=\"line\">    logger = host.Services.GetRequiredService&lt;ILogger&lt;Program&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> migrator = host.Services.GetRequiredService&lt;Migrator&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    logger.LogDebug(<span class=\"string\">&quot;Running migrator&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> migrator.RunAsync(cts.Token);</span><br><span class=\"line\">    logger.LogInformation(<span class=\"string\">&quot;Migrator run successfully&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logger <span class=\"keyword\">is</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Console.Error.WriteLineAsync(<span class=\"string\">&quot;Application failed with a fatal error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> Console.Error.WriteLineAsync(e.ToString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        logger.LogCritical(e, <span class=\"string\">&quot;Application failed with a fatal error&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">throw</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureLogging</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    ILoggingBuilder logging</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// configure other logging providers, like NLog, Serilog or even Application Insights</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IServiceCollection services,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IConfiguration configuration</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> connectionString = configuration.GetConnectionString(<span class=\"string\">&quot;ArticleDevOpsEfCore&quot;</span>);</span><br><span class=\"line\">    services.AddDbContext&lt;DatabaseContext&gt;(options =&gt; options.UseSqlServer(</span><br><span class=\"line\">        connectionString,</span><br><span class=\"line\">        o =&gt; o.MigrationsAssembly(<span class=\"keyword\">typeof</span>(Program).Assembly.FullName)</span><br><span class=\"line\">    ), ServiceLifetime.Singleton);</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddSingleton&lt;Migrator&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Applying-migrations\"><a href=\"#Applying-migrations\" class=\"headerlink\" title=\"Applying migrations\"></a>Applying migrations</h2><p>With the host fully configured and ready to run the migrator, let’s implement the migrations logic.</p>\n<p>Open the <code>Migrator.cs</code> file and create a constructor receiving both a logger and a database context. Inside the <code>RunAsync</code> method add some helpful logging and use the <code>ctx.Database.MigrateAsync</code> to update the database schema to the latest available. Keep in mind this method will apply the missing migrations and it’s not the same as <code>EnsureCreatedAsync</code>, which just checks if the database exists and if it doesn’t, creates the database and schema without using any migration.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Migrator</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    ILogger&lt;Migrator&gt; _logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    DatabaseContext _context</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> ValueTask <span class=\"title\">RunAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Migrating database to the latest version&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.MigrateAsync(ct);</span><br><span class=\"line\">        _logger.LogInformation(<span class=\"string\">&quot;Database migrated to latest version&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you now run the console, you’ll see some output showing the DDL instructions that are being run and if everything went as expected the database should now list both the EF Core migration history (used to track which migrations are applied) and business tables.</p>\n<img src=\"/2023/12/04/NET-%E2%80%94-DevOps-and-Entity-Framework-Core/04_db_tables.png\" class=\"\">\n\n<h2 id=\"Seeding-data\"><a href=\"#Seeding-data\" class=\"headerlink\" title=\"Seeding data\"></a>Seeding data</h2><p>Despite Entity Framework Core supporting data seeds when applying migrations, I think it is limited for production scenarios, like seeding different data based on environment or need to run some business logic, you will face limitations if using what EF Core offers.</p>\n<p>To solve this problem I usually create a specialized interface for seeding data into the migrator project, so developers may implement how many seed logic they need and even decide the order by which they are run.</p>\n<p>In the migrator project, create a new <code>IDataSeed</code> interface, inside a <code>DataSeeds</code> folder, with a <code>SeedAsync</code> method. As a small note, I like to pass arguments that can be used for auditing so I can use them on metadata columns, but they aren’t a requirement — just pass what makes sense to you.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IDataSeed</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">ValueTask <span class=\"title\">SeedAsync</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> seededBy,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        DateTimeOffset seededOn,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Let’s change the migrator to run all registered seeds after applying the migrations. Open the <code>Migrator.cs</code>, pass a collection of data seeds to the constructor and then, inside a transaction, execute each seed one by one. I recommend to flush changes after each seed to be sure they all see the data created by each other, even if some have to execute native SQL code for performance reasons.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Migrator</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    ILogger&lt;Migrator&gt; _logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    DatabaseContext _context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IEnumerable&lt;IDataSeed&gt; _dataSeeds</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> ValueTask <span class=\"title\">RunAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Migrating database to the latest version&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.MigrateAsync(ct);</span><br><span class=\"line\">        _logger.LogInformation(<span class=\"string\">&quot;Database migrated to latest version&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> seededOn = DateTimeOffset.UtcNow;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> tx = <span class=\"keyword\">await</span> _context.Database.BeginTransactionAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> dataSeed <span class=\"keyword\">in</span> _dataSeeds)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> _ = _logger.BeginScope(<span class=\"string\">&quot;DataSeed:&#123;DataSeed&#125;&quot;</span>, dataSeed.GetType().Name);</span><br><span class=\"line\"></span><br><span class=\"line\">            _logger.LogDebug(<span class=\"string\">&quot;Seeding data&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">await</span> dataSeed.SeedAsync(</span><br><span class=\"line\">                <span class=\"string\">&quot;Migrator&quot;</span>,</span><br><span class=\"line\">                seededOn,</span><br><span class=\"line\">                ct</span><br><span class=\"line\">            );</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">            _logger.LogInformation(<span class=\"string\">&quot;Data was seeded&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> tx.CommitAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>To test the implemented data seed logic, let’s assume we wanted to create test products for development and staging environments, but not in production. Create a new <code>TestProductsDataSeed</code> inside the <code>DataSeeds</code> folder and implement the <code>SeedAsync</code> method creating a bunch of products if they don’t exist and the migrator isn’t running in production.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TestProductsDataSeed</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    ILogger&lt;TestProductsDataSeed&gt; _logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IHostEnvironment _env,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    DatabaseContext _context</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) : IDataSeed</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> ValueTask <span class=\"title\">SeedAsync</span>(<span class=\"params\"><span class=\"built_in\">string</span> seededBy, DateTimeOffset seededOn, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_env.IsProduction())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _logger.LogInformation(<span class=\"string\">&quot;Running in production, no test data will be seeded&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> productsSet = _context.Set&lt;ProductEntity&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> testCodes = Enumerable.Range(<span class=\"number\">0</span>, <span class=\"number\">150</span>).Select(i =&gt; i.ToString(<span class=\"string\">&quot;D8&quot;</span>, NumberFormatInfo.InvariantInfo)).ToArray();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> existingCodes = <span class=\"keyword\">await</span> (</span><br><span class=\"line\">            <span class=\"keyword\">from</span> p <span class=\"keyword\">in</span> productsSet</span><br><span class=\"line\">            <span class=\"keyword\">where</span></span><br><span class=\"line\">                testCodes.Contains(p.Code)</span><br><span class=\"line\">            <span class=\"keyword\">select</span></span><br><span class=\"line\">                p.Code</span><br><span class=\"line\">        ).ToArrayAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> nonExistingProducts = testCodes.Where(c =&gt; !existingCodes.Contains(c)).Select(c =&gt; <span class=\"keyword\">new</span> ProductEntity</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Code = c,</span><br><span class=\"line\">            Name = <span class=\"string\">$&quot;Test product &#x27;<span class=\"subst\">&#123;c&#125;</span>&#x27;&quot;</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> productsSet.AddRangeAsync(nonExistingProducts, ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now open the <code>Program.cs</code> file and register the <code>TestProductsDataSeed</code> as a singleton. As a note, you can scan the assembly for classes implementing <code>IDataSeed</code> (with <a href=\"https://github.com/khellang/Scrutor\">Scrutor</a>, for example) but the order or registration will define the order by which they are run, and I’m assuming that will matter, but feel free to use an approach that works for your scenario.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IServiceCollection services,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    IConfiguration configuration</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> connectionString = configuration.GetConnectionString(<span class=\"string\">&quot;ArticleDevOpsEfCore&quot;</span>);</span><br><span class=\"line\">    services.AddDbContext&lt;DatabaseContext&gt;(options =&gt; options.UseSqlServer(</span><br><span class=\"line\">        connectionString,</span><br><span class=\"line\">        o =&gt; o.MigrationsAssembly(<span class=\"keyword\">typeof</span>(Program).Assembly.FullName)</span><br><span class=\"line\">    ), ServiceLifetime.Singleton);</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddSingleton&lt;Migrator&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddSingleton&lt;IDataSeed, TestProductsDataSeed&gt;();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If we now run the migrator the products table should have test data.</p>\n<img src=\"/2023/12/04/NET-%E2%80%94-DevOps-and-Entity-Framework-Core/05_db_seeded.png\" class=\"\">\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article I explained how DevOps processes can be simplified by implementing a console application that knows how to apply Entity Framework Core migrations and seed initial data to a database, to be introduced into de Continuous Delivery pipeline.</p>\n<p>The implementation using <code>Microsoft.Extensions.Hosting</code> is very straightforward and simple while providing a more tight integration against the model definitions and with improved logging, so it certainly is an approach to consider.</p>\n<p>Even with small tweaks, in can be improved to whatever scenarios you may face, like forcing a backup before applying the migrations and reverting to it if something fails, perfect for on-prem solutions.</p>\n<p><a href=\"https://github.com/gravity00/article-devops-efcore\">Once again, I have a working example on GitHub, so feel free to give it a good look.</a></p>\n",
            "tags": [
                "dotnetcore",
                "csharp",
                "efcore"
            ]
        },
        {
            "id": "https://code-corner.dev/2022/08/13/Immutability-and-Entity-Framework-Core/",
            "url": "https://code-corner.dev/2022/08/13/Immutability-and-Entity-Framework-Core/",
            "title": "Immutability and Entity Framework Core",
            "date_published": "2022-08-12T23:00:00.000Z",
            "content_html": "<p>Nowadays, when implementing a .NET application that works directly with a database (relational or not), most developers will chose Entity Framework Core to abstract their data layer and work directly with entity classes.</p>\n<p>It has become an integral part of the .NET ecosystem, just like ASP.NET, and it is extremely rare finding someone that never worked with it. I’ve been using it myself ever since version 4 (along with other ORMs) and I must say that it <em><strong>aged like a fine wine</strong></em>.</p>\n<p>Fully open sourced, with support for multiple databases (not just SQL Server) while offering relatively optimized and extensible conversion from LINQ to database queries, accessing data from a .NET application never been easier. And when it doesn’t support something, <a href=\"/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/\" title=\"Integrating Dapper with Entity Framework Core\">just integrate with some micro ORM and go crazy on that SQL</a>!</p>\n<p>One core feature is the implementation of the unit of work pattern by supporting, what is usually called, a first level cache. Load a bunch of entities from the database, that will be tracked in memory by the context, mutate or delete them, create new ones and then flush everything in a single database access.</p>\n<p>The thing about this feature, despite working fine most of the time, is that it depends on managing internal state with mutable entities. After all, it was originally focused on C# developers that were used to work in a object-oriented way — get an entity, change some properties, request an update.</p>\n<p><strong>But what if you are a C# developer and prefer the advantages provided by immutability?</strong></p>\n<p>Lets look at the most used immutable class in the .NET world — the string.</p>\n<p>We all know that working with text can be memory inefficient if badly managed, but imagine a world were you could initialize a string with the name “Bruce Wayne”, pass it as an argument to some method that was supposed to count how many words were in it, and when you realize, your original string contains the name “Peter Parker” because the strings were mutable and nothing could prevent that?</p>\n<p>In this article I won’t enter into details about the advantages of immutable over mutable objects, and vice versa. There are great articles already explaining both visions and we all know no size fits all, so it kinda depends of your current needs.</p>\n<p>But I’m going to explain how you can use immutable entities directly with Entity Framework Core so you know that not only it is possible but also a viable option.</p>\n<hr>\n<h1 id=\"Immutable-entities-in-C\"><a href=\"#Immutable-entities-in-C\" class=\"headerlink\" title=\"Immutable entities in C#\"></a>Immutable entities in C#</h1><p>Before C# 9 the only way to create an immutable entity was to define a class or structure with <em>getter only properties</em> that were initialized during object construction, ensuring nothing could be changed afterwards.</p>\n<p>As an example, a <code>PersonEntity</code> would look like this:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">PersonEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PersonEntity</span>(<span class=\"params\"><span class=\"built_in\">string</span> forename, <span class=\"built_in\">string</span> surname, <span class=\"built_in\">string</span>? middleNames = <span class=\"literal\">null</span>, DateOnly? birthdate = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Forename = forename;</span><br><span class=\"line\">        Surname = surname;</span><br><span class=\"line\">        MiddleNames = middleNames;</span><br><span class=\"line\">        Birthdate = birthdate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Forename &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Surname &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span>? MiddleNames &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateOnly? Birthdate &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It works as expected but there is one major problem: just by looking at the code, the developer cannot tell which properties are being set unless argument names are used and, if it wants to change something, it must copy every property by hand.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> PersonEntity(</span><br><span class=\"line\">    <span class=\"string\">&quot;Bruce&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;Wayne&quot;</span></span><br><span class=\"line\">);</span><br><span class=\"line\">person = <span class=\"keyword\">new</span> PersonEntity(</span><br><span class=\"line\">    person.Forename,</span><br><span class=\"line\">    person.Surname,</span><br><span class=\"line\">    <span class=\"string\">&quot;Thomas&quot;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> DateOnly(<span class=\"number\">1972</span>, <span class=\"number\">02</span>, <span class=\"number\">19</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>For small POCOs this may not be a problem, but for bigger ones the chances of someone making a mistake increases.</p>\n<p>With this in mind, Microsoft implemented <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/init\">init only setters</a> supporting object initializers while still preventing changes afterwards. Couple this with <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/records\">record types</a>, and creating immutable entities has never been easier in C#.</p>\n<p>The same PersonEntity, but now using both of these features:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title\">PersonEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Forename &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Surname &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span>? MiddleNames &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateOnly? Birthdate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Not only the syntax is more concise by using auto-implemented properties, you can now easily tell which properties are being set during initialization and have a much easier life copying data by using the keyword with and only state which properties must change.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> PersonEntity</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Forename = <span class=\"string\">&quot;Bruce&quot;</span>,</span><br><span class=\"line\">    Surname = <span class=\"string\">&quot;Wayne&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">person = person <span class=\"keyword\">with</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    MiddleNames = <span class=\"string\">&quot;Thomas&quot;</span>,</span><br><span class=\"line\">    Birthdate = <span class=\"keyword\">new</span> DateOnly(<span class=\"number\">1972</span>, <span class=\"number\">02</span>, <span class=\"number\">19</span>),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Change-Tracking-and-immutability\"><a href=\"#Change-Tracking-and-immutability\" class=\"headerlink\" title=\"Change Tracking and immutability\"></a>Change Tracking and immutability</h1><p>Every developer that uses Entity Framework knows it provides a lot of database abstractions to enable working directly with .NET objects.</p>\n<p><a href=\"https://docs.microsoft.com/en-us/ef/core/change-tracking\">One core feature is the automatic detection of changes made to entities</a>. This usually means interacting with the context to get an existing entity, change some properties and then invoke <code>SaveChangesAsync</code> which will generate a bunch of instructions and execute them into the database. Under the hood, when the entity is retrieved from the context it will keep a reference to the instance and original values from the database and when the developer requests the context to save changes, all properties of tracked entities will be compared and if anything changed, instructions will be generated and executed.</p>\n<p>This works well for mutable entities but we are implementing immutability, and since no changes will be made to tracked entities, will this cause any issues?</p>\n<p>Let’s imagine the following use case:</p>\n<ul>\n<li>You retrieve our <em>Bruce Wayne</em> from the database using an EF Core context, which internally will keep a reference to it;</li>\n<li>You want to change it’s birthdate, so you clone it while assigning a new date;</li>\n<li>If you invoke <code>SaveChangesAsync</code>, nothing will happen because no changes happened to the original entity;</li>\n<li>If you invoke <code>Update</code>, an <code>InvalidOperationException</code> will be thrown because the context is already tracking an entity with the same primary key;</li>\n</ul>\n<p>Certainly invoking <code>SaveChangesAsync</code> and nothing happening was expected, after all we created a copy of the original instance, which EF Core knows nothing about and would never automatically detect changes, but why the exception when trying to attach the entity to the context?</p>\n<p>This leads to another EF Core feature, called <a href=\"https://docs.microsoft.com/en-us/ef/core/change-tracking/identity-resolution\">Identity Resolution</a>, strongly correlated to our change tracking.</p>\n<p><em>Identity Resolution</em> ensures the same entity is retrieved for the same primary key while being tracked. This is a requirement when implementing the Unit of Work pattern because EF Core only flushes data when <code>SaveChangesAsync</code> is invoked.</p>\n<p>Again, let’s imagine our <code>PersonEntity</code> was a mutable class:</p>\n<ul>\n<li>You retrieve our <em>Bruce Wayne</em> from the database using an EF Core context, which internally will keep a reference to it, also identified by its primary key;</li>\n<li>You change its birthdate;</li>\n<li>You do some more work;</li>\n<li>You try to get it again from the EF Core context but since that primary key its already being tracked, it returns the same instance instead of going to the database and returning old data for your Unit of Work operation;</li>\n<li>You change more properties;</li>\n<li>Invoke <code>SaveChangesAsync</code>, flushing changes and now both the instance and database have the same data;</li>\n</ul>\n<p>As you can see, <em>Identity Resolution</em> is important for mutable entities, but not so much for our use case and it’s a problem we must solve.</p>\n<hr>\n<h1 id=\"The-project\"><a href=\"#The-project\" class=\"headerlink\" title=\"The project\"></a>The project</h1><p>It seems the only thing preventing an immutable approach to database access while using EF Core is not relying on <em>Change Tracking</em> for mutations while preventing <em>Identity Resolution</em> problems.</p>\n<p>Let’s create a C# console application that will use Entity Framework Core to store data into a SQLite database, using immutable <code>record</code> entities.</p>\n<p>The source code is available on <a href=\"https://github.com/gravity00/efcore-immutability\">GitHub</a>, feel free to give it a look.</p>\n<h2 id=\"Setup\"><a href=\"#Setup\" class=\"headerlink\" title=\"Setup\"></a>Setup</h2><p>Start by opening Visual Studio and creating a <strong>.NET 6.0 Console Application</strong> with a name at any location you prefer.</p>\n<img src=\"/2022/08/13/Immutability-and-Entity-Framework-Core/01_project_create.png\" class=\"\">\n\n<p>Install most recent versions of Entity Framework Core for SQLite and Microsoft hosting nugets:</p>\n<ul>\n<li><code>Microsoft.Extensions.Hosting</code></li>\n<li><code>Microsoft.EntityFrameworkCore.Sqlite</code></li>\n</ul>\n<img src=\"/2022/08/13/Immutability-and-Entity-Framework-Core/02_nugets.png\" class=\"\">\n\n<p>Create a <code>ProgramHost</code> class implementing <code>IHostedService</code>. This class will run our exemple code, but for now just inject a logger and write something inside the <code>StartAsync</code> method. We’ll do nothing in the <code>StopAsync</code> method, so just return a completed task.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProgramHost</span> : <span class=\"title\">IHostedService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ILogger&lt;ProgramHost&gt; _logger;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProgramHost</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        ILogger&lt;ProgramHost&gt; logger</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">StartAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogInformation(<span class=\"string\">&quot;I&#x27;m alive!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">StopAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span> =&gt; Task.CompletedTask;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>Program.cs</code> file, build an host with our <code>ProgramHost</code> class registered as a hosted service.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> host = Host.CreateDefaultBuilder()</span><br><span class=\"line\">    .ConfigureServices(services =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddHostedService&lt;ProgramHost&gt;();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .Build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> host.RunAsync();</span><br></pre></td></tr></table></figure>\n\n<p>If you configured everything correctly and run the application, you should see something like this:</p>\n<img src=\"/2022/08/13/Immutability-and-Entity-Framework-Core/03_setup_logs.png\" class=\"\">\n\n<h2 id=\"The-database-model\"><a href=\"#The-database-model\" class=\"headerlink\" title=\"The database model\"></a>The database model</h2><p>For simplicity, we’ll have a single Persons table:</p>\n<ul>\n<li><strong>Id</strong> — identity column to uniquely identify the row (required);</li>\n<li><strong>Forename</strong> — stores the first name (text, required);</li>\n<li><strong>Surname</strong> — stores the last name (text, required);</li>\n<li><strong>MiddleNames</strong> — stores the middle names (text, optional);</li>\n<li><strong>Birthdate</strong> — stores the date of birth (date, optional);</li>\n</ul>\n<p>When representing database entities, I always create a base class containing properties to be defined in all entities (like the unique identifier or some metadata columns), and for the rest I always use positional records syntax for required properties and auto-properties for optional ones, making clear to the developer which ones must be always provided (this also removes compiler warnings if the project is configured for nullable reference types).</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Base class for all database entities</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">record</span> <span class=\"title\">Entity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> Unique identifier</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Representation of a person</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;Forename&quot;&gt;</span>Person first name<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;Surname&quot;&gt;</span>Person last name<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title\">PersonEntity</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"built_in\">string</span> Forename,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"built_in\">string</span> Surname</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) : Entity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> Person middle names, separated by spaces</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span>? MiddleNames &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> Person date of birth</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateOnly? Birthdate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you prefer to keep everything more compact, feel free to use <em>positional records</em> with default values for optional properties.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">record</span> <span class=\"title\">PersonEntity</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"built_in\">string</span> Forename,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"built_in\">string</span> Surname,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    <span class=\"built_in\">string</span>? MiddleNames = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    DateOnly? Birthdate = <span class=\"literal\">null</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\"></span>) : Entity</span>;</span><br></pre></td></tr></table></figure>\n\n<p>This is the most compact syntax, but be careful when adding new optional properties if your are sharing <em>records</em> across multiple applications. It will also be considered a breaking change unless you define both constructors, effectively losing this compact syntax. That’s the reason I don’t use <em>positional record syntax</em> for everything, but it kinda depends on your needs.</p>\n<p>Now, lets create our EF Core context with <code>Persons</code> table mappings.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SampleDbContext</span> : <span class=\"title\">DbContext</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SampleDbContext</span>(<span class=\"params\">DbContextOptions&lt;SampleDbContext&gt; options</span>)</span></span><br><span class=\"line\"><span class=\"function\">        : <span class=\"title\">base</span>(<span class=\"params\">options</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnModelCreating</span>(<span class=\"params\">ModelBuilder builder</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">base</span>.OnModelCreating(builder);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.Entity&lt;PersonEntity&gt;(cfg =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cfg.ToTable(<span class=\"string\">&quot;Persons&quot;</span>);</span><br><span class=\"line\">            cfg.HasKey(e =&gt; e.Id);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Id)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .ValueGeneratedOnAdd();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Forename)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">64</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Surname)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">64</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.MiddleNames)</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">256</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Birthdate);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>Program.cs</code> file and register the EF Core context into the container. This is a test console, so I’ll use the temporary folder to store the SQLite file but feel free to use any other location and file name.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> host = Host.CreateDefaultBuilder()</span><br><span class=\"line\">    .ConfigureServices(services =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddDbContext&lt;SampleDbContext&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> connectionString = <span class=\"keyword\">new</span> SqliteConnectionStringBuilder</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DataSource = Path.Combine(</span><br><span class=\"line\">                    Path.GetTempPath(),</span><br><span class=\"line\">                    <span class=\"string\">&quot;efcore-immutability-sample.sqlite3&quot;</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;.ConnectionString;</span><br><span class=\"line\">            options.UseSqlite(connectionString);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddHostedService&lt;ProgramHost&gt;();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .Build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> host.RunAsync();</span><br></pre></td></tr></table></figure>\n\n<p>Now inject the context into the <code>ProgramHost</code> class and, since this is a test console and we want to freely modify our entities without much thought, change the <code>StartAsync</code> method to always drop and recreate the database on startup.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProgramHost</span> : <span class=\"title\">IHostedService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ILogger&lt;ProgramHost&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> SampleDbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProgramHost</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        ILogger&lt;ProgramHost&gt; logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        SampleDbContext context</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">StartAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Ensuring database is in a clean state&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.EnsureDeletedAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.EnsureCreatedAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">StopAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span> =&gt; Task.CompletedTask;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you run the application and open the SQLite database file (using DB Browser for SQLite or equivalent), both a <code>Persons</code> and <code>sqlite_sequence</code> tables should be defined.</p>\n<img src=\"/2022/08/13/Immutability-and-Entity-Framework-Core/04_db_setup.png\" class=\"\">\n\n<h2 id=\"Configuring-for-immutability\"><a href=\"#Configuring-for-immutability\" class=\"headerlink\" title=\"Configuring for immutability\"></a>Configuring for immutability</h2><p>Now that we have a working solution lets recall what we need to achieve to support immutability:</p>\n<ul>\n<li>Not relying on <em>Change Tracking</em> to know which instructions must be executed when <code>SaveChangesAsync</code> is invoked;</li>\n<li>Preventing <em>Identity Resolution</em> exceptions;</li>\n</ul>\n<p>Because <em>Change Tracking</em> is such a core feature in Entity Framework Core, you can only disable it when querying for entities.</p>\n<p>As stated in Microsoft <a href=\"https://docs.microsoft.com/en-us/ef/core/querying/tracking\">documentation</a>, we can disable it in three ways:</p>\n<ul>\n<li>Using extension method <code>AsNoTracking</code> for each query;</li>\n<li>Setting context property <code>ChangeTracker.QueryTrackingBehavior</code> to <code>NoTracking</code>;</li>\n<li>Global configuration with method <code>UseQueryTrackingBehavior</code>;</li>\n</ul>\n<p>Open <code>Program.cs</code> file and disable it globally, ensuring will never be tracked when queried from the database.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> host = Host.CreateDefaultBuilder()</span><br><span class=\"line\">    .ConfigureServices(services =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddDbContext&lt;SampleDbContext&gt;(options =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> connectionString = <span class=\"keyword\">new</span> SqliteConnectionStringBuilder</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                DataSource = Path.Combine(</span><br><span class=\"line\">                    Path.GetTempPath(),</span><br><span class=\"line\">                    <span class=\"string\">&quot;efcore-immutability-sample.sqlite3&quot;</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">            &#125;.ConnectionString;</span><br><span class=\"line\">            options.UseSqlite(connectionString)</span><br><span class=\"line\">                .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        services.AddHostedService&lt;ProgramHost&gt;();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .Build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">await</span> host.RunAsync();</span><br></pre></td></tr></table></figure>\n\n<p>In theory, if you only made a single entity operation per unit of work, like getting a person by unique identifier, changing its middle names and doing an update, this configuration would be enough.</p>\n<p>Sadly we all know development is far from perfect and more complex applications, due to business requirements, may lead to multiple updates to the same data in a single unit of work operation. That’s one of the major reasons behind <em>Change Tracking</em> in EF Core, to implement the unit of work pattern while not relying on database ACID implementations and reducing the time transactions stays open.</p>\n<p>This means every time an entity is added, updated or removed using the context, an internal reference will be kept and <em>Identity Resolution</em> exceptions will be thrown if someone tries to attach an entity with the same id.</p>\n<p>There are multiple ways to solve this problem but the easiest one is to enforce a transaction, flush changes to the database every time a create, update or delete is requested and then detach the entity.</p>\n<p>Since this is a proof of concept application, I’m going to implementing this behavior with extension methods over <code>DbContext</code> instances, but feel free to wrap it into a repository pattern or any way you prefer.</p>\n<p>Create a static class <code>DbContextExtensions</code> and implement a generic extension that will receive an entity and the state to be tracked, returning an updated entity.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">DbContextExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TEntity</span>&gt; <span class=\"title\">SaveEntityStateAsync</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TEntity entity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        EntityState state,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) <span class=\"keyword\">where</span> TEntity : Entity</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (context == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(context));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entity == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(entity));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> entry = context.Entry(entity);</span><br><span class=\"line\">        entry.State = state;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> context.SaveChangesAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        entry.State = EntityState.Detached;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> entry.Entity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The method creates an <code>EntityEntry&lt;TEntity&gt;</code>, changes the state to the one provided and immediately requests to flush changes. Because the context is now tracking the entity, it will execute a database instruction based on the entry state (<code>Added|Modified|Deleted</code>). Then, it detaches the entity right before returning to prevent <em>Identity Resolution</em> exceptions on future mutations and returns the entity with the most recent values (usefull to get values generated by the database, like an identity column).</p>\n<p>Open the <code>ProgramHost</code> class and create some test code using the extension method and the immutable <code>PersonEntity</code>. In this case I’m creating <em>Bruce Wayne</em> and then updating both birthdate and middle name.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProgramHost</span> : <span class=\"title\">IHostedService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ILogger&lt;ProgramHost&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> SampleDbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProgramHost</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        ILogger&lt;ProgramHost&gt; logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        SampleDbContext context</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">StartAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Setting database to a clean state&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.EnsureDeletedAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.EnsureCreatedAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Creating an explicit database transaction&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> tx = <span class=\"keyword\">await</span> _context.Database.BeginTransactionAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Adding person&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> person = <span class=\"keyword\">await</span> _context.SaveEntityStateAsync(<span class=\"keyword\">new</span> PersonEntity(</span><br><span class=\"line\">            Forename: <span class=\"string\">&quot;Bruce&quot;</span>,</span><br><span class=\"line\">            Surname: <span class=\"string\">&quot;Wayne&quot;</span></span><br><span class=\"line\">        ), EntityState.Added, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Updating person&#x27;s birthdate&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveEntityStateAsync(person <span class=\"keyword\">with</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MiddleNames = <span class=\"string\">&quot;Thomas&quot;</span>,</span><br><span class=\"line\">            Birthdate = <span class=\"keyword\">new</span> DateOnly(<span class=\"number\">1972</span>, <span class=\"number\">02</span>, <span class=\"number\">19</span>)</span><br><span class=\"line\">        &#125;, EntityState.Modified, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Commiting database transaction&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> tx.CommitAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">StopAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span> =&gt; Task.CompletedTask;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you execute the code, you’ll see database instructions being sent to SQLite by Entity Framework Core to insert and then update the entity.</p>\n<img src=\"/2022/08/13/Immutability-and-Entity-Framework-Core/05_logs_entity_mutate.png\" class=\"\">\n\n<p>Open the SQLite file and you’ll see <em>Bruce Wayne</em> was both created and updated with a birthdate and middle name.</p>\n<img src=\"/2022/08/13/Immutability-and-Entity-Framework-Core/06_db_persons_table.png\" class=\"\">\n\n<p>Certainly you don’t want to be writing <code>EntityState.Added|Updated|Deleted</code> every time an entity needs to be manipulated, so lets create dedicated extensions for each operation and update your test code.</p>\n<p>Change the method to <code>private</code> and implement a <code>CreateAsync</code>, <code>UpdateAsync</code> and <code>DeleteAsync</code> extension methods that will reuse the existing one.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">DbContextExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TEntity</span>&gt; <span class=\"title\">CreateAsync</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TEntity entity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) <span class=\"keyword\">where</span> TEntity : Entity</span> =&gt; <span class=\"keyword\">await</span> context.SaveEntityStateAsync(</span><br><span class=\"line\">        entity,</span><br><span class=\"line\">        EntityState.Added,</span><br><span class=\"line\">        ct</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TEntity</span>&gt; <span class=\"title\">UpdateAsync</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TEntity entity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) <span class=\"keyword\">where</span> TEntity : Entity</span> =&gt; <span class=\"keyword\">await</span> context.SaveEntityStateAsync(</span><br><span class=\"line\">        entity,</span><br><span class=\"line\">        EntityState.Modified,</span><br><span class=\"line\">        ct</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task <span class=\"title\">DeleteAsync</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TEntity entity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) <span class=\"keyword\">where</span> TEntity : Entity</span> =&gt; <span class=\"keyword\">await</span> context.SaveEntityStateAsync(</span><br><span class=\"line\">        entity,</span><br><span class=\"line\">        EntityState.Deleted,</span><br><span class=\"line\">        ct</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">TEntity</span>&gt; <span class=\"title\">SaveEntityStateAsync</span>&lt;<span class=\"title\">TEntity</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TEntity entity,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        EntityState state,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) <span class=\"keyword\">where</span> TEntity : Entity</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (context == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(context));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (entity == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(entity));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> entry = context.Entry(entity);</span><br><span class=\"line\">        entry.State = state;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> context.SaveChangesAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        entry.State = EntityState.Detached;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> entry.Entity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Use the new methods in our <code>ProgramHost</code> class.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProgramHost</span> : <span class=\"title\">IHostedService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ILogger&lt;ProgramHost&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> SampleDbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProgramHost</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        ILogger&lt;ProgramHost&gt; logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        SampleDbContext context</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">StartAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Setting database to a clean state&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.EnsureDeletedAsync(ct);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Database.EnsureCreatedAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Creating an explicit database transaction&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> tx = <span class=\"keyword\">await</span> _context.Database.BeginTransactionAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Adding person&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> person = <span class=\"keyword\">await</span> _context.CreateAsync(<span class=\"keyword\">new</span> PersonEntity(</span><br><span class=\"line\">            Forename: <span class=\"string\">&quot;Bruce&quot;</span>,</span><br><span class=\"line\">            Surname: <span class=\"string\">&quot;Wayne&quot;</span></span><br><span class=\"line\">        ), ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Updating person&#x27;s birthdate&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.UpdateAsync(person <span class=\"keyword\">with</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            MiddleNames = <span class=\"string\">&quot;Thomas&quot;</span>,</span><br><span class=\"line\">            Birthdate = <span class=\"keyword\">new</span> DateOnly(<span class=\"number\">1972</span>, <span class=\"number\">02</span>, <span class=\"number\">19</span>)</span><br><span class=\"line\">        &#125;, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Commiting database transaction&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">await</span> tx.CommitAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task <span class=\"title\">StopAsync</span>(<span class=\"params\">CancellationToken ct</span>)</span> =&gt; Task.CompletedTask;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I hope this article gave you a good idea on how to use Entity Framework Core to abstract your application from the database while still implementing the immutable design pattern to manage application state.</p>\n<p>There are both advantages and disadvantages of using immutable entities over mutable ones, after all no size fits all, but I think its nice to know you have the option to use it without sacrificing productivity by having to implement database access yourself. As long you ensure <em>Change Tracking</em> is disabled for all queries and every code uses your abstractions to create, update or delete entities, everything will work just fine.</p>\n<p>Just a small note about explicit database transactions. If you are implementing an ASP.NET Core application and using the mediator pattern, some time ago I created a bunch of articles and one of them provided an approach to <a href=\"/2020/11/07/Transaction-Management-With-Mediator-Pipelines-in-ASP-NET-Core/\" title=\"Transaction Management With Mediator Pipelines in ASP.NET Core\">manage Entity Framework Core transactions globally using a pipeline</a>. I use that approach all the time, you may find it helpful too.</p>\n",
            "tags": [
                "dotnetcore",
                "csharp",
                "patterns",
                "efcore"
            ]
        },
        {
            "id": "https://code-corner.dev/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/",
            "url": "https://code-corner.dev/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/",
            "title": "Integrating Dapper with Entity Framework Core",
            "date_published": "2021-03-09T00:00:00.000Z",
            "content_html": "<p>Nowadays it is extremely rare to implement an application without using any sort of library for <em>Object-Relational Mapping (ORM)</em> to reduce development time by removing the need to implement a lot of boilerplate code to access a database. In the .NET world that usually means using <a href=\"https://docs.microsoft.com/en-us/ef/core/\">Entity Framework Core</a> or <a href=\"https://nhibernate.info/\">NHibernate</a> both offering strong tooling for CRUD operations, data type conversions, strong typed queries using LINQ with <code>IQueryable</code> and so on.</p>\n<p>Despite the pros of using an ORM there are also some cons that, while may not prevent them to be widely used inside an application, they may need to be replaced in some areas either for performance reasons or limitations. This usually means working directly with <a href=\"https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ado-net-overview\">ADO.NET</a> (oh hell no!) or use Micro ORM libraries, like <a href=\"https://github.com/StackExchange/Dapper\">Dapper</a>, that are focused on performance and providing a simpler way to map database queries into objects.</p>\n<p>In this article I’m going to demonstrate how Dapper can easily be integrated with Entity Framework Core (and probably with any other ORM) without using <code>TransactionScope</code>, while trying to keep the same contracts via extension methods to <code>DbContext</code> instances and ensuring the SQL is properly logged in a similar way to what EF Core usually does.</p>\n<h1 id=\"Dapper-Requirements\"><a href=\"#Dapper-Requirements\" class=\"headerlink\" title=\"Dapper Requirements\"></a>Dapper Requirements</h1><p>To work with Dapper, the only requirements are a <code>DbConnection</code>, the SQL text, and some optional parameters, like a <code>DbTransaction</code>, command timeout, query parameters and so on. Sometimes is is also necessary to globally register some custom <code>TypeHandler&lt;T&gt;</code> for the when it can’t convert a given database type to its CLR representation.</p>\n<p>Assuming we want to execute a simple <code>SELECT @SomeParameter</code> statement via Dapper, what code we must implement to get everything we need from a <code>DbContext</code>?</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// get the underline DbConnection</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> connection = context.Database.GetDbConnection();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get the underline DbTransaction, if any</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> transaction = context.Database.CurrentTransaction?.GetDbTransaction();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// get the currently configured command timeout</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> commandTimeout = context.Database.GetCommandTimeout();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// create a Dapper CommandDefinition</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> command = <span class=\"keyword\">new</span> CommandDefinition(</span><br><span class=\"line\">    <span class=\"string\">&quot;SELECT @SomeParameter&quot;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">new</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SomeParameter = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    transaction,</span><br><span class=\"line\">    commandTimeout,</span><br><span class=\"line\">    cancellationToken: ct</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"keyword\">await</span> connection.QueryAsync&lt;<span class=\"built_in\">int</span>&gt;(command);</span><br></pre></td></tr></table></figure>\n\n<p>As shown, the database facade has everything we need to make Dapper work but there is a caveat that must be properly addressed:</p>\n<p><strong>Dapper always executes the SQL immediately into the database</strong>, which means it won’t detect changes made on tracked entities before <code>SaveChanges</code> is invoked and it won’t wait to flush changes either, so be very careful when managing database access.</p>\n<p>My recommendation is to always open a transaction explicitly via <code>context.Database.BeginTransactionAsync</code> before running any mutation.</p>\n<p>If you are using the mediator pattern, I recommend my previous article that explains <a href=\"/2020/11/07/Transaction-Management-With-Mediator-Pipelines-in-ASP-NET-Core/\" title=\"Transaction Management With Mediator Pipelines in ASP.NET Core\">how to create a mediator pipeline that enforces database transactions when handling commands</a>.</p>\n<p>With all of this in mind, lets implement an example project that showcases what we just talked about.</p>\n<hr>\n<h1 id=\"The-project\"><a href=\"#The-project\" class=\"headerlink\" title=\"The project\"></a>The project</h1><p>The source code for this article can be found on <a href=\"https://github.com/gravity00/EntityFrameworkCoreWithDapper\">GitHub</a>.</p>\n<p>Start by opening Visual Studio and creating an <strong>ASP.NET Core Web Application</strong> with a name and a location at your preference.</p>\n<img src=\"/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/01_project_create.png\" class=\"\">\n\n<p>Choose an <strong>empty project</strong> since this is just a demo and we are going to setup only the required dependencies.</p>\n<img src=\"/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/02_project_create_aspnet.png\" class=\"\">\n\n<p>Install the Nuget <code>Swashbuckle.AspNetCore</code>:</p>\n<img src=\"/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/03_nuget_swagger.png\" class=\"\">\n\n<p>Open the <code>Startup.cs</code> file and configure both MVC and Swagger so we can use its UI to test our endpoints more easily.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddMvc();</span><br><span class=\"line\"></span><br><span class=\"line\">        services.AddSwaggerGen();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseSwagger();</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseSwaggerUI(c =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            c.SwaggerEndpoint(<span class=\"string\">&quot;/swagger/v1/swagger.json&quot;</span>, <span class=\"string\">&quot;EF Core with Dapper Example Api V1&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseRouting();</span><br><span class=\"line\"></span><br><span class=\"line\">        app.UseEndpoints(endpoints =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            endpoints.MapControllers();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-Web-API\"><a href=\"#The-Web-API\" class=\"headerlink\" title=\"The Web API\"></a>The Web API</h1><p>Since the objective of this article is to show how Dapper can be integrated with Entity Framework Core, we are going to create a simple endpoint to manage products:</p>\n<ul>\n<li>GET &#x2F;products — lists products, including their current price and last date when it has changed;</li>\n<li>POST &#x2F;products — creates a product with a given price;</li>\n</ul>\n<h2 id=\"The-Database-Model\"><a href=\"#The-Database-Model\" class=\"headerlink\" title=\"The Database Model\"></a>The Database Model</h2><p>We need a SQL database to run our queries so, to simplify our setup, we are going to use the SQLite provider for Entity Framework Core and configure it as an in-memory instance.</p>\n<p>Install the Nuget <code>Microsoft.EntityFrameworkCore.Sqlite</code>:</p>\n<img src=\"/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/04_nuget_efcore_sqlite.png\" class=\"\">\n\n<p>Create a <code>Database</code> folder and inside create entities for products and price history, both mapped into an Entity Framework context:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ApiDbContext</span> : <span class=\"title\">DbContext</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ApiDbContext</span>(<span class=\"params\">DbContextOptions&lt;ApiDbContext&gt; options</span>) : <span class=\"title\">base</span>(<span class=\"params\">options</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">OnModelCreating</span>(<span class=\"params\">ModelBuilder builder</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">base</span>.OnModelCreating(builder);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.Entity&lt;ProductEntity&gt;(cfg =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cfg.ToTable(<span class=\"string\">&quot;Product&quot;</span>);</span><br><span class=\"line\">            cfg.HasKey(e =&gt; e.Id);</span><br><span class=\"line\">            cfg.HasAlternateKey(e =&gt; e.ExternalId);</span><br><span class=\"line\">            cfg.HasIndex(e =&gt; e.Code).IsUnique();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Id)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .ValueGeneratedOnAdd();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.ExternalId)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Code)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">8</span>);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Name)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .HasMaxLength(<span class=\"number\">128</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        builder.Entity&lt;PriceHistoryEntity&gt;(cfg =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cfg.ToTable(<span class=\"string\">&quot;PriceHistory&quot;</span>);</span><br><span class=\"line\">            cfg.HasKey(e =&gt; e.Id);</span><br><span class=\"line\">            cfg.HasIndex(e =&gt; e.CreatedOn);</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Id)</span><br><span class=\"line\">                .IsRequired()</span><br><span class=\"line\">                .ValueGeneratedOnAdd();</span><br><span class=\"line\">            cfg.HasOne(e =&gt; e.Product)</span><br><span class=\"line\">                .WithMany(p =&gt; p.PricesHistory)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.Price)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">            cfg.Property(e =&gt; e.CreatedOn)</span><br><span class=\"line\">                .IsRequired();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid ExternalId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> ICollection&lt;PriceHistoryEntity&gt; PricesHistory &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProductEntity</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        PricesHistory = <span class=\"keyword\">new</span> HashSet&lt;PriceHistoryEntity&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">PriceHistoryEntity</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">long</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">virtual</span> ProductEntity Product &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Price &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime CreatedOn &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Open the <code>Startup.cs</code> file and add the database context to the container. Because the database is stored in-memory, we must ensure all tables are created when the application starts and at least one connection is always open so the SQLite provider won’t discard it from memory:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> ConnectionString = <span class=\"string\">&quot;Data Source=EntityFrameworkCoreWithDapper;Mode=Memory;Cache=Shared&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SqliteConnection _keepAliveConnection;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        services.AddDbContext&lt;ApiDbContext&gt;(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.UseSqlite(ConnectionString);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// this ensures at least one connection is open and the database is kept in-memory while the application is running</span></span><br><span class=\"line\">        _keepAliveConnection = <span class=\"keyword\">new</span> SqliteConnection(ConnectionString);</span><br><span class=\"line\">        keepAliveConnection.Open();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> scope = app.ApplicationServices.GetRequiredService&lt;IServiceScopeFactory&gt;().CreateScope())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> ctx = scope.ServiceProvider.GetRequiredService&lt;ApiDbContext&gt;();</span><br><span class=\"line\">            ctx.Database.EnsureCreated();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"The-Products-Controller\"><a href=\"#The-Products-Controller\" class=\"headerlink\" title=\"The Products Controller\"></a>The Products Controller</h2><p>Now that we have configured the database, create a <code>Controllers</code> folder, the <code>ProductsController</code> class and its models. For now, we are going to implement our logic using only the Entity Framework context.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;products&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductsController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ApiDbContext _context;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProductsController</span>(<span class=\"params\">ApiDbContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _context = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">IEnumerable</span>&lt;<span class=\"title\">ProductModel</span>&gt;&gt; <span class=\"title\">GetAllAsync</span>(<span class=\"params\">[FromQuery] <span class=\"built_in\">int</span>? skip, [FromQuery] <span class=\"built_in\">int</span>? take, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> (</span><br><span class=\"line\">                <span class=\"keyword\">from</span> p <span class=\"keyword\">in</span> _context.Set&lt;ProductEntity&gt;()</span><br><span class=\"line\">                <span class=\"keyword\">select</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Id = p.ExternalId,</span><br><span class=\"line\">                    p.Code,</span><br><span class=\"line\">                    p.Name,</span><br><span class=\"line\">                    MostRecentPriceHistory = p</span><br><span class=\"line\">                        .PricesHistory</span><br><span class=\"line\">                        .OrderByDescending(ph =&gt; ph.CreatedOn)</span><br><span class=\"line\">                        .First()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            )</span><br><span class=\"line\">            .OrderBy(p =&gt; p.Code)</span><br><span class=\"line\">            .Skip(skip ?? <span class=\"number\">0</span>)</span><br><span class=\"line\">            .Take(take ?? <span class=\"number\">20</span>)</span><br><span class=\"line\">            .Select(p =&gt; <span class=\"keyword\">new</span> ProductModel</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Id = p.Id,</span><br><span class=\"line\">                Code = p.Code,</span><br><span class=\"line\">                Name = p.Name,</span><br><span class=\"line\">                Price = p.MostRecentPriceHistory.Price,</span><br><span class=\"line\">                PriceChangedOn = p.MostRecentPriceHistory.CreatedOn</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .ToListAsync(ct);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;CreateProductResultModel&gt; <span class=\"title\">CreateAsync</span>(<span class=\"params\">[FromBody] CreateProductModel model, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> externalId = Guid.NewGuid();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> tx = <span class=\"keyword\">await</span> _context.Database.BeginTransactionAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> product = <span class=\"keyword\">new</span> ProductEntity</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExternalId = externalId,</span><br><span class=\"line\">            Code = model.Code,</span><br><span class=\"line\">            Name = model.Name,</span><br><span class=\"line\">            PricesHistory =</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> PriceHistoryEntity</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Price = model.Price,</span><br><span class=\"line\">                    CreatedOn = DateTime.UtcNow</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.Set&lt;ProductEntity&gt;().AddAsync(product, ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.SaveChangesAsync(ct);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">await</span> tx.CommitAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CreateProductResultModel</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = externalId</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreateProductModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Code &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Price &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> DateTime PriceChangedOn &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CreateProductResultModel</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Right now, the project content should look as follows:</p>\n<img src=\"/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/05_project_structure.png\" class=\"\">\n\n<h1 id=\"Dapper-Integration\"><a href=\"#Dapper-Integration\" class=\"headerlink\" title=\"Dapper Integration\"></a>Dapper Integration</h1><p>Now that we have a running API that manages products and their prices using Entity Framework Core, we can now integrate Dapper into the solution and apply what we learned at the start of this article.</p>\n<p>Install the Nuget <code>Dapper</code>:</p>\n<img src=\"/2021/03/09/Integrating-Dapper-with-Entity-Framework-Core/06_nuget_dapper.png\" class=\"\">\n\n<p>Since Dapper uses extension methods over <code>IDbConnection</code> and we can extract everything needed from a <code>DbContext</code> instance (even an <code>ILogger</code> to log our raw SQL), lets keep that philosophy and replicate those extension methods but this time to an Entity Framework Core context.</p>\n<p>Inside the <code>Database</code> folder create a static <code>DapperDbContextExtensions</code> class, that will containing all the extension methods, and a <code>DapperEFCoreCommand</code> structure, used to wrap both logging and Dapper’s <code>CommandDefinition</code>.</p>\n<p>For demo purposes we are only going to expose methods to query a collection of items and to execute commands but feel free to add your owns (like <code>FirstAsync</code>). I also put the <code>CancellationToken</code> at the start since all other parameters are optional and I have my fair share of cancellation tokens being passed as the <code>object parameters</code>, but change them in a way that makes more sense to you.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">DapperDbContextExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">IEnumerable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"title\">QueryAsync</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> text,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">object</span> parameters = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">int</span>? timeout = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CommandType? type = <span class=\"literal\">null</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> command = <span class=\"keyword\">new</span> DapperEFCoreCommand(</span><br><span class=\"line\">            context,</span><br><span class=\"line\">            text,</span><br><span class=\"line\">            parameters,</span><br><span class=\"line\">            timeout,</span><br><span class=\"line\">            type,</span><br><span class=\"line\">            ct</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> connection = context.Database.GetDbConnection();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> connection.QueryAsync&lt;T&gt;(command.Definition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;<span class=\"built_in\">int</span>&gt; <span class=\"title\">ExecuteAsync</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> text,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">object</span> parameters = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">int</span>? timeout = <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CommandType? type = <span class=\"literal\">null</span></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> command = <span class=\"keyword\">new</span> DapperEFCoreCommand(</span><br><span class=\"line\">            context,</span><br><span class=\"line\">            text,</span><br><span class=\"line\">            parameters,</span><br><span class=\"line\">            timeout,</span><br><span class=\"line\">            type,</span><br><span class=\"line\">            ct</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> connection = context.Database.GetDbConnection();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> connection.ExecuteAsync(command.Definition);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">readonly</span> <span class=\"keyword\">struct</span> DapperEFCoreCommand : IDisposable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> ILogger&lt;DapperEFCoreCommand&gt; _logger;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DapperEFCoreCommand</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        DbContext context,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> text,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">object</span> parameters,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">int</span>? timeout,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CommandType? type,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger = context.GetService&lt;ILogger&lt;DapperEFCoreCommand&gt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> transaction = context.Database.CurrentTransaction?.GetDbTransaction();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> commandType = type ?? CommandType.Text;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> commandTimeout = timeout ?? context.Database.GetCommandTimeout() ?? <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        Definition = <span class=\"keyword\">new</span> CommandDefinition(</span><br><span class=\"line\">            text,</span><br><span class=\"line\">            parameters,</span><br><span class=\"line\">            transaction,</span><br><span class=\"line\">            commandTimeout,</span><br><span class=\"line\">            commandType,</span><br><span class=\"line\">            cancellationToken: ct</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_logger.IsEnabled(LogLevel.Debug))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _logger.LogDebug(</span><br><span class=\"line\">                <span class=\"string\">@&quot;Executing DbCommand [CommandType=&#x27;&#123;commandType&#125;&#x27;, CommandTimeout=&#x27;&#123;commandTimeout&#125;&#x27;]</span></span><br><span class=\"line\"><span class=\"string\">&#123;commandText&#125;&quot;</span>, Definition.CommandType, Definition.CommandTimeout, Definition.CommandText);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> CommandDefinition Definition &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_logger.IsEnabled(LogLevel.Information))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _logger.LogInformation(</span><br><span class=\"line\">                <span class=\"string\">@&quot;Executed DbCommand [CommandType=&#x27;&#123;commandType&#125;&#x27;, CommandTimeout=&#x27;&#123;commandTimeout&#125;&#x27;]</span></span><br><span class=\"line\"><span class=\"string\">&#123;commandText&#125;&quot;</span>, Definition.CommandType, Definition.CommandTimeout, Definition.CommandText);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Since we are using <code>Guid</code> properties in our models but they are stored as <code>TEXT</code> and Dapper doesn’t know how to do the conversion when reading from a SQLite database, we also need to add a global type handler.</p>\n<p>Open the <code>Startup.cs</code> file, create an inner class <code>GuidTypeHandler</code>, that will parse the string into a <code>Guid</code>, and register the handler on application startup:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SqlMapper.AddTypeHandler(<span class=\"keyword\">new</span> GuidTypeHandler());</span><br><span class=\"line\">        </span><br><span class=\"line\">        services.AddDbContext&lt;ApiDbContext&gt;(o =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            o.UseSqlite(ConnectionString);</span><br><span class=\"line\">        &#125;).AddTransient&lt;ApiDbSqlRunner&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title\">GuidTypeHandler</span> : <span class=\"title\">SqlMapper.TypeHandler</span>&lt;<span class=\"title\">Guid</span>&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"keyword\">void</span> <span class=\"title\">SetValue</span>(<span class=\"params\">IDbDataParameter parameter, Guid <span class=\"keyword\">value</span></span>)</span> =&gt; parameter.Value = <span class=\"keyword\">value</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> Guid <span class=\"title\">Parse</span>(<span class=\"params\"><span class=\"built_in\">object</span> <span class=\"keyword\">value</span></span>)</span> =&gt; Guid.Parse((<span class=\"built_in\">string</span>) <span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Optimizations-with-Dapper\"><a href=\"#Optimizations-with-Dapper\" class=\"headerlink\" title=\"Optimizations with Dapper\"></a>Optimizations with Dapper</h1><p>As stated before, Entity Framework will usually make it easier to access the database and remove some of the boilerplate code but, like most advanced frameworks, it has some drawbacks, specially performance degradation that sometimes can’t be ignored in critical paths.</p>\n<p>Lets analyse each endpoint and see if we can improve both the generated SQL and the total of database interactions.</p>\n<h2 id=\"POST-products\"><a href=\"#POST-products\" class=\"headerlink\" title=\"POST &#x2F;products\"></a>POST &#x2F;products</h2><p>This endpoint is responsible to create a product with a given initial price. Because prices are stored in a history table, being the most recent entry the current product price, this action has to insert both a line in the products and price history tables.</p>\n<p>If we look at the logs we can see two commands being executed by the Entity Framework with a total of four operations:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: Microsoft.EntityFrameworkCore.Database.Command[20101]</span><br><span class=\"line\">      Executed DbCommand (6ms) [Parameters=[@p0=&#x27;?&#x27; (Size = 8), @p1=&#x27;?&#x27;, @p2=&#x27;?&#x27; (Size = 16)], CommandType=&#x27;Text&#x27;, CommandTimeout=&#x27;30&#x27;]</span><br><span class=\"line\">      INSERT INTO &quot;Product&quot; (&quot;Code&quot;, &quot;ExternalId&quot;, &quot;Name&quot;)</span><br><span class=\"line\">      VALUES (@p0, @p1, @p2);</span><br><span class=\"line\">      SELECT &quot;Id&quot;</span><br><span class=\"line\">      FROM &quot;Product&quot;</span><br><span class=\"line\">      WHERE changes() = 1 AND &quot;rowid&quot; = last_insert_rowid();</span><br><span class=\"line\">info: Microsoft.EntityFrameworkCore.Database.Command[20101]</span><br><span class=\"line\">      Executed DbCommand (1ms) [Parameters=[@p3=&#x27;?&#x27;, @p4=&#x27;?&#x27;, @p5=&#x27;?&#x27;], CommandType=&#x27;Text&#x27;, CommandTimeout=&#x27;30&#x27;]</span><br><span class=\"line\">      INSERT INTO &quot;PriceHistory&quot; (&quot;CreatedOn&quot;, &quot;Price&quot;, &quot;ProductId&quot;)</span><br><span class=\"line\">      VALUES (@p3, @p4, @p5);</span><br><span class=\"line\">      SELECT &quot;Id&quot;</span><br><span class=\"line\">      FROM &quot;PriceHistory&quot;</span><br><span class=\"line\">      WHERE changes() = 1 AND &quot;rowid&quot; = last_insert_rowid();</span><br></pre></td></tr></table></figure>\n\n<p>This happens because Entity Framework and the SQLite provider don’t know what our code needs from each entity after an insert, so the only option is to execute a command that does the insert, selects database generated columns, and update properties of the tracked instances, in this case, the primary keys.</p>\n<p>Since we know our code doesn’t need anything from the database, because we are only returning the product external id that was calculated inside the controller, we can execute a single SQL statement containing both inserts:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSERT INTO Product (ExternalId, Code, Name)</span><br><span class=\"line\">VALUES (@ExternalId, @Code, @Name);</span><br><span class=\"line\">INSERT INTO PriceHistory (Price, CreatedOn, ProductId)</span><br><span class=\"line\">SELECT @Price, @CreatedOn, Id</span><br><span class=\"line\">FROM Product</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">    rowid = last_insert_rowid();</span><br></pre></td></tr></table></figure>\n\n<p>Change the <code>CreateAsync</code> action to use the extension method <code>ExecuteAsync</code> with this statement, passing the arguments. Keep in mind that SQLite is case sensitive when parsing the parameter name, so you must ensure the anonymous object property names match with the ones inside the statement:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;products&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductsController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpPost</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;CreateProductResultModel&gt; <span class=\"title\">CreateAsync</span>(<span class=\"params\">[FromBody] CreateProductModel model, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> externalId = Guid.NewGuid();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> tx = <span class=\"keyword\">await</span> _context.Database.BeginTransactionAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> _context.ExecuteAsync(ct, <span class=\"string\">@&quot;</span></span><br><span class=\"line\"><span class=\"string\">INSERT INTO Product (ExternalId, Code, Name)</span></span><br><span class=\"line\"><span class=\"string\">VALUES (@ExternalId, @Code, @Name);</span></span><br><span class=\"line\"><span class=\"string\">INSERT INTO PriceHistory (Price, CreatedOn, ProductId)</span></span><br><span class=\"line\"><span class=\"string\">SELECT @Price, @CreatedOn, Id</span></span><br><span class=\"line\"><span class=\"string\">FROM Product</span></span><br><span class=\"line\"><span class=\"string\">WHERE</span></span><br><span class=\"line\"><span class=\"string\">    rowid = last_insert_rowid();&quot;</span>, <span class=\"keyword\">new</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ExternalId = externalId,</span><br><span class=\"line\">            model.Code,</span><br><span class=\"line\">            model.Name,</span><br><span class=\"line\">            model.Price,</span><br><span class=\"line\">            CreatedOn = DateTime.UtcNow</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">await</span> tx.CommitAsync(ct);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> CreateProductResultModel</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Id = externalId</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Remember that, even if we are executing a single command in the database, it contains two instructions so it still must be wrapped by an explicit database transaction.</em></p>\n<p>When creating a new product using the Swagger UI endpoint (<a href=\"https://localhost:44310/swagger/index.html\">https://localhost:44310/swagger/index.html</a>), if you look at your Visual Studio output console, a log similar to the following should appear showing the custom SQL:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbug: EntityFrameworkCoreWithDapper.Database.DapperEFCoreCommand[0]</span><br><span class=\"line\">      Executing DbCommand [CommandType=&#x27;Text&#x27;, CommandTimeout=&#x27;30&#x27;]</span><br><span class=\"line\">      </span><br><span class=\"line\">      INSERT INTO Product (ExternalId, Code, Name)</span><br><span class=\"line\">      VALUES (@ExternalId, @Code, @Name);</span><br><span class=\"line\">      </span><br><span class=\"line\">      INSERT INTO PriceHistory (Price, CreatedOn, ProductId)</span><br><span class=\"line\">      SELECT @Price, @CreatedOn, Id</span><br><span class=\"line\">      FROM Product</span><br><span class=\"line\">      WHERE</span><br><span class=\"line\">          rowid = last_insert_rowid();</span><br><span class=\"line\">info: EntityFrameworkCoreWithDapper.Database.DapperEFCoreCommand[0]</span><br><span class=\"line\">      Executed DbCommand [CommandType=&#x27;Text&#x27;, CommandTimeout=&#x27;30&#x27;]</span><br><span class=\"line\">      </span><br><span class=\"line\">      INSERT INTO Product (ExternalId, Code, Name)</span><br><span class=\"line\">      VALUES (@ExternalId, @Code, @Name);</span><br><span class=\"line\">      </span><br><span class=\"line\">      INSERT INTO PriceHistory (Price, CreatedOn, ProductId)</span><br><span class=\"line\">      SELECT @Price, @CreatedOn, Id</span><br><span class=\"line\">      FROM Product</span><br><span class=\"line\">      WHERE</span><br><span class=\"line\">          rowid = last_insert_rowid();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"GET-products\"><a href=\"#GET-products\" class=\"headerlink\" title=\"GET &#x2F;products\"></a>GET &#x2F;products</h2><p>This endpoint is responsible for returning a paginated collections of products with their current price and the timestamp when it was last updated, ordered by product code.</p>\n<p>Lets extract the SQL statement generated by the Entity Framework Core from the logs:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: Microsoft.EntityFrameworkCore.Database.Command[20101]</span><br><span class=\"line\">      Executed DbCommand (3ms) [Parameters=[@__p_1=&#x27;?&#x27;, @__p_0=&#x27;?&#x27;], CommandType=&#x27;Text&#x27;, CommandTimeout=&#x27;30&#x27;]</span><br><span class=\"line\">      SELECT &quot;p1&quot;.&quot;ExternalId&quot; AS &quot;Id&quot;, &quot;p1&quot;.&quot;Code&quot;, &quot;p1&quot;.&quot;Name&quot;, (</span><br><span class=\"line\">          SELECT &quot;p&quot;.&quot;Price&quot;</span><br><span class=\"line\">          FROM &quot;PriceHistory&quot; AS &quot;p&quot;</span><br><span class=\"line\">          WHERE &quot;p1&quot;.&quot;Id&quot; = &quot;p&quot;.&quot;ProductId&quot;</span><br><span class=\"line\">          ORDER BY &quot;p&quot;.&quot;CreatedOn&quot; DESC</span><br><span class=\"line\">          LIMIT 1) AS &quot;Price&quot;, (</span><br><span class=\"line\">          SELECT &quot;p0&quot;.&quot;CreatedOn&quot;</span><br><span class=\"line\">          FROM &quot;PriceHistory&quot; AS &quot;p0&quot;</span><br><span class=\"line\">          WHERE &quot;p1&quot;.&quot;Id&quot; = &quot;p0&quot;.&quot;ProductId&quot;</span><br><span class=\"line\">          ORDER BY &quot;p0&quot;.&quot;CreatedOn&quot; DESC</span><br><span class=\"line\">          LIMIT 1) AS &quot;PriceChangedOn&quot;</span><br><span class=\"line\">      FROM &quot;Product&quot; AS &quot;p1&quot;</span><br><span class=\"line\">      ORDER BY &quot;p1&quot;.&quot;Code&quot;</span><br><span class=\"line\">      LIMIT @__p_1 OFFSET @__p_0</span><br></pre></td></tr></table></figure>\n\n<p>As we can see, because we need both the Price and CreatedOn columns from the most recent price history entry, the SQLite provider decided to create two sub-queries. The database engine is relatively smart to know how to optimize them but lets ensure the engine optimizes the access as follows:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. order products by code</span><br><span class=\"line\">2. filter products by skip and take</span><br><span class=\"line\">3. join with latest price history entry, grouped by product, using the ROWID for fast access</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT p.ExternalId as Id, p.Code, p.Name, lph.Price, lph.CreatedOn as PriceChangedOn</span><br><span class=\"line\">FROM (</span><br><span class=\"line\">    SELECT Id, ExternalId, Code, Name, RowId</span><br><span class=\"line\">    FROM Product</span><br><span class=\"line\">    ORDER BY Code DESC</span><br><span class=\"line\">    LIMIT @Take OFFSET @Skip</span><br><span class=\"line\">) p</span><br><span class=\"line\">INNER JOIN (</span><br><span class=\"line\">    SELECT ph.ProductId, ph.Price, ph.CreatedOn</span><br><span class=\"line\">    FROM PriceHistory ph</span><br><span class=\"line\">    INNER JOIN (</span><br><span class=\"line\">        SELECT MAX(RowId) RowId</span><br><span class=\"line\">        FROM PriceHistory</span><br><span class=\"line\">        GROUP BY ProductId</span><br><span class=\"line\">    ) phLatest ON ph.RowId = phLatest.RowId</span><br><span class=\"line\">) lph ON p.Id = lph.ProductId</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><em>Note: this may not be the most optimized access but remember, this is for demo purposes.</em></p>\n<p>Change the <code>GetAllAsync</code> action to use the <code>QueryAsync&lt;T&gt;</code> extension method, passing this SQL and both the skip and take as arguments.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;products&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ProductsController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">HttpGet</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"title\">Task</span>&lt;<span class=\"title\">IEnumerable</span>&lt;<span class=\"title\">ProductModel</span>&gt;&gt; <span class=\"title\">GetAllAsync</span>(<span class=\"params\">[FromQuery] <span class=\"built_in\">int</span>? skip, [FromQuery] <span class=\"built_in\">int</span>? take, CancellationToken ct</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _context.QueryAsync&lt;ProductModel&gt;(ct, <span class=\"string\">@&quot;</span></span><br><span class=\"line\"><span class=\"string\">SELECT p.ExternalId as Id, p.Code, p.Name, lph.Price, lph.CreatedOn as PriceChangedOn</span></span><br><span class=\"line\"><span class=\"string\">FROM (</span></span><br><span class=\"line\"><span class=\"string\">    SELECT Id, ExternalId, Code, Name, RowId</span></span><br><span class=\"line\"><span class=\"string\">    FROM Product</span></span><br><span class=\"line\"><span class=\"string\">    ORDER BY Code DESC</span></span><br><span class=\"line\"><span class=\"string\">    LIMIT @Take OFFSET @Skip</span></span><br><span class=\"line\"><span class=\"string\">) p</span></span><br><span class=\"line\"><span class=\"string\">INNER JOIN (</span></span><br><span class=\"line\"><span class=\"string\">    SELECT ph.ProductId, ph.Price, ph.CreatedOn</span></span><br><span class=\"line\"><span class=\"string\">    FROM PriceHistory ph</span></span><br><span class=\"line\"><span class=\"string\">    INNER JOIN (</span></span><br><span class=\"line\"><span class=\"string\">        SELECT MAX(RowId) RowId</span></span><br><span class=\"line\"><span class=\"string\">        FROM PriceHistory</span></span><br><span class=\"line\"><span class=\"string\">        GROUP BY ProductId</span></span><br><span class=\"line\"><span class=\"string\">    ) phLatest ON ph.RowId = phLatest.RowId</span></span><br><span class=\"line\"><span class=\"string\">) lph ON p.Id = lph.ProductId&quot;</span>, <span class=\"keyword\">new</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Skip = skip ?? <span class=\"number\">0</span>,</span><br><span class=\"line\">            Take = take ?? <span class=\"number\">20</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Because we globally registered our <code>GuidTypeHandler</code>, Dapper will know how to convert the column <code>ExternalId [TEXT]</code> as a <code>Guid</code> so we can map our result directly as a <code>ProductModel</code> type.</p>\n<p>Once again, if you invoke the endpoint using the Swagger UI, the folowing log should be visible:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbug: EntityFrameworkCoreWithDapper.Database.DapperEFCoreCommand[0]</span><br><span class=\"line\">      Executing DbCommand [CommandType=&#x27;Text&#x27;, CommandTimeout=&#x27;30&#x27;]</span><br><span class=\"line\">      </span><br><span class=\"line\">      SELECT p.ExternalId as Id, p.Code, p.Name, lph.Price, lph.CreatedOn as PriceChangedOn</span><br><span class=\"line\">      FROM (</span><br><span class=\"line\">          SELECT Id, ExternalId, Code, Name, RowId</span><br><span class=\"line\">          FROM Product</span><br><span class=\"line\">          ORDER BY Code DESC</span><br><span class=\"line\">          LIMIT @Take OFFSET @Skip</span><br><span class=\"line\">      ) p</span><br><span class=\"line\">      INNER JOIN (</span><br><span class=\"line\">          SELECT ph.ProductId, ph.Price, ph.CreatedOn</span><br><span class=\"line\">          FROM PriceHistory ph</span><br><span class=\"line\">          INNER JOIN (</span><br><span class=\"line\">              SELECT MAX(RowId) RowId</span><br><span class=\"line\">              FROM PriceHistory</span><br><span class=\"line\">              GROUP BY ProductId</span><br><span class=\"line\">          ) phLatest ON ph.RowId = phLatest.RowId</span><br><span class=\"line\">      ) lph ON p.Id = lph.ProductId</span><br><span class=\"line\">info: EntityFrameworkCoreWithDapper.Database.DapperEFCoreCommand[0]</span><br><span class=\"line\">      Executed DbCommand [CommandType=&#x27;Text&#x27;, CommandTimeout=&#x27;30&#x27;]</span><br><span class=\"line\">      </span><br><span class=\"line\">      SELECT p.ExternalId as Id, p.Code, p.Name, lph.Price, lph.CreatedOn as PriceChangedOn</span><br><span class=\"line\">      FROM (</span><br><span class=\"line\">          SELECT Id, ExternalId, Code, Name, RowId</span><br><span class=\"line\">          FROM Product</span><br><span class=\"line\">          ORDER BY Code DESC</span><br><span class=\"line\">          LIMIT @Take OFFSET @Skip</span><br><span class=\"line\">      ) p</span><br><span class=\"line\">      INNER JOIN (</span><br><span class=\"line\">          SELECT ph.ProductId, ph.Price, ph.CreatedOn</span><br><span class=\"line\">          FROM PriceHistory ph</span><br><span class=\"line\">          INNER JOIN (</span><br><span class=\"line\">              SELECT MAX(RowId) RowId</span><br><span class=\"line\">              FROM PriceHistory</span><br><span class=\"line\">              GROUP BY ProductId</span><br><span class=\"line\">          ) phLatest ON ph.RowId = phLatest.RowId</span><br><span class=\"line\">      ) lph ON p.Id = lph.ProductId</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I hope this article gave you a good idea on how to easily integrate Dapper with Entity Framework Core, either to optimize critical paths or to workaround limitations while removing the need to use <code>TransactionScope</code>, usually needed for these use cases.</p>\n<p>Remember that I only implemented a few set of operations, but feel free to extend your own, like <code>FirstOrDefaultAsync</code>, <code>SingleAsync</code> and even their synchronous operations.</p>\n<p>As an extended note, this approach can also be easily applied to any other ORM, like NHibernate, as long you can access the underline <code>DbConnection</code> and current <code>DbTransaction</code> from the context.</p>\n",
            "tags": [
                "dotnetcore",
                "aspnetcore",
                "csharp",
                "efcore",
                "dapper"
            ]
        }
    ]
}