{
    "version": "https://jsonfeed.org/version/1",
    "title": "code-corner.dev • All posts by \"concepts\" category",
    "description": "",
    "home_page_url": "https://code-corner.dev",
    "items": [
        {
            "id": "https://code-corner.dev/2024/01/19/NET-%E2%80%94-TaskCompletionSource-and-CancellationTokenSource/",
            "url": "https://code-corner.dev/2024/01/19/NET-%E2%80%94-TaskCompletionSource-and-CancellationTokenSource/",
            "title": ".NET — TaskCompletionSource and CancellationTokenSource",
            "date_published": "2024-01-19T00:00:00.000Z",
            "content_html": "<p>When Microsoft released .NET Framework 4.0 in April 2010, the <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/parallel-programming/task-parallel-library-tpl\">Task Parallel Library (TPL)</a> was introduced to help developers replace the previously used <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm\">Asynchronous Programming Model (APM)</a> pattern for a <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/parallel-programming/task-based-asynchronous-programming\">Task-based asynchronous programming</a>.</p>\n<p>Before the introduction of Tasks, when implementing asynchronous code, developers had to define two variations of the same method: one to begin the operation execution (convention: <code>BeginOperationName</code>), that would receive an optional callback to be invoked when completed, and another to wait for the operation to complete (convention: <code>EndOperationName</code>) and get the result or an exception, usually used inside the callback to prevent the main thread to be blocked.</p>\n<hr>\n<p>As an example, imagine a repository of cars with an asynchronous method for getting one by a given plate number, implemented using the APM pattern:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICarRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">IAsyncResult <span class=\"title\">BeginGetByPlateNumber</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> plateNumber,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        AsyncCallback callback,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">object</span> state</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Car <span class=\"title\">EndGetByPlateNumber</span>(<span class=\"params\">IAsyncResult ar</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// non-blocking usage</span></span><br><span class=\"line\">carRepository.BeginGetByPlateNumber(plateNumber, ar =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> car = carRepository.EndGetByPlateNumber(ar);</span><br><span class=\"line\">&#125;, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// blocking usage</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ar = carRepository.BeginGetByPlateNumber(plateNumber, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> car = carRepository.EndGetByPlateNumber(ar);</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, creating two methods per operation is one of the most obvious and annoying disadvantages of the APM pattern, while the other is the need to implement your own wrapper for <code>IAsyncResult</code> so you can trigger the <code>WaitHandle</code> and invoke the callbacks when the operation completes.</p>\n<p>Another disadvantage was the cancellation of running operations. If it was supported — and that’s a big if — there wasn’t a standardized pattern for developers to follow. Some would create another method for canceling (i.e. <code>CancelOperationName</code>) that receives an <code>IAsyncResult</code>, others would provide a method directly into the <code>IAsyncResult</code> and either return their own interface or require a cast, and others would simply ignore this feature due to sheer complexity.</p>\n<p>Because Microsoft knew asynchronous programming was very important for the future of .NET, it decided to solve these problems by introducing the Task Parallel Library, making it easier for developers to add parallelism and concurrency to applications.</p>\n<p>The Task Parallel Library has two central pieces:</p>\n<ul>\n<li>The <code>CancellationToken</code> is a structure commonly used in asynchronous methods and enables developers to register a callback that will be invoked if a cancellation is requested. This provides a standardized approach for implementing asynchronous operations that can be canceled mid execution by simply receiving a <code>CancellationToken</code> as a method parameter.</li>\n<li>The <code>Task</code> and <code>Task&lt;T&gt;</code> are classes that merge both <code>IAsyncResult</code> and <code>AsyncCallback</code> concepts. Developers can return a Task and the caller would either register a callback with <code>ContinueWith</code>, for a non-blocking approach, or use the method <code>Wait/Result</code> and block the main thread until the <code>Task</code> was completed. This removes the need to have callback parameters and only a single method is needed instead of <code>BeginX/EndX</code> methods.<br>If we change the previous car repository example from APM pattern to use TPL, it would be much simpler:</li>\n</ul>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICarRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">Task&lt;Car&gt; <span class=\"title\">GetByPlateNumberAsync</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> plateNumber,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// non-blocking usage</span></span><br><span class=\"line\">carRepository.GetByPlateNumberAsync(</span><br><span class=\"line\">    plateNumber,</span><br><span class=\"line\">    CancellationToken.None</span><br><span class=\"line\">).ContinueWith(t =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> car = t.Result;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// blocking usage</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> car = carRepository.GetByPlateNumberAsync(</span><br><span class=\"line\">    plateNumber,</span><br><span class=\"line\">    CancellationToken.None</span><br><span class=\"line\">).Result;</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have an idea about <code>Task</code>, <code>Task&lt;T&gt;</code>, <code>CancellationToken</code> and some of the reasons why Microsoft created the Task Parallel Library, let’s analyze two other important classes that aren’t commonly used but make all of this possible — <code>TaskCompletionSource</code> and <code>CancellationTokenSource</code>.</p>\n<h1 id=\"TaskCompletionSource\"><a href=\"#TaskCompletionSource\" class=\"headerlink\" title=\"TaskCompletionSource\"></a>TaskCompletionSource</h1><p>The class <code>TaskCompletionSource</code> is used to create a <code>Task</code> and provides methods to mark it as completed in one from three possible states:</p>\n<ul>\n<li><strong>RanToCompletion</strong> — the methods <code>SetResult</code> or <code>TrySetResult</code> complete the task successfully and, in case of a <code>Task&lt;T&gt;</code>, the result can be retrieved;</li>\n<li><strong>Canceled</strong> — the methods <code>SetCanceled</code> or <code>TrySetCanceled</code> mark the task as cancelled mid-execution. Waiting or retrieving the result will throw a <code>TaskCanceledException</code>;</li>\n<li><strong>Faulted</strong> — the methods <code>SetException</code> or <code>TrySetException</code> mark the task as faulted and waiting or retrieving the result will throw the exception.</li>\n</ul>\n<p>With this class developers can easily implement Task-based asynchronous programming. On later versions of the .NET Framework it was widely used to convert classes implementing the APM pattern and, with an increase adoption of tasks, developers also started to migrate their own libs.</p>\n<p>Let’s imagine the car repository was still implemented using the APM pattern and we wanted to create some extension methods for developers that prefer to use tasks.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">ICarRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">IAsyncResult <span class=\"title\">BeginGetByPlateNumber</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> plateNumber,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        AsyncCallback callback,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">object</span> state</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">Car <span class=\"title\">EndGetByPlateNumber</span>(<span class=\"params\">IAsyncResult ar</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">CarRepositoryExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Task&lt;Car&gt; <span class=\"title\">GetByPlateNumberAsync</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> ICarRepository repository,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> plateNumber</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tcs = <span class=\"keyword\">new</span> TaskCompletionSource&lt;Car&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// use callback for non-blocking approach</span></span><br><span class=\"line\">        repository.BeginGetByPlateNumber(plateNumber, ar =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> car = repository.EndGetByPlateNumber(ar);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// no exception thrown, mark the task as completed successfully</span></span><br><span class=\"line\">                tcs.SetResult(car);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// exception thrown, mark the task as faulted</span></span><br><span class=\"line\">                tcs.SetException(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tcs.Task;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we just converted <code>BeginX/EndX</code> methods to tasks in just a few lines without blocking the caller thread.</p>\n<p>The <code>TaskCompletionSource</code> is also perfect to convert <strong>Event-based Asynchronous Pattern (EAP)</strong>. Imagine you have a class that represents a message queue and it provides two events — <code>OnMessageReceived</code> and <code>OnErrorReceived</code> — and a non-blocking method to send a message.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IMessageQueue</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">event</span> Action&lt;<span class=\"built_in\">object</span>, OnMessageReceivedEventArgs&gt; OnMessageReceived;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">event</span> Action&lt;<span class=\"built_in\">object</span>, OnErrorReceivedEventArgs&gt; OnErrorReceived;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Send</span>(<span class=\"params\">Guid correlationId, JObject content</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnMessageReceivedEventArgs</span> : <span class=\"title\">EventArgs</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid CorrelationId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JObject Content &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OnErrorReceivedEventArgs</span> : <span class=\"title\">EventArgs</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Guid CorrelationId &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Exception Exception &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">init</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Let’s say we wanted to create an extension method that sends a message and, without blocking the current thread, waits for a correlated response or exception to be received.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">MessageQueueExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;JObject&gt; <span class=\"title\">SendAsync</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> IMessageQueue queue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        Guid correlationId,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        JObject content</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tcs = <span class=\"keyword\">new</span> TaskCompletionSource&lt;JObject&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// register the events before sending the message</span></span><br><span class=\"line\">        queue.OnMessageReceived += OnMessageReceived;</span><br><span class=\"line\">        queue.OnErrorReceived += OnErrorReceived;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            queue.Send(correlationId, content);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> tcs.Task;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ensure events registration is always cleaned up</span></span><br><span class=\"line\">            queue.OnMessageReceived -= OnMessageReceived;</span><br><span class=\"line\">            queue.OnErrorReceived -= OnErrorReceived;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnMessageReceived</span>(<span class=\"params\"><span class=\"built_in\">object</span> _, OnMessageReceivedEventArgs args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (args.CorrelationId == correlationId) </span><br><span class=\"line\">                tcs.TrySetResult(args.Content);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnErrorReceived</span>(<span class=\"params\"><span class=\"built_in\">object</span> _, OnErrorReceivedEventArgs args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (args.CorrelationId == correlationId) </span><br><span class=\"line\">                tcs.TrySetException(args.Exception);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The approach is very similar to the APM pattern. We do a temporary registration into the relevant events, then invoke the action that can trigger those events and change the task state when callbacks are invoked. Just be sure registrations are properly cleaned up or else a memory leak will happen.</p>\n<h1 id=\"CancellationTokenSource\"><a href=\"#CancellationTokenSource\" class=\"headerlink\" title=\"CancellationTokenSource\"></a>CancellationTokenSource</h1><p>The class <code>CancellationTokenSource</code> is used to create a <code>CancellationToken</code> that can be manually marked as canceled using the method <code>Cancel</code> or, to support timeout implementations, the <code>CancelAfter</code> methods that will schedule a cancellation after the specified time as passed.</p>\n<p>Using the previously defined <code>GetByPlateNumberAsync</code> extension method, let’s change it first to support cancellation using a <code>CancellationToken</code>. Please note that some performance improvements could be made when detecting for cancellation, but this implementation is for simplicity:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">CarRepositoryExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;Car&gt; <span class=\"title\">GetByPlateNumberAsync</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> ICarRepository repository,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> plateNumber,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tcs = <span class=\"keyword\">new</span> TaskCompletionSource&lt;Car&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> _ = ct.Register(() =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// if the cancellation is triggered we try to cancel the task</span></span><br><span class=\"line\">            tcs.TrySetCanceled(ct);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// use callback for non-blocking approach</span></span><br><span class=\"line\">        repository.BeginGetByPlateNumber(plateNumber, ar =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> car = repository.EndGetByPlateNumber(ar);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// because the task may have been cancelled first we</span></span><br><span class=\"line\">                <span class=\"comment\">// must try to set a result or an exception will be thrown</span></span><br><span class=\"line\">                tcs.TrySetResult(car);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (Exception e)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// same, task may have been cancelled first so we try</span></span><br><span class=\"line\">                <span class=\"comment\">// to set an exception and mark it as faulted</span></span><br><span class=\"line\">                tcs.TrySetException(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> tcs.Task;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Now that <code>GetByPlateNumberAsync</code> supports cancellation, if we wanted to limit the waiting for a response to a maximum of 5 seconds, a <code>CancellationTokenSource</code> could be used:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">var</span> cts = <span class=\"keyword\">new</span> CancellationTokenSource();</span><br><span class=\"line\">cts.CancelAfter(TimeSpan.FromSeconds(<span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ct = cts.Token;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// if this operation takes more than 5 seconds to run</span></span><br><span class=\"line\"><span class=\"comment\">// a TaskCanceledException will be thrown</span></span><br><span class=\"line\"><span class=\"keyword\">await</span> carRepository.GetByPlateNumberAsync(plateNumber, ct);</span><br></pre></td></tr></table></figure>\n\n<p>The <code>CancellationTokenSource</code> also supports to be linked to an existing <code>CancellationToken</code> meaning that the underlying token can either be cancelled manually or by the linked token. This is usually useful to implement methods that offer some kind of timeout parameter without the caller having to use a <code>CancellationTokenSource</code> directly.</p>\n<p>Let’s change the previously defined <code>SendAsync</code> extension method to support both cancellation using a token or a timeout parameter that will throw a <code>TimeoutException</code> if the waiting time is exceeded:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">MessageQueueExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">async</span> Task&lt;JObject&gt; <span class=\"title\">SendAsync</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"keyword\">this</span> IMessageQueue queue,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        Guid correlationId,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        JObject content,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        TimeSpan timeout,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        CancellationToken ct</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> tcs = <span class=\"keyword\">new</span> TaskCompletionSource&lt;JObject&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> cts = CancellationTokenSource.CreateLinkedTokenSource(ct);</span><br><span class=\"line\">        cts.CancelAfter(timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">await</span> <span class=\"keyword\">using</span> <span class=\"keyword\">var</span> _ = cts.Token.Register(() =&gt;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ct.IsCancellationRequested)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// if ct was cancelled we want to throw a TaskCanceledException</span></span><br><span class=\"line\">                tcs.TrySetCanceled(ct);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// if ct wasn&#x27;t cancelled but the cts token was triggered</span></span><br><span class=\"line\">            <span class=\"comment\">// it can only mean the timeout parameter was exceeded</span></span><br><span class=\"line\">            tcs.TrySetException(<span class=\"keyword\">new</span> TimeoutException(</span><br><span class=\"line\">                <span class=\"string\">$&quot;The queue took more than &#x27;<span class=\"subst\">&#123;timeout&#125;</span>&#x27; to return a message&quot;</span></span><br><span class=\"line\">            ));</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        queue.OnMessageReceived += OnMessageReceived;</span><br><span class=\"line\">        queue.OnErrorReceived += OnErrorReceived;</span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            queue.Send(correlationId, content);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> tcs.Task;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            queue.OnMessageReceived -= OnMessageReceived;</span><br><span class=\"line\">            queue.OnErrorReceived -= OnErrorReceived;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnMessageReceived</span>(<span class=\"params\"><span class=\"built_in\">object</span> _, OnMessageReceivedEventArgs args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (args.CorrelationId == correlationId) </span><br><span class=\"line\">                tcs.TrySetResult(args.Content);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">OnErrorReceived</span>(<span class=\"params\"><span class=\"built_in\">object</span> _, OnErrorReceivedEventArgs args</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (args.CorrelationId == correlationId) </span><br><span class=\"line\">                tcs.TrySetException(args.Exception);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>In this case, we now use the method <code>CreateLinkedTokenSource</code> to ensure the <code>CancellationTokenSource</code> token will be cancelled if the <code>ct</code> parameter is cancelled or if a given timeout has passed. Because we are listening for the linked <code>cts</code> token, inside the callback we must check if the <code>ct</code> parameter was the cause of cancellation so we can either mark the task as canceled or faulted with a <code>TimeoutException</code>.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article I explained some of the reasons why Microsoft decided to replace the <strong>Asynchronous Programming Model (APM)</strong> pattern for the <strong>Task-based Asynchronous Programming</strong>, which is possible by using classes from the <strong>Task Parallel Library (TPL)</strong>.</p>\n<p>I also demonstrated how the classes <code>TaskCompletionSource</code> and <code>CancellationTokenSource</code> could be used to convert any asynchronous implementation to tasks, even if based on <strong>Event-based Asynchronous Pattern (EAP)</strong>, ensuring threads won’t be blocked waiting for responses and even supporting the cancellation of running operations.</p>\n",
            "tags": [
                "dotnetcore",
                "csharp",
                "dotnet"
            ]
        },
        {
            "id": "https://code-corner.dev/2024/01/08/Dispose-pattern-in-NET/",
            "url": "https://code-corner.dev/2024/01/08/Dispose-pattern-in-NET/",
            "title": "Dispose pattern in .NET",
            "date_published": "2024-01-08T00:00:00.000Z",
            "content_html": "<p>When working with .NET, you’ll often hear about the <a href=\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/\">garbage collector</a> and how it manages the allocation and release the application’s memory from the managed heap, making our life easier.</p>\n<p>This is true for the majority of objects but sometimes we have to work with unmanaged resources — files, network or database connections — that we must explicitly release since the garbage collector doesn’t know how to do the cleanup for us, despite being able to track the object that encapsulates the unmanaged resource.</p>\n<p>To help preventing memory leaks, .NET provides a simple and standard way to cleanup unmanaged resources called <strong>dispose pattern</strong>, which consists in implementing the <code>IDisposable</code> interface and calling Dispose method when resources aren’t needed, which is usually done via the <code>using</code> keyword.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> file = File.OpenText(filePath))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fileContent = file.ReadToEnd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// equivalent code</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> file = File.OpenText(filePath)</span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fileContent = file.ReadToEnd();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    file.Dispose();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>When .NET Core 3.0 was released, Microsoft introduced the interface <code>IAsyncDisposable</code> to allow for asynchronous cleanup operations by calling the <code>DisposeAsync</code> method, usually done with <code>await using</code> keywords.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> SomeAsyncDisposableClass())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do stuff</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// equivalent code</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> SomeAsyncDisposableClass();</span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do stuff</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> x.DisposeAsync();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If a class implements <code>IAsyncDisposable</code> it’s usually a good practice to also implement <code>IDisposable</code> despite not being a requirement. Not all code runs asynchronously, so this ensures the class is ready for both scenarios.</p>\n<p>In this article I’m going to demonstrate and explain step by step how to properly implement the <strong>dispose pattern</strong> using both <code>IDisposable</code> and <code>IAsyncDisposable</code> interfaces.</p>\n<h1 id=\"Example-scenario\"><a href=\"#Example-scenario\" class=\"headerlink\" title=\"Example scenario\"></a>Example scenario</h1><p>To use as an example, we are going to implement a class that wraps SQL Server connections and uses Dapper to simplify mappings and every time someone queries the database it will write the SQL instruction to the log. This provides a simple example of a class that holds both managed and unmanaged resources that can also be disposed asynchronously — SQL Server network connection.</p>\n<p>The class without any disposable implementations:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerQueryRunner</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ILogger&lt;SqlServerQueryRunner&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlConnection _connection;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SqlServerQueryRunner</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        ILogger&lt;SqlServerQueryRunner&gt; logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> connectionString</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ArgumentNullException.ThrowIfNull(logger);</span><br><span class=\"line\">        ArgumentNullException.ThrowIfNull(connectionString);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">        _connection = <span class=\"keyword\">new</span> SqlConnection(connectionString);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"title\">ValueTask</span>&lt;<span class=\"title\">IEnumerable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"title\">QueryAsync</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">CancellationToken ct, <span class=\"built_in\">string</span> sql, <span class=\"built_in\">object</span> parameters = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Querying database: &#123;Sql&#125;&quot;</span>, sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// using Dapper for simplicity</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _connection.QueryAsync&lt;T&gt;(<span class=\"keyword\">new</span> CommandDefinition(</span><br><span class=\"line\">            sql,</span><br><span class=\"line\">            parameters,</span><br><span class=\"line\">            cancellationToken: ct</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, this class receives a connection string and creates a SQL Server connection. Because this class is the owner of the <code>SqlConnection</code> instance, it must dispose it or else resources won’t be released.</p>\n<h1 id=\"IDisposable-interface\"><a href=\"#IDisposable-interface\" class=\"headerlink\" title=\"IDisposable interface\"></a>IDisposable interface</h1><p>Implement the <code>IDisposable</code> interface by disposing unmanaged resources inside the <code>Dispose</code> method, in this case the SQL Server connection:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerQueryRunner</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ILogger&lt;SqlServerQueryRunner&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlConnection _connection;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _connection.Dispose();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This code looks good and will work as expected, but there are some scenarios to consider:</p>\n<ol>\n<li><strong>Will the class be sealed?</strong> If not, we must provide a way for extenders to cleanup their unmanaged resources, if any;</li>\n<li><strong>Do I want to a safeguard from forgetting to dispose?</strong> If yes, we must implement a class finalizer that will try to cleanup resources when garbage collected;</li>\n</ol>\n<p>Both scenarios are solved by creating a virtual Dispose method, to be overridden by extenders, that receives a flag to indicate if it’s being called from a dispose or finalizer.</p>\n<p>This usually means resources are explicitly disposed only when disposing, otherwise references are cleared and we assume unmanaged resources also have finalizers.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerQueryRunner</span> : <span class=\"title\">IDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ILogger&lt;SqlServerQueryRunner&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlConnection _connection;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ~SqlServerQueryRunner() =&gt; Dispose(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Dispose(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"><span class=\"built_in\">bool</span> disposing</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (disposing)</span><br><span class=\"line\">            _connection?.Dispose();</span><br><span class=\"line\"></span><br><span class=\"line\">        _connection = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        _logger = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>You now may be asking: <em>But if we have finalizers that will be triggered when the class is garbage collected, why implement <code>IDisposable</code>?</em></p>\n<p>That’s a fair question with a simple answer: <strong>You want garbage collection to be as fast as possible because it is a synchronous operation that stops all processes while it’s running.</strong></p>\n<p><strong>This also means unmanaged resources wouldn’t be released until garbage collection happened, which may take some time</strong> — imagine a reference to a file that you didn’t need but the process would still be locking it, now you want to open it again but can’t, because the garbage collector haven’t run yet.</p>\n<p>If you look at the <code>Dispose</code> method, you’ll realize there’s a call to <code>GC.SuppressFinalize</code>, which is a method that actually tells the garbage collector: <em>look, this class has a finalizer but you can ignore it because it is irrelevant, the developer already released resources using the dispose pattern.</em></p>\n<h1 id=\"IAsyncDisposable-interface\"><a href=\"#IAsyncDisposable-interface\" class=\"headerlink\" title=\"IAsyncDisposable interface\"></a>IAsyncDisposable interface</h1><p>Implementing the <code>IAsyncDisposable</code> interface is very similar to <code>IDisposable</code> with a small difference, we call <code>Dispose(false)</code> inside the method <code>DisposeAsync</code> to keep functional equivalence with the synchronous dispose pattern and further ensuring that finalizer code paths are still invoked. There’s no need to dispose resources synchronously if they were already disposed asynchronously.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerQueryRunner</span> : <span class=\"title\">IDisposable</span>, <span class=\"title\">IAsyncDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ILogger&lt;SqlServerQueryRunner&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlConnection _connection;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> ValueTask <span class=\"title\">DisposeAsync</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> DisposeAsyncCore().ConfigureAwait(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Dispose(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">async</span> ValueTask <span class=\"title\">DisposeAsyncCore</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_connection <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _connection.DisposeAsync().ConfigureAwait(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As a small note, if the class was sealed, the method <code>DisposeAsyncCore</code> wouldn’t be needed and all code could be inside the <code>DisposeAsync</code> method.</p>\n<h1 id=\"ObjectDisposedException\"><a href=\"#ObjectDisposedException\" class=\"headerlink\" title=\"ObjectDisposedException\"></a>ObjectDisposedException</h1><p>When implementing a disposable class it’s also a good practice to throw an <code>ObjectDisposedException</code> when it’s been disposed but some code is still trying to use it.</p>\n<p>This usually is as simple as creating a flag to be set by the <code>Dispose(bool)</code> method and checking for it on all methods that may apply.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerQueryRunner</span> : <span class=\"title\">IDisposable</span>, <span class=\"title\">IAsyncDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ILogger&lt;SqlServerQueryRunner&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlConnection _connection;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> _disposed;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"><span class=\"built_in\">bool</span> disposing</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_disposed)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (disposing)</span><br><span class=\"line\">            _connection?.Dispose();</span><br><span class=\"line\"></span><br><span class=\"line\">        _connection = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        _logger = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        _disposed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"title\">ValueTask</span>&lt;<span class=\"title\">IEnumerable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"title\">QueryAsync</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">CancellationToken ct, <span class=\"built_in\">string</span> sql, <span class=\"built_in\">object</span> parameters = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ObjectDisposedException.ThrowIf(_disposed, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Querying database: &#123;Sql&#125;&quot;</span>, sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// using Dapper for simplicity</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _connection.QueryAsync&lt;T&gt;(<span class=\"keyword\">new</span> CommandDefinition(</span><br><span class=\"line\">            sql,</span><br><span class=\"line\">            parameters,</span><br><span class=\"line\">            cancellationToken: ct</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article I explained the <strong>dispose pattern</strong> in .NET, which is used to cleanup and release unmanaged resources from memory, either synchronously by implementing the <code>IDisposable</code> interface, or asynchronously with <code>IAsyncDisposable</code>.</p>\n<p>For the example we used a simple wrapper for <code>SqlConnection</code> that holds references to both unmanaged and managed resources, making sure both were properly cleared and an <code>ObjectDisposedException</code> was thrown if the class was used after being disposed.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SqlServerQueryRunner</span> : <span class=\"title\">IDisposable</span>, <span class=\"title\">IAsyncDisposable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ILogger&lt;SqlServerQueryRunner&gt; _logger;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SqlConnection _connection;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">bool</span> _disposed;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SqlServerQueryRunner</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        ILogger&lt;SqlServerQueryRunner&gt; logger,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> connectionString</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ArgumentNullException.ThrowIfNull(logger);</span><br><span class=\"line\">        ArgumentNullException.ThrowIfNull(connectionString);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger = logger;</span><br><span class=\"line\">        _connection = <span class=\"keyword\">new</span> SqlConnection(connectionString);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">region</span> IDisposable</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ~SqlServerQueryRunner() =&gt; Dispose(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Dispose(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">Dispose</span>(<span class=\"params\"><span class=\"built_in\">bool</span> disposing</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(_disposed)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (disposing)</span><br><span class=\"line\">            _connection?.Dispose();</span><br><span class=\"line\"></span><br><span class=\"line\">        _connection = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        _logger = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        _disposed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">region</span> IAsyncDisposable</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> ValueTask <span class=\"title\">DisposeAsync</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">await</span> DisposeAsyncCore().ConfigureAwait(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Dispose(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        GC.SuppressFinalize(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">virtual</span> <span class=\"keyword\">async</span> ValueTask <span class=\"title\">DisposeAsyncCore</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_disposed)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_connection <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">await</span> _connection.DisposeAsync().ConfigureAwait(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endregion</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> <span class=\"title\">ValueTask</span>&lt;<span class=\"title\">IEnumerable</span>&lt;<span class=\"title\">T</span>&gt;&gt; <span class=\"title\">QueryAsync</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">CancellationToken ct, <span class=\"built_in\">string</span> sql, <span class=\"built_in\">object</span> parameters = <span class=\"literal\">null</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ObjectDisposedException.ThrowIf(_disposed, <span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        _logger.LogDebug(<span class=\"string\">&quot;Querying database: &#123;Sql&#125;&quot;</span>, sql);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// using Dapper for simplicity</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> _connection.QueryAsync&lt;T&gt;(<span class=\"keyword\">new</span> CommandDefinition(</span><br><span class=\"line\">            sql,</span><br><span class=\"line\">            parameters,</span><br><span class=\"line\">            cancellationToken: ct</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "dotnetcore",
                "csharp",
                "dotnet"
            ]
        },
        {
            "id": "https://code-corner.dev/2023/12/28/Syntax-sugar-we-don%E2%80%99t-even-think-about-in-C/",
            "url": "https://code-corner.dev/2023/12/28/Syntax-sugar-we-don%E2%80%99t-even-think-about-in-C/",
            "title": "Syntax sugar we don’t even think about in C#",
            "date_published": "2023-12-28T00:00:00.000Z",
            "content_html": "<p>When I finished my university degree, back in November 2010 (yes, I’m getting old), Microsoft wasn’t as open as it is today, but because they had a lot of education protocols we had access to a lot of their development tools for free — Visual Studio, SQL Server, Team Foundation Server, just to name a few.</p>\n<p>Because of this, C# was actually the language used to teach Object-Oriented Programming (OOP), design patterns and even deeper runtime concepts like garbage collection (an ode to the amazing book <em>“CLR via C#”</em> from Jeffrey Richter — I learned so much).</p>\n<p>At the time, we also used a lot of Java, C, C++, LISP, and even Assembly, but C# earned a place in my heart.</p>\n<p>Every time I had to create something from scratch that could be run on Windows, C# and .NET Framework was always my first choice. I’m not sure if it was the language or how good Visual Studio was as an IDE compared to Eclipse or NetBeans, but I always found C# to be the most productive programming language I ever used.</p>\n<p>And this was between 2006 and 2010, a period were Microsoft released C# versions 3.0 and 4.0 which, in my opinion, completely overthrown their direct competition — Java.</p>\n<p>We had auto-implemented properties, extension methods, LINQ, implicit typed variables, anonymous types, query and lambda expressions, just to name a few.</p>\n<p>This changes aimed to keep developers focused in implementing business requirements instead of writing boilerplate code. Some may disagree, but for me it was the start of a new era in terms of programming productivity.</p>\n<p>If we look back, C# as come a long way, introducing new features every version and I think we can all agree C# 11.0 is an extremely mature and powerful language, suitable both for enterprise or simple applications.</p>\n<hr>\n<p>Everyone now knows how much I love everything about C# — <em>almost :)</em> — and since we are starting a new year, I’m feeling nostalgic and I think it is a good time to show how far we’ve come and how much syntax sugar we use nowadays without thinking how much time it really saves us.</p>\n<h1 id=\"Auto-Properties-with-initializers\"><a href=\"#Auto-Properties-with-initializers\" class=\"headerlink\" title=\"Auto-Properties (with initializers)\"></a>Auto-Properties (with initializers)</h1><p>Ever since C# 1.0 we have properties, which behave like fields from a class or struct, but they are a special case of methods that can implement custom logic, not just get or set the field value.</p>\n<p>If we were to create a class <code>Car</code> in C# 1.0 to hold some information like brand, model, license plate and even the number of doors, with a default of 4, it would look like this:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _brand;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _model;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">string</span> _licensePlate;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">int</span> _doors = <span class=\"number\">4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Brand</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _brand;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _brand = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Model</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _model;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _model = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> LicensePlate</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _licensePlate;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _licensePlate = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Doors</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _doors;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            _doors = <span class=\"keyword\">value</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>With the introduction of auto-properties in C# 3.0 and initializers in C# 6.0, we can make the code much more compact and readable.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Car</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Brand &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Model &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> LicensePlate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Doors &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125; = <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Using-statement-and-declaration\"><a href=\"#Using-statement-and-declaration\" class=\"headerlink\" title=\"Using statement (and declaration)\"></a>Using statement (and declaration)</h1><p>The using statement ensures that instances implementing <code>IDisposable</code> are properly disposed.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> (IDisposable x = CreateSomeDisposable())</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do stuff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Without the <code>using</code> statement, developers would need to always write a <code>try-finally</code> block and check for <code>null</code> to prevent exceptions.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IDisposable x = CreateSomeDisposable();</span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do stuff</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ReferenceEquals(x, <span class=\"literal\">null</span>)) </span><br><span class=\"line\">        x.Dispose();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>With the release of C# 8.0 we can now use the <code>using</code> declaration, which simplifies even more the code, removing the need for brackets, disposing the instance at the end of the current scope.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> IDisposable x = CreateSomeDisposable();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// do stuff</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Foreach-loop\"><a href=\"#Foreach-loop\" class=\"headerlink\" title=\"Foreach loop\"></a>Foreach loop</h1><p>The <code>foreach</code> keyword makes it easier to iterate over an <code>IEnumerable</code> but did you know that, before C# 1.2, developers had to iterate over the enumerator and explicitly call the dispose method?</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IEnumerable cars = GetAllCars();</span><br><span class=\"line\">IEnumerator carsEnumerator = cars.GetEnumerator();</span><br><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (carsEnumerator.MoveNext())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Car car = (Car)carsEnumerator.Current;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// do stuff</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    IDisposable disposable = carsEnumerator <span class=\"keyword\">as</span> IDisposable;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ReferenceEquals(disposable, <span class=\"literal\">null</span>))</span><br><span class=\"line\">        disposable.Dispose();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>With the release of C# 2.0, Microsoft introduced generics and iterators as a first-class part of the language which nowadays means that iterating over any collection is just a simple use of the <code>foreach</code> keyword:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IEnumerable&lt;Car&gt; cars = GetAllCars();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (Car car <span class=\"keyword\">in</span> cars)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do stuff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Object-and-collection-initializers\"><a href=\"#Object-and-collection-initializers\" class=\"headerlink\" title=\"Object and collection initializers\"></a>Object and collection initializers</h1><p>Before C# 3.0, when initializing a new object you had to invoke the constructor followed by lines of assignment statements. Same with collections, were method <code>Add</code> or indexers were used.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Car car = <span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">car.Brand = <span class=\"string\">&quot;Audi&quot;</span>;</span><br><span class=\"line\">car.Model = <span class=\"string\">&quot;A8&quot;</span>;</span><br><span class=\"line\">car.LicensePlate = <span class=\"string\">&quot;ABCD-1234&quot;</span>;</span><br><span class=\"line\">car.Doors = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Car[] cars = <span class=\"keyword\">new</span> Car[<span class=\"number\">1</span>];</span><br><span class=\"line\">cars[<span class=\"number\">0</span>] = car;</span><br></pre></td></tr></table></figure>\n\n<p>With object and collection initializers the code is more compact and scoped using brackets.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Car car = <span class=\"keyword\">new</span> Car</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Brand = <span class=\"string\">&quot;Audi&quot;</span>,</span><br><span class=\"line\">    Model = <span class=\"string\">&quot;A8&quot;</span>,</span><br><span class=\"line\">    LicensePlate = <span class=\"string\">&quot;ABCD-1234&quot;</span>,</span><br><span class=\"line\">    Doors = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Car[] cars = <span class=\"keyword\">new</span> Car[]</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    car</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Implicitly-typed-variables-and-anonymous-types\"><a href=\"#Implicitly-typed-variables-and-anonymous-types\" class=\"headerlink\" title=\"Implicitly typed variables (and anonymous types)\"></a>Implicitly typed variables (and anonymous types)</h1><p>The release of C# 3.0 introduced some features, being one the possibility of creating anonymous types which are usually used to store read-only data into a temporary instance, being the class generated internally by the compiler.</p>\n<p>Because developers don’t know the class name since it will be generated at compile time, Microsoft had to provide a way to define the variable type, so they created the <code>var</code> keyword that will tell the compiler it should infer the type.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    GivenName = <span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">    Surname = <span class=\"string\">&quot;Doe&quot;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Because <code>var</code> can be used with anything, not just anonymous classes, some developers disagree it improves code legibility despite reducing the code that must be written, specially when defining generic variables.</p>\n<p>I personally believe that <code>var</code> is an improvement to code legibility as long as the surrounding code is properly implemented, like giving proper names to variables and methods.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> Car</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Brand = <span class=\"string\">&quot;Audi&quot;</span>,</span><br><span class=\"line\">    Model = <span class=\"string\">&quot;A8&quot;</span>,</span><br><span class=\"line\">    LicensePlate = <span class=\"string\">&quot;ABCD-1234&quot;</span>,</span><br><span class=\"line\">    Doors = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> cars = <span class=\"keyword\">new</span>[]</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    car</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Lambda-expressions-and-Action-Func\"><a href=\"#Lambda-expressions-and-Action-Func\" class=\"headerlink\" title=\"Lambda expressions (and Action&#x2F;Func)\"></a>Lambda expressions (and Action&#x2F;Func<T>)</h1><p>To create anonymous functions that can be implicitly converted to delegates as long as the signature matches, Microsoft added the lambda declaration operator <code>=&gt;</code> and provided into the framework pre-existing delegate types like <code>Action</code> for void results, or <code>Func&lt;T&gt;</code> if a result was returned, with multiple overloads for variable input parameters.</p>\n<p>Before C# 3.0 developers had to define their own delegate classes and invokers had to be explicit by using the delegate keyword.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">Filter</span>(<span class=\"params\">IEnumerable&lt;<span class=\"built_in\">string</span>&gt; values, FilterString filter</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> <span class=\"keyword\">value</span> <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(filter(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">            result.Add(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">delegate</span> <span class=\"built_in\">bool</span> <span class=\"title\">FilterString</span>(<span class=\"params\"><span class=\"built_in\">string</span> <span class=\"keyword\">value</span></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// usage</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> filterValues = Filter(values, <span class=\"built_in\">delegate</span>(<span class=\"built_in\">string</span> s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.Contains(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>Using lambda expressions and pre-defined delegates, we don’t need to define our own and the code invoking <code>Filter</code> is much compacter.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> IEnumerable&lt;<span class=\"built_in\">string</span>&gt; <span class=\"title\">Filter</span>(<span class=\"params\">IEnumerable&lt;<span class=\"built_in\">string</span>&gt; values, Func&lt;<span class=\"built_in\">string</span>, <span class=\"built_in\">bool</span>&gt; filter</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> <span class=\"keyword\">value</span> <span class=\"keyword\">in</span> values)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(filter(<span class=\"keyword\">value</span>))</span><br><span class=\"line\">            result.Add(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// usage</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> filterValues = Filter(values, s =&gt; s.Contains(<span class=\"string\">&#x27;1&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Extension-methods\"><a href=\"#Extension-methods\" class=\"headerlink\" title=\"Extension methods\"></a>Extension methods</h1><p>The release of C# 3.0 also introduced extension methods, an extremely powerful feature that allows to “add” methods to existing classes without modifying, extending or recompiling the class. They look like instance methods but are actually static methods that receive the instance as the first parameter and the compiler does the magic for us.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">StringExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span>? ToNullableInt(<span class=\"keyword\">this</span> <span class=\"built_in\">string</span> <span class=\"keyword\">value</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">value</span>.ToInt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> <span class=\"title\">ToInt</span>(<span class=\"params\"><span class=\"keyword\">this</span> <span class=\"built_in\">string</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>.Parse(<span class=\"keyword\">value</span>, NumberStyles.None);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// usage</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> convertedValue = <span class=\"string\">&quot;12345&quot;</span>.ToNullableInt();</span><br><span class=\"line\">Without extension methods the code would be more verbose:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">StringExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span>? ToNullableInt(<span class=\"built_in\">string</span> <span class=\"keyword\">value</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">value</span> <span class=\"keyword\">is</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ToInt(<span class=\"keyword\">value</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> <span class=\"title\">ToInt</span>(<span class=\"params\"><span class=\"built_in\">string</span> <span class=\"keyword\">value</span></span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>.Parse(<span class=\"keyword\">value</span>, NumberStyles.None);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// usage</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> convertedValue = StringExtensions.ToNullableInt(<span class=\"string\">&quot;12345&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LINQ-—-Language-Integrated-Query\"><a href=\"#LINQ-—-Language-Integrated-Query\" class=\"headerlink\" title=\"LINQ — Language Integrated Query\"></a>LINQ — Language Integrated Query</h2><p>I want to give a special note about LINQ, despite not being an integral part of the C# language but a framework library, it is a powerful demonstration of what can be done when using a lot of C# syntactic sugar features — the usage of generics, iterators, extension methods over <code>IEnumerable</code>, lambda expressions, anonymous types and implicit typed local variables.</p>\n<p>Before C# 3.0, if we wanted to filter a collection cars with two doors and store a distinct collection of brands and models, we had to implement a class with an equality overload and use a HashSet to prevent duplicates.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CarBrandModelGroup</span> : <span class=\"title\">IEquatable</span>&lt;<span class=\"title\">CarBrandModelGroup</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CarBrandModelGroup</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> brand,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        <span class=\"built_in\">string</span> model</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Brand = brand;</span><br><span class=\"line\">        Model = model;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Brand &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Model &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\">CarBrandModelGroup other</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ReferenceEquals(<span class=\"literal\">null</span>, other)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ReferenceEquals(<span class=\"keyword\">this</span>, other)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Brand == other.Brand &amp;&amp; Model == other.Model;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">bool</span> <span class=\"title\">Equals</span>(<span class=\"params\"><span class=\"built_in\">object</span> obj</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ReferenceEquals(<span class=\"literal\">null</span>, obj)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ReferenceEquals(<span class=\"keyword\">this</span>, obj)) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj.GetType() == GetType() &amp;&amp; Equals((CarBrandModelGroup)obj);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"built_in\">int</span> <span class=\"title\">GetHashCode</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">uint</span> hc1;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ReferenceEquals(Brand, <span class=\"literal\">null</span>))</span><br><span class=\"line\">            hc1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            hc1 = (<span class=\"built_in\">uint</span>)Brand.GetHashCode();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">uint</span> hc2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ReferenceEquals(Model, <span class=\"literal\">null</span>))</span><br><span class=\"line\">            hc2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            hc2 = (<span class=\"built_in\">uint</span>)Model.GetHashCode();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"built_in\">int</span>)(hc1 ^ hc2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// the group by brand and model cars with doors == 2</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> carBrandModelsWithTwoDoors = <span class=\"keyword\">new</span> HashSet&lt;CarBrandModelGroup&gt;();</span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> car <span class=\"keyword\">in</span> cars)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (car.Doors == <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        carBrandModelsWithTwoDoors.Add(<span class=\"keyword\">new</span> CarBrandModelGroup(</span><br><span class=\"line\">            car.Brand,</span><br><span class=\"line\">            car.Model</span><br><span class=\"line\">        ));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>With the introduction of LINQ, the code will be a simple use of the available methods while keeping in mind anonymous classes implement the default comparer, so no need for a custom class for grouping.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> carBrandModelsWithTwoDoors = cars.Where(c =&gt; c.Doors == <span class=\"number\">2</span>).DistinctBy(c =&gt; <span class=\"keyword\">new</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    c.Brand,</span><br><span class=\"line\">    c.Model</span><br><span class=\"line\">&#125;).ToArray();</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article I’ve shown how C# have evolved over the years to be a more productive and developer friendly language.</p>\n<p>Funny enough, when I started to write this article I wanted to cover major features that have been added over the years but then I realized just how big this language is and a single article would be too much, so I ended focusing more on C# 3.0.</p>\n<p>This clearly calls for more!</p>\n",
            "tags": [
                "dotnetcore",
                "csharp",
                "dotnet"
            ]
        },
        {
            "id": "https://code-corner.dev/2023/12/14/C-%E2%80%98is-null%E2%80%99-vs-%E2%80%98-null%E2%80%99/",
            "url": "https://code-corner.dev/2023/12/14/C-%E2%80%98is-null%E2%80%99-vs-%E2%80%98-null%E2%80%99/",
            "title": "C# ‘is null’ vs ‘== null’",
            "date_published": "2023-12-14T00:00:00.000Z",
            "content_html": "<p>When C# 7.0 was officially released in March 2017 it introduced <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-version-history#c-version-70\">several new features</a> to make the life of developers easier, like tuples and deconstruction, local functions, expression body definitions and, the focus of this article, <strong>pattern matching</strong>.</p>\n<p>One of the advantages of pattern matching is a more concise syntax for testing expressions and taking actions when there’s a match, increasing the readability and correctness of your code.</p>\n<p>Checking for nulls is one of the most common usages. Before C# 7.0, if a developer wanted to check if a given value was null, usually the equality comparison would be used.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">PersonExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">FullName</span>(<span class=\"params\"><span class=\"keyword\">this</span> Person person</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (person == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(person));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;person.GivenName&#125;</span> <span class=\"subst\">&#123;person.Surname&#125;</span>&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>With pattern matching, the extension method would be using the <code>is</code> operator and the <code>null</code> constant to check if the person variable is null.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">PersonExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">FullName</span>(<span class=\"params\"><span class=\"keyword\">this</span> Person person</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (person <span class=\"keyword\">is</span> <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(person));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;person.GivenName&#125;</span> <span class=\"subst\">&#123;person.Surname&#125;</span>&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The change is so small that you are probably questioning if changing the way you code is really worthy for such a small readability improvement, to have the same results?</p>\n<p>And you are right in thinking that way since that’s probably true for 99% of use cases (if not 99.999%) but what if you really want to be sure it works every time?</p>\n<p>You see, reference types can overload the <code>==</code> operator and, if the developer decides to always return false when comparing to null, the first example would throw a <code>NullReferenceException</code>.</p>\n<p>Let’s test that by overloading the <code>==</code> operator to always return false, whatever the parameters received:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> GivenName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Surname &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"keyword\">operator</span> ==(Person left, Person right) =&gt; <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"keyword\">operator</span> !=(Person left, Person right) =&gt; !(left == right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">PersonExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">FullName</span>(<span class=\"params\"><span class=\"keyword\">this</span> Person person</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (person == <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(person));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;person.GivenName&#125;</span> <span class=\"subst\">&#123;person.Surname&#125;</span>&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>If we now call the extension method <code>FullName</code> with a null argument a <code>NullReferenceException</code> will be thrown instead of the expected <code>ArgumentNullException</code>. This happens because the compiler knows there’s an equality overload, calls it and gets false, so if won’t enter the if statement.</p>\n<img src=\"/2023/12/14/C-%E2%80%98is-null%E2%80%99-vs-%E2%80%98-null%E2%80%99/01_null_reference_exception.png\" class=\"\">\n\n<p>If you look at the generated IL Code, you’ll see the Person equality operator being called.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// [36 5 - 36 6]</span><br><span class=\"line\">IL_0000: nop</span><br><span class=\"line\"></span><br><span class=\"line\">// [37 9 - 37 28]</span><br><span class=\"line\">IL_0001: ldarg.0      // person</span><br><span class=\"line\">IL_0002: ldnull</span><br><span class=\"line\">IL_0003: call         bool Person::op_Equality(class Person, class Person)</span><br><span class=\"line\">IL_0008: stloc.0      // V_0</span><br><span class=\"line\"></span><br><span class=\"line\">// [37 29 - 37 77]</span><br><span class=\"line\">IL_0009: ldloc.0      // V_0</span><br><span class=\"line\">IL_000a: brfalse.s    IL_0017</span><br><span class=\"line\">IL_000c: ldstr        &quot;person&quot;</span><br><span class=\"line\">IL_0011: newobj       instance void [System.Runtime]System.ArgumentNullException::.ctor(string)</span><br><span class=\"line\">IL_0016: throw</span><br><span class=\"line\">IL_0017: ldarg.0      // person</span><br><span class=\"line\">IL_0018: callvirt     instance string Person::get_GivenName()</span><br><span class=\"line\">IL_001d: ldstr        &quot; &quot;</span><br><span class=\"line\">IL_0022: ldarg.0      // person</span><br><span class=\"line\">IL_0023: callvirt     instance string Person::get_Surname()</span><br><span class=\"line\">IL_0028: call         string [System.Runtime]System.String::Concat(string, string, string)</span><br><span class=\"line\"></span><br><span class=\"line\">// [40 5 - 40 6]</span><br><span class=\"line\">IL_002d: stloc.1      // V_1</span><br><span class=\"line\">IL_002e: br.s         IL_0030</span><br><span class=\"line\">IL_0030: ldloc.1      // V_1</span><br><span class=\"line\">IL_0031: ret</span><br></pre></td></tr></table></figure>\n\n<p>Before C# 7.0 if you wanted to be sure the <code>==</code> operator overload was ignored, you had to use <code>object.ReferenceEquals</code> to compare the object reference to null.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">PersonExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">FullName</span>(<span class=\"params\"><span class=\"keyword\">this</span> Person person</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ReferenceEquals(person, <span class=\"literal\">null</span>)) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(person));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;person.GivenName&#125;</span> <span class=\"subst\">&#123;person.Surname&#125;</span>&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>But when using pattern matching the compiler always generates code that compares to null, ignoring any <code>==</code> operator overload. This means you have the same behavior as using the <code>object.ReferenceEquals</code> method without writing so much code.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Person</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> GivenName &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Surname &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"keyword\">operator</span> ==(Person left, Person right) =&gt; <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">bool</span> <span class=\"keyword\">operator</span> !=(Person left, Person right) =&gt; !(left == right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">PersonExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">string</span> <span class=\"title\">FullName</span>(<span class=\"params\"><span class=\"keyword\">this</span> Person person</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (person <span class=\"keyword\">is</span> <span class=\"literal\">null</span>) <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(person));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">$&quot;<span class=\"subst\">&#123;person.GivenName&#125;</span> <span class=\"subst\">&#123;person.Surname&#125;</span>&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This ensures the method <code>FullName</code> always throws <code>ArgumentNullException</code> when a null reference is received.</p>\n<img src=\"/2023/12/14/C-%E2%80%98is-null%E2%80%99-vs-%E2%80%98-null%E2%80%99/02_argument_null_exception.png\" class=\"\">\n\n<p>Looking at the generated IL Code, we can see the <code>person</code> reference is being compared to null using the <code>ceq</code> instruction (this is exactly the same code if <code>object.ReferenceEquals</code> was being used — it would be inlined).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// [36 5 - 36 6]</span><br><span class=\"line\">IL_0000: nop</span><br><span class=\"line\"></span><br><span class=\"line\">// [37 9 - 37 43]</span><br><span class=\"line\">IL_0001: ldarg.0      // person</span><br><span class=\"line\">IL_0002: ldnull</span><br><span class=\"line\">IL_0003: ceq</span><br><span class=\"line\">IL_0005: stloc.0      // V_0</span><br><span class=\"line\"></span><br><span class=\"line\">IL_0006: ldloc.0      // V_0</span><br><span class=\"line\">IL_0007: brfalse.s    IL_0014</span><br><span class=\"line\"></span><br><span class=\"line\">// [37 44 - 37 92]</span><br><span class=\"line\">IL_0009: ldstr        &quot;person&quot;</span><br><span class=\"line\">IL_000e: newobj       instance void [System.Runtime]System.ArgumentNullException::.ctor(string)</span><br><span class=\"line\">IL_0013: throw</span><br><span class=\"line\"></span><br><span class=\"line\">// [39 9 - 39 55]</span><br><span class=\"line\">IL_0014: ldarg.0      // person</span><br><span class=\"line\">IL_0015: callvirt     instance string Person::get_GivenName()</span><br><span class=\"line\">IL_001a: ldstr        &quot; &quot;</span><br><span class=\"line\">IL_001f: ldarg.0      // person</span><br><span class=\"line\">IL_0020: callvirt     instance string Person::get_Surname()</span><br><span class=\"line\">IL_0025: call         string [System.Runtime]System.String::Concat(string, string, string)</span><br><span class=\"line\">IL_002a: stloc.1      // V_1</span><br><span class=\"line\">IL_002b: br.s         IL_002d</span><br><span class=\"line\"></span><br><span class=\"line\">// [40 5 - 40 6]</span><br><span class=\"line\">IL_002d: ldloc.1      // V_1</span><br><span class=\"line\">IL_002e: ret</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>In this article I explained why using pattern matching for null checks is preferred to using the equality operator.</p>\n<p>Not only it’s a small readability improvement but it also ensures the object reference is always compared to null even if the class has overloaded the <code>==</code> operator (same behavior as using the <code>object.ReferenceEquals</code> method but without writing so much code).</p>\n<p>Even if the equality operator overload is properly implemented, we can also consider this a small performance increase because executing the ceq operation is faster that a call to the class equality operator.</p>\n<p>As stated before, this may not affect 99% of your use cases, but for such small a small change in the way you code, why not?</p>\n",
            "tags": [
                "dotnetcore",
                "csharp",
                "dotnet"
            ]
        },
        {
            "id": "https://code-corner.dev/2023/11/04/Understanding-Flag-Enums-in-C/",
            "url": "https://code-corner.dev/2023/11/04/Understanding-Flag-Enums-in-C/",
            "title": "Understanding Flag Enums in C#",
            "date_published": "2023-11-04T00:00:00.000Z",
            "content_html": "<p>Enumeration types, also known as enum types, are widely used by C# developers to improve code readability and maintainability, by offering a standardized way to represent a set of related numeric constants. Good examples are days of the week, seasons, or a predefined range of colors.</p>\n<p>In this article I’m going to talk about flag enums, which are a special case, that can be used to represent a combination of binary choices into a single value using bitwise operations.</p>\n<hr>\n<p>Imagine you were creating a simple alarm application were you could set alarms for a given time and weekdays. If you were using a simple enum, the <code>Alarm</code> class would need a collection to store the selected days, ideally an hash set to prevent duplicates and faster lookups. It would look similar to this:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">enum</span> Weekday</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    None = <span class=\"number\">0</span>,</span><br><span class=\"line\">    Sunday,</span><br><span class=\"line\">    Monday,</span><br><span class=\"line\">    Tuesday,</span><br><span class=\"line\">    Wednesday,</span><br><span class=\"line\">    Thursday,</span><br><span class=\"line\">    Friday,</span><br><span class=\"line\">    Saturday,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Alarm</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ICollection&lt;Weekday&gt; Weekdays &#123; <span class=\"keyword\">get</span>; &#125; = <span class=\"keyword\">new</span> HashSet&lt;Weekday&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TimeOnly Time &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>An an example, if you needed to create an alarm to set off at 7 a.m. only during workdays and needed to execute some conditional logic depending your selection, the code could be as follows:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> alarm = <span class=\"keyword\">new</span> Alarm</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Time = <span class=\"keyword\">new</span> TimeOnly(<span class=\"number\">07</span>, <span class=\"number\">00</span>, <span class=\"number\">00</span>),</span><br><span class=\"line\">    Weekdays =</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Weekday.Monday,</span><br><span class=\"line\">        Weekday.Tuesday,</span><br><span class=\"line\">        Weekday.Wednesday,</span><br><span class=\"line\">        Weekday.Thursday,</span><br><span class=\"line\">        Weekday.Friday,</span><br><span class=\"line\">        Weekday.Saturday,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// disable a flag</span></span><br><span class=\"line\">alarm.Weekdays.Remove(Weekday.Saturday);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check if a flag is enabled</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (alarm.Weekdays.Contains(Weekday.Monday))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check if some flags are enabled</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (alarm.Weekdays.Any(e =&gt; e <span class=\"keyword\">is</span> Weekday.Saturday <span class=\"keyword\">or</span> Weekday.Sunday))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check if a flag is disabled</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!alarm.Weekdays.Contains(Weekday.Friday))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The code is relatively simple and easy to understand but it has two drawbacks — memory allocations of new collections and constant iterations to check for flags. How can we solve this?</p>\n<h1 id=\"Introducing-flag-enums\"><a href=\"#Introducing-flag-enums\" class=\"headerlink\" title=\"Introducing flag enums\"></a>Introducing flag enums</h1><p>Flag enums were created to optimize both memory and CPU usage by providing a way to store multiple options into a single variable.</p>\n<p>The core concept is the following: every variable is stored in memory as binary data and CPUs are very efficient at making bitwise operations so, if you ensure each enum value is represented by a single bit that doesn’t overlap another value, you can use binary operators (AND, OR, NOT and XOR) to store multiple options into a single primitive variable.</p>\n<p>By default, enums are represented in memory as an integer, but can also be a short or a long value. If each bit represents a different enum value, this means you can have up to 64 possible values that must not overlap each other.</p>\n<p>Lets change the previous example to use a flag enum instead:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">Flags</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">enum</span> Weekday</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    None        = <span class=\"number\">0</span>,</span><br><span class=\"line\">    Sunday      = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">0</span>, <span class=\"comment\">// 0b_00000001 // 1</span></span><br><span class=\"line\">    Monday      = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">1</span>, <span class=\"comment\">// 0b_00000010 // 2</span></span><br><span class=\"line\">    Tuesday     = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">2</span>, <span class=\"comment\">// 0b_00000100 // 4</span></span><br><span class=\"line\">    Wednesday   = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">3</span>, <span class=\"comment\">// 0b_00001000 // 8</span></span><br><span class=\"line\">    Thursday    = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">4</span>, <span class=\"comment\">// 0b_00010000 // 16</span></span><br><span class=\"line\">    Friday      = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">5</span>, <span class=\"comment\">// 0b_00100000 // 32</span></span><br><span class=\"line\">    Saturday    = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">6</span>, <span class=\"comment\">// 0b_01000000 // 64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Alarm</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Weekday Weekdays &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> TimeOnly Time &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, some small changes were made:</p>\n<ol>\n<li>Added the <code>Flags</code> attribute to the enum — not a requirement, but I’ll explain later why it should be used;</li>\n<li>Defined the value of each option ensuring no bit was overlapped — in this case I used the <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#left-shift-operator-\">shift left</a> operator to make it easier and more readable;</li>\n<li>Removed the collection and changed the property <code>Weekdays</code> to a simple <code>Weekday</code> enum;</li>\n</ol>\n<p>You may now be asking: you removed the collection and changed it to a single <code>Weekday</code> value, how am I supposed to represent multiple options then?</p>\n<h1 id=\"Introducing-bitwise-operators\"><a href=\"#Introducing-bitwise-operators\" class=\"headerlink\" title=\"Introducing bitwise operators\"></a>Introducing bitwise operators</h1><p>As I stated before, bitwise operators (<a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#logical-and-operator-\">AND</a>, <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#logical-or-operator-\">OR</a>, <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#logical-exclusive-or-operator-\">XOR</a>, <a href=\"https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators#bitwise-complement-operator-\">NOT</a>) allow us to execute logical computation between the bits of two integral operands.</p>\n<p>This is relevant because if we use a bitwise OR (|) operator we can store the result as an aggregation of multiple active flags. Imagine you wanted a variable representing the weekend (setting Saturday and Sunday flags):</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> weekend = Weekday.Saturday | Weekday.Sunday;</span><br><span class=\"line\"><span class=\"comment\">//          = 0b_01000000 | 0b_00000001</span></span><br><span class=\"line\"><span class=\"comment\">//          = 0b_01000001</span></span><br></pre></td></tr></table></figure>\n\n<p>As you can see in the comment showing the binary representation, both flags will be set.</p>\n<p>On the other hand, if you want to check if a given flag is active you can simply use the bitwise AND (&amp;) operator and compare the result to zero (or <code>Weekday.None</code>).</p>\n<p>Lets check if Sunday is part of the weekend by checking a non zero result:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hasSunday = (weekend &amp; Weekday.Sunday) != Weekday.None;</span><br><span class=\"line\"><span class=\"comment\">//            = (0b_01000001 &amp; 0b_00000001) != 0</span></span><br><span class=\"line\"><span class=\"comment\">//            = 0b_00000001 != 0</span></span><br><span class=\"line\"><span class=\"comment\">//            = true</span></span><br></pre></td></tr></table></figure>\n\n<p>If you want to check if a flag is disabled the operation result must be zero:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> noMonday = (weekend &amp; Weekday.Monday) == Weekday.None;</span><br><span class=\"line\"><span class=\"comment\">//           = (0b_01000001 &amp; 0b_00000010) == 0</span></span><br><span class=\"line\"><span class=\"comment\">//           = 0b_00000000 == 0</span></span><br><span class=\"line\"><span class=\"comment\">//           = true</span></span><br></pre></td></tr></table></figure>\n\n<p>And finally, if you want to disable a given flag just do a bitwise AND against a negated flag value:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sunday = weekend &amp; ~Weekday.Saturday;</span><br><span class=\"line\"><span class=\"comment\">//         = 0b_01000001 &amp; ~0b_01000000</span></span><br><span class=\"line\"><span class=\"comment\">//         = 0b_01000001 &amp; 0b_10111111</span></span><br><span class=\"line\"><span class=\"comment\">//         = 0b_00000001</span></span><br></pre></td></tr></table></figure>\n\n<p>Lets update the original example and use the bitwise operators we just learned (AND, OR, NOT):</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> alarm = <span class=\"keyword\">new</span> Alarm</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Time = <span class=\"keyword\">new</span> TimeOnly(<span class=\"number\">07</span>, <span class=\"number\">00</span>, <span class=\"number\">00</span>),</span><br><span class=\"line\">    Weekdays = Weekday.Monday |</span><br><span class=\"line\">               Weekday.Tuesday |</span><br><span class=\"line\">               Weekday.Wednesday |</span><br><span class=\"line\">               Weekday.Thursday |</span><br><span class=\"line\">               Weekday.Friday |</span><br><span class=\"line\">               Weekday.Saturday,</span><br><span class=\"line\">    <span class=\"comment\">// Weekdays = (Weekday) 0b_01111110</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// disable a flag</span></span><br><span class=\"line\">alarm.Weekdays &amp;= ~Weekday.Saturday; <span class=\"comment\">// (Weekday) 0b_00111110</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check if a flag is enabled</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((alarm.Weekdays &amp; Weekday.Monday) != <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check if some flags are enabled</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((alarm.Weekdays &amp; (Weekday.Saturday | Weekday.Sunday)) != Weekday.None)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check if a flag is disabled</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((alarm.Weekdays &amp; Weekday.Friday) == Weekday.None)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Right now you must be thinking: sure, this code is more resource efficient and performant but it certainly is harder to read… not sure if I gained something… how can I improve this?</p>\n<p>Well, because checking if a flag is active is a very common scenario, all enums have a method called <code>HasFlag</code> that can be used just for that. Lets rewrite the example in a much simpler and readable way:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> alarm = <span class=\"keyword\">new</span> Alarm</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Time = <span class=\"keyword\">new</span> TimeOnly(<span class=\"number\">07</span>, <span class=\"number\">00</span>, <span class=\"number\">00</span>),</span><br><span class=\"line\">    Weekdays = Weekday.Monday |</span><br><span class=\"line\">               Weekday.Tuesday |</span><br><span class=\"line\">               Weekday.Wednesday |</span><br><span class=\"line\">               Weekday.Thursday |</span><br><span class=\"line\">               Weekday.Friday |</span><br><span class=\"line\">               Weekday.Saturday,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">alarm.Weekdays &amp;= ~Weekday.Saturday;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (alarm.Weekdays.HasFlag(Weekday.Monday))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (alarm.Weekdays.HasFlag(Weekday.Saturday) || alarm.Weekdays.HasFlag(Weekday.Sunday))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!alarm.Weekdays.HasFlag(Weekday.Friday))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>It would be nice to also have a method to disable a flag but none is provided by the framework, so you’ll have to stick with bitwise operators for that scenario.</p>\n<h1 id=\"Why-the-Flags-attribute\"><a href=\"#Why-the-Flags-attribute\" class=\"headerlink\" title=\"Why the [Flags] attribute?\"></a>Why the [Flags] attribute?</h1><p>Earlier I said marking the enum with a <code>Flags</code> attribute is opcional (everything we talked about will still work) but still recommended because it helps the IDE to give you more detailed warnings or suggestions, but it’s specially important for debugging, parsing or converting to a string representation.</p>\n<p>Imagine the <code>weekend</code> scenario were both Saturday and Sunday flags are set. If the enum doesn’t have the <code>Flags</code> attribute and you go inspect the variable, the IDE will show the value 65 (<code>0b_01000001</code>) because it isn’t defined in the enum. Same behavior for the <code>ToString</code> method, that will return <code>&quot;65&quot;</code>:</p>\n<img src=\"/2023/11/04/Understanding-Flag-Enums-in-C/01_value_no_flag_attribute.png\" class=\"post-image\">\n\n<p>If on the contrary the <code>Flags</code> attribute is used, both IDE and <code>ToString</code> method will show a proper representation of what flags are active:</p>\n<img src=\"/2023/11/04/Understanding-Flag-Enums-in-C/02_value_flag_attribute.png\" class=\"post-image\">\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I hope this article gave you a good idea on how to use flag enums and bitwise operations to store and check for active flags using a single field, making your application more resource efficient without losing code readability.</p>\n",
            "tags": [
                "dotnetcore",
                "csharp",
                "dotnet"
            ]
        }
    ]
}